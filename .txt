local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera

-- Safely get LocalPlayer with a wait loop
local LocalPlayer
while not game:GetService("Players").LocalPlayer do
    wait(0.1)
end
LocalPlayer = game:GetService("Players").LocalPlayer

-- Wait for character to load
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

-- GUI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "CustomExecutor"
ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 400, 0, 300)
MainFrame.Position = UDim2.new(0.5, -200, 0.5, -150)
MainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ScreenGui

local TabFrame = Instance.new("Frame")
TabFrame.Size = UDim2.new(1, 0, 0, 30)
TabFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
TabFrame.BorderSizePixel = 0
TabFrame.Parent = MainFrame

local ContentFrame = Instance.new("Frame")
ContentFrame.Size = UDim2.new(1, 0, 1, -30)
ContentFrame.Position = UDim2.new(0, 0, 0, 30)
ContentFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ContentFrame.BorderSizePixel = 0
ContentFrame.Parent = MainFrame

-- Toggle GUI with Q
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.Q then
        MainFrame.Visible = not MainFrame.Visible
    end
end)

-- Tab Buttons
local tabs = {"Aimbot", "Visuals", "Exploits"}
local currentTab = nil
local tabContents = {}

for i, tabName in ipairs(tabs) do
    local TabButton = Instance.new("TextButton")
    TabButton.Size = UDim2.new(0, 133, 1, 0)
    TabButton.Position = UDim2.new(0, (i-1) * 133, 0, 0)
    TabButton.Text = tabName
    TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    TabButton.BorderSizePixel = 0
    TabButton.Font = Enum.Font.SourceSans
    TabButton.TextSize = 18
    TabButton.Parent = TabFrame

    local Content = Instance.new("Frame")
    Content.Size = UDim2.new(1, 0, 1, 0)
    Content.BackgroundTransparency = 1
    Content.Visible = false
    Content.Parent = ContentFrame
    tabContents[tabName] = Content

    TabButton.MouseButton1Click:Connect(function()
        if currentTab ~= tabName then
            currentTab = tabName
            for _, content in pairs(tabContents) do
                content.Visible = false
            end
            tabContents[tabName].Visible = true
            for _, button in pairs(TabFrame:GetChildren()) do
                if button:IsA("TextButton") then
                    button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                end
            end
            TabButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        end
    end)
end

-- Dragging Functionality
local dragging, dragInput, dragStart, startPos
MainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

MainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

RunService.Stepped:Connect(function()
    if dragging and dragInput then
        local delta = dragInput.Position - dragStart
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Aimbot Tab
local aimbotEnabled = false
local targetPlayer = nil

local AimbotToggle = Instance.new("TextButton")
AimbotToggle.Size = UDim2.new(0, 100, 0, 30)
AimbotToggle.Position = UDim2.new(0, 10, 0, 10)
AimbotToggle.Text = "Aimbot: OFF"
AimbotToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
AimbotToggle.TextColor3 = Color3.fromRGB(255, 0, 0)
AimbotToggle.Font = Enum.Font.SourceSans
AimbotToggle.TextSize = 16
AimbotToggle.Parent = tabContents["Aimbot"]

local function getNearestPlayer()
    local nearestDistance = math.huge
    local nearestPlayer = nil
    for _, otherPlayer in pairs(game:GetService("Players"):GetPlayers()) do
        if otherPlayer ~= LocalPlayer and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (rootPart.Position - otherPlayer.Character.HumanoidRootPart.Position).Magnitude
            if distance < nearestDistance then
                nearestDistance = distance
                nearestPlayer = otherPlayer
            end
        end
    end
    return nearestPlayer
end

AimbotToggle.MouseButton1Click:Connect(function()
    aimbotEnabled = not aimbotEnabled
    AimbotToggle.Text = "Aimbot: " .. (aimbotEnabled and "ON" or "OFF")
    AimbotToggle.TextColor3 = aimbotEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    if not aimbotEnabled then
        RunService:UnbindFromRenderStep("LockOnPlayer")
    end
end)

UserInputService.InputBegan:Connect(function(input)
    if aimbotEnabled and input.UserInputType == Enum.UserInputType.MouseButton2 then
        targetPlayer = getNearestPlayer()
        if targetPlayer then
            RunService:BindToRenderStep("LockOnPlayer", Enum.RenderPriority.Camera.Value + 1, function()
                Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPlayer.Character.HumanoidRootPart.Position)
            end)
        end
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        RunService:UnbindFromRenderStep("LockOnPlayer")
    end
end)

-- Visuals Tab (ESP Features)
local espToggles = {
    Box = false,
    Name = false,
    Distance = false,
    HealthBar = false,
    Tracer = true, -- Enabled by default
    Skeleton = false
}
local fovValue = Camera.FieldOfView -- Default FOV

local espPlayers = {}
local function DrawESP(plr)
    local drawings = {
        Box = Drawing.new("Quad"),
        Name = Drawing.new("Text"),
        Distance = Drawing.new("Text"),
        HealthBar = Drawing.new("Line"),
        Tracer = Drawing.new("Line"),
        Skeleton = {}
    }
    
    drawings.Box.Color = Color3.fromRGB(255, 255, 255)
    drawings.Box.Thickness = 1
    drawings.Box.Transparency = 1
    drawings.Box.Visible = false

    drawings.Name.Size = 18
    drawings.Name.Color = Color3.fromRGB(255, 255, 255)
    drawings.Name.Outline = true
    drawings.Name.Visible = false

    drawings.Distance.Size = 16
    drawings.Distance.Color = Color3.fromRGB(255, 255, 255)
    drawings.Distance.Outline = true
    drawings.Distance.Visible = false

    drawings.HealthBar.Thickness = 7 -- Increased thickness for bigger health bar
    drawings.HealthBar.Visible = false

    drawings.Tracer.Color = Color3.fromRGB(0, 255, 0)
    drawings.Tracer.Thickness = 1
    drawings.Tracer.Visible = false

    local bones = {
        {"Head", "UpperTorso"}, {"UpperTorso", "LowerTorso"},
        {"LowerTorso", "LeftUpperLeg"}, {"LeftUpperLeg", "LeftLowerLeg"}, {"LeftLowerLeg", "LeftFoot"},
        {"LowerTorso", "RightUpperLeg"}, {"RightUpperLeg", "RightLowerLeg"}, {"RightLowerLeg", "RightFoot"},
        {"UpperTorso", "LeftUpperArm"}, {"LeftUpperArm", "LeftLowerArm"}, {"LeftLowerArm", "LeftHand"},
        {"UpperTorso", "RightUpperArm"}, {"RightUpperArm", "RightLowerArm"}, {"RightLowerArm", "RightHand"}
    }
    for _, pair in ipairs(bones) do
        local line = Drawing.new("Line")
        line.Color = Color3.fromRGB(255, 165, 0)
        line.Thickness = 2
        line.Visible = false
        drawings.Skeleton[pair[1] .. pair[2]] = line
    end

    local function Update()
        local connection
        connection = RunService.RenderStepped:Connect(function()
            if plr.Character and plr.Character.PrimaryPart and plr.Character:FindFirstChildOfClass("Humanoid") and plr.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
                local pos, vis = Camera:WorldToViewportPoint(plr.Character.PrimaryPart.Position)
                if vis then
                    local TopLeft = Camera:WorldToViewportPoint((plr.Character.PrimaryPart.CFrame * CFrame.new(-2, 3, 0)).p)
                    local TopRight = Camera:WorldToViewportPoint((plr.Character.PrimaryPart.CFrame * CFrame.new(2, 3, 0)).p)
                    local BottomLeft = Camera:WorldToViewportPoint((plr.Character.PrimaryPart.CFrame * CFrame.new(-2, -3, 0)).p)
                    local BottomRight = Camera:WorldToViewportPoint((plr.Character.PrimaryPart.CFrame * CFrame.new(2, -3, 0)).p)
                    local HeadPos = Camera:WorldToViewportPoint((plr.Character.Head.CFrame * CFrame.new(0, 1.5, 0)).p) -- Above head

                    if espToggles.Box then
                        drawings.Box.PointA = Vector2.new(TopRight.X, TopRight.Y)
                        drawings.Box.PointB = Vector2.new(TopLeft.X, TopLeft.Y)
                        drawings.Box.PointC = Vector2.new(BottomLeft.X, BottomLeft.Y)
                        drawings.Box.PointD = Vector2.new(BottomRight.X, BottomRight.Y)
                        drawings.Box.Visible = true
                    else
                        drawings.Box.Visible = false
                    end

                    if espToggles.Name then
                        drawings.Name.Position = Vector2.new(TopRight.X, TopRight.Y - 20)
                        drawings.Name.Text = plr.Name
                        drawings.Name.Visible = true
                    else
                        drawings.Name.Visible = false
                    end

                    if espToggles.Distance then
                        local playerDistance = (rootPart.Position - plr.Character.HumanoidRootPart.Position).Magnitude
                        drawings.Distance.Position = Vector2.new(BottomRight.X, BottomRight.Y + 5)
                        drawings.Distance.Text = tostring(math.floor(playerDistance)) .. "m"
                        drawings.Distance.Visible = true
                    else
                        drawings.Distance.Visible = false
                    end

                    if espToggles.HealthBar then
                        local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            local healthPercent = humanoid.Health / humanoid.MaxHealth
                            local barWidth = 100 -- Increased width for bigger health bar
                            local barHeight = 10 -- Increased thickness for bigger health bar
                            local barX = HeadPos.X - barWidth / 2 -- Center above head
                            drawings.HealthBar.From = Vector2.new(barX, HeadPos.Y - 10) -- Above head
                            drawings.HealthBar.To = Vector2.new(barX + (barWidth * healthPercent), HeadPos.Y - 10)
                            drawings.HealthBar.Color = Color3.fromRGB(0, 255, 0)
                            drawings.HealthBar.Thickness = barHeight
                            drawings.HealthBar.Visible = true
                        end
                    else
                        drawings.HealthBar.Visible = false
                    end

                    if espToggles.Tracer then
                        local chest = plr.Character:FindFirstChild("UpperTorso") or plr.Character:FindFirstChild("Torso") -- Fallback to Torso for R6
                        if chest then
                            local chestPos, chestVis = Camera:WorldToViewportPoint(chest.Position)
                            if chestVis then
                                drawings.Tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2) -- Center of screen
                                drawings.Tracer.To = Vector2.new(chestPos.X, chestPos.Y) -- Player's chest
                                drawings.Tracer.Visible = true
                            else
                                drawings.Tracer.Visible = false
                            end
                        else
                            drawings.Tracer.Visible = false
                        end
                    else
                        drawings.Tracer.Visible = false
                    end

                    if espToggles.Skeleton then
                        for _, pair in ipairs(bones) do
                            local p1 = plr.Character:FindFirstChild(pair[1])
                            local p2 = plr.Character:FindFirstChild(pair[2])
                            if p1 and p2 then
                                local screenP1, vis1 = Camera:WorldToViewportPoint(p1.Position)
                                local screenP2, vis2 = Camera:WorldToViewportPoint(p2.Position)
                                if vis1 and vis2 then
                                    local boneLine = drawings.Skeleton[pair[1] .. pair[2]]
                                    boneLine.From = Vector2.new(screenP1.X, screenP1.Y)
                                    boneLine.To = Vector2.new(screenP2.X, screenP2.Y)
                                    boneLine.Visible = true
                                else
                                    drawings.Skeleton[pair[1] .. pair[2]].Visible = false
                                end
                            end
                        end
                    else
                        for _, line in pairs(drawings.Skeleton) do
                            line.Visible = false
                        end
                    end
                else
                    for _, drawing in pairs(drawings) do
                        if type(drawing) == "table" then
                            for _, line in pairs(drawing) do line.Visible = false end
                        else
                            drawing.Visible = false
                        end
                    end
                end
            else
                for _, drawing in pairs(drawings) do
                    if type(drawing) == "table" then
                        for _, line in pairs(drawing) do line.Visible = false end
                    else
                        drawing.Visible = false
                    end
                end
                if not game:GetService("Players"):FindFirstChild(plr.Name) then
                    connection:Disconnect()
                end
            end
        end)
    end
    coroutine.wrap(Update)()
    espPlayers[plr] = drawings
end

for _, player in pairs(game:GetService("Players"):GetPlayers()) do
    if player ~= LocalPlayer then
        DrawESP(player)
    end
end

game:GetService("Players").PlayerAdded:Connect(function(player)
    wait(1)
    if player ~= LocalPlayer then
        DrawESP(player)
    end
end)

-- Visuals Tab GUI
local yOffset = 10
for feature, enabled in pairs(espToggles) do
    local Toggle = Instance.new("TextButton")
    Toggle.Size = UDim2.new(0, 100, 0, 30)
    Toggle.Position = UDim2.new(0, 10, 0, yOffset)
    Toggle.Text = feature .. ": " .. (enabled and "ON" or "OFF")
    Toggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    Toggle.TextColor3 = enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    Toggle.Font = Enum.Font.SourceSans
    Toggle.TextSize = 16
    Toggle.Parent = tabContents["Visuals"]

    Toggle.MouseButton1Click:Connect(function()
        espToggles[feature] = not espToggles[feature]
        Toggle.Text = feature .. ": " .. (espToggles[feature] and "ON" or "OFF")
        Toggle.TextColor3 = espToggles[feature] and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    end)
    yOffset = yOffset + 40
end

-- FOV Changer
local FovLabel = Instance.new("TextLabel")
FovLabel.Size = UDim2.new(0, 100, 0, 20)
FovLabel.Position = UDim2.new(0, 10, 0, yOffset)
FovLabel.Text = "FOV: " .. math.floor(fovValue)
FovLabel.BackgroundTransparency = 1
FovLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
FovLabel.Font = Enum.Font.SourceSans
FovLabel.TextSize = 16
FovLabel.Parent = tabContents["Visuals"]

local FovSlider = Instance.new("TextButton")
FovSlider.Size = UDim2.new(0, 200, 0, 20)
FovSlider.Position = UDim2.new(0, 10, 0, yOffset + 20)
FovSlider.Text = ""
FovSlider.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
FovSlider.Parent = tabContents["Visuals"]

local FovKnob = Instance.new("Frame")
FovKnob.Size = UDim2.new(0, 10, 1, 0)
FovKnob.Position = UDim2.new((fovValue - 70) / 130, 0, 0, 0) -- Range: 70 to 200
FovKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
FovKnob.Parent = FovSlider

local draggingFov = false
FovSlider.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingFov = true
    end
end)

FovSlider.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingFov = false
    end
end)

RunService.RenderStepped:Connect(function()
    if draggingFov then
        local mouseX = UserInputService:GetMouseLocation().X
        local sliderPos = FovSlider.AbsolutePosition.X
        local sliderWidth = FovSlider.AbsoluteSize.X
        local newPos = math.clamp((mouseX - sliderPos) / sliderWidth, 0, 1)
        FovKnob.Position = UDim2.new(newPos, 0, 0, 0)
        fovValue = math.floor(70 + (newPos * 130)) -- Range: 70 to 200
        FovLabel.Text = "FOV: " .. fovValue
        Camera.FieldOfView = fovValue
    end
end)

-- Exploits Tab (Fly, NoClip, Infinite Jump, Spinbot)
local flyEnabled = false
local flySpeed = 75 -- Default fly speed
local controlSpeed = 10000
local noClipEnabled = false
local infiniteJumpEnabled = false
local spinbotEnabled = false

-- Fly Toggle
local FlyToggle = Instance.new("TextButton")
FlyToggle.Size = UDim2.new(0, 100, 0, 30)
FlyToggle.Position = UDim2.new(0, 10, 0, 10)
FlyToggle.Text = "Fly: OFF"
FlyToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
FlyToggle.TextColor3 = Color3.fromRGB(255, 0, 0)
FlyToggle.Font = Enum.Font.SourceSans
FlyToggle.TextSize = 16
FlyToggle.Parent = tabContents["Exploits"]

-- Fly Speed Slider
local FlySpeedLabel = Instance.new("TextLabel")
FlySpeedLabel.Size = UDim2.new(0, 100, 0, 20)
FlySpeedLabel.Position = UDim2.new(0, 10, 0, 50)
FlySpeedLabel.Text = "Fly Speed: " .. flySpeed
FlySpeedLabel.BackgroundTransparency = 1
FlySpeedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
FlySpeedLabel.Font = Enum.Font.SourceSans
FlySpeedLabel.TextSize = 16
FlySpeedLabel.Parent = tabContents["Exploits"]

local FlySpeedSlider = Instance.new("TextButton")
FlySpeedSlider.Size = UDim2.new(0, 200, 0, 20)
FlySpeedSlider.Position = UDim2.new(0, 10, 0, 70)
FlySpeedSlider.Text = ""
FlySpeedSlider.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
FlySpeedSlider.Parent = tabContents["Exploits"]

local FlySpeedKnob = Instance.new("Frame")
FlySpeedKnob.Size = UDim2.new(0, 10, 1, 0)
FlySpeedKnob.Position = UDim2.new((flySpeed - 10) / 190, 0, 0, 0)
FlySpeedKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
FlySpeedKnob.Parent = FlySpeedSlider

local draggingSlider = false
FlySpeedSlider.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingSlider = true
    end
end)

FlySpeedSlider.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingSlider = false
    end
end)

RunService.RenderStepped:Connect(function()
    if draggingSlider then
        local mouseX = UserInputService:GetMouseLocation().X
        local sliderPos = FlySpeedSlider.AbsolutePosition.X
        local sliderWidth = FlySpeedSlider.AbsoluteSize.X
        local newPos = math.clamp((mouseX - sliderPos) / sliderWidth, 0, 1)
        FlySpeedKnob.Position = UDim2.new(newPos, 0, 0, 0)
        flySpeed = math.floor(10 + (newPos * 190)) -- Range: 10 to 200
        FlySpeedLabel.Text = "Fly Speed: " .. flySpeed
    end
end)

local function toggleFly()
    flyEnabled = not flyEnabled
    FlyToggle.Text = "Fly: " .. (flyEnabled and "ON" or "OFF")
    FlyToggle.TextColor3 = flyEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    
    if flyEnabled then
        humanoid.PlatformStand = true
        local bv = Instance.new("BodyVelocity")
        bv.Velocity = Vector3.new(0, 0, 0)
        bv.MaxForce = Vector3.new(controlSpeed, controlSpeed, controlSpeed)
        bv.Parent = rootPart
        
        local bg = Instance.new("BodyGyro")
        bg.MaxTorque = Vector3.new(controlSpeed, controlSpeed, controlSpeed)
        bg.P = 5000
        bg.D = 500
        bg.CFrame = rootPart.CFrame
        bg.Parent = rootPart
        
        spawn(function()
            while flyEnabled and rootPart and humanoid do
                local cam = workspace.CurrentCamera
                local move = Vector3.new(0, 0, 0)
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then move = move + Vector3.new(0, 0, -1) end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then move = move + Vector3.new(0, 0, 1) end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then move = move + Vector3.new(-1, 0, 0) end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then move = move + Vector3.new(1, 0, 0) end
                if UserInputService:IsKeyDown(Enum.KeyCode.Space) then move = move + Vector3.new(0, 1, 0) end
                if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then move = move + Vector3.new(0, -1, 0) end
                
                if move.Magnitude > 0 then
                    move = move.Unit * flySpeed -- Use dynamic flySpeed
                    bv.Velocity = cam.CFrame:VectorToWorldSpace(move)
                    bg.CFrame = cam.CFrame
                else
                    bv.Velocity = Vector3.new(0, 0, 0)
                end
                wait()
            end
        end)
    else
        humanoid.PlatformStand = false
        if rootPart:FindFirstChild("BodyVelocity") then rootPart.BodyVelocity:Destroy() end
        if rootPart:FindFirstChild("BodyGyro") then rootPart.BodyGyro:Destroy() end
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end
end

FlyToggle.MouseButton1Click:Connect(toggleFly)

-- NoClip Toggle
local NoClipToggle = Instance.new("TextButton")
NoClipToggle.Size = UDim2.new(0, 100, 0, 30)
NoClipToggle.Position = UDim2.new(0, 10, 0, 100)
NoClipToggle.Text = "NoClip: OFF"
NoClipToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
NoClipToggle.TextColor3 = Color3.fromRGB(255, 0, 0)
NoClipToggle.Font = Enum.Font.SourceSans
NoClipToggle.TextSize = 16
NoClipToggle.Parent = tabContents["Exploits"]

local function toggleNoClip()
    noClipEnabled = not noClipEnabled
    NoClipToggle.Text = "NoClip: " .. (noClipEnabled and "ON" or "OFF")
    NoClipToggle.TextColor3 = noClipEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    
    if noClipEnabled then
        RunService.Stepped:Connect(function()
            if noClipEnabled and character then
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") and part.CanCollide then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
    end
end

NoClipToggle.MouseButton1Click:Connect(toggleNoClip)

-- Infinite Jump Toggle
local InfiniteJumpToggle = Instance.new("TextButton")
InfiniteJumpToggle.Size = UDim2.new(0, 100, 0, 30)
InfiniteJumpToggle.Position = UDim2.new(0, 10, 0, 140)
InfiniteJumpToggle.Text = "Inf Jump: OFF"
InfiniteJumpToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
InfiniteJumpToggle.TextColor3 = Color3.fromRGB(255, 0, 0)
InfiniteJumpToggle.Font = Enum.Font.SourceSans
InfiniteJumpToggle.TextSize = 16
InfiniteJumpToggle.Parent = tabContents["Exploits"]

UserInputService.JumpRequest:Connect(function()
    if infiniteJumpEnabled and humanoid then
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

InfiniteJumpToggle.MouseButton1Click:Connect(function()
    infiniteJumpEnabled = not infiniteJumpEnabled
    InfiniteJumpToggle.Text = "Inf Jump: " .. (infiniteJumpEnabled and "ON" or "OFF")
    InfiniteJumpToggle.TextColor3 = infiniteJumpEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
end)

-- Spinbot Toggle
local SpinbotToggle = Instance.new("TextButton")
SpinbotToggle.Size = UDim2.new(0, 100, 0, 30)
SpinbotToggle.Position = UDim2.new(0, 10, 0, 180)
SpinbotToggle.Text = "Spinbot: OFF"
SpinbotToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
SpinbotToggle.TextColor3 = Color3.fromRGB(255, 0, 0)
SpinbotToggle.Font = Enum.Font.SourceSans
SpinbotToggle.TextSize = 16
SpinbotToggle.Parent = tabContents["Exploits"]

local spinSpeed = 100 -- Adjustable spin speed
local spinConnection
SpinbotToggle.MouseButton1Click:Connect(function()
    spinbotEnabled = not spinbotEnabled
    SpinbotToggle.Text = "Spinbot: " .. (spinbotEnabled and "ON" or "OFF")
    SpinbotToggle.TextColor3 = spinbotEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    
    if spinbotEnabled then
        spinConnection = RunService.RenderStepped:Connect(function()
            if spinbotEnabled then
                local newCFrame = Camera.CFrame * CFrame.Angles(0, math.rad(spinSpeed) * wait(), 0)
                Camera.CFrame = newCFrame
            end
        end)
    else
        if spinConnection then
            spinConnection:Disconnect()
        end
    end
end)

-- Initialize first tab
tabContents["Aimbot"].Visible = true
TabFrame:GetChildren()[1].BackgroundColor3 = Color3.fromRGB(70, 70, 70)
currentTab = "Aimbot"
