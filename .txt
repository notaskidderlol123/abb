print("Nettleware Alpha script starting...")

local success, err = pcall(function()
    -- Core Services
    local UserInputService = game:GetService("UserInputService")
    local RunService = game:GetService("RunService")
    local TweenService = game:GetService("TweenService")
    local Camera = workspace.CurrentCamera
    local PlayersService = game:GetService("Players")
    local HttpService = game:GetService("HttpService")
    local Lighting = game:GetService("Lighting")

    local LocalPlayer = PlayersService.LocalPlayer or PlayersService.PlayerAdded:Wait()

    -- File-based config
    local configFile = "NettlewareConfig.json"

    -- Default settings
    local settings = {
        aimbotEnabled = false,
        deadCheck = false,
        teamCheck = false,
        aimbotSmoothnessEnabled = false,
        aimbotSmoothness = 0.5,
        aimbotFovEnabled = false,
        aimbotFovSize = 100,
        aimbotBone = "Head",
        espToggles = {
            Box = false,
            Name = false,
            Speed = false,
            HealthBar = false,
            Tracer = false,
            Skeleton = false,
            Box3D = false
        },
        fullbrightEnabled = false,
        flyEnabled = false,
        flySpeed = 75,
        noClipEnabled = false,
        infiniteJumpEnabled = false,
        speedEnabled = false,
        speedMultiplier = 1,
        saveLastPositionEnabled = false,
        playerListEnabled = false,
        guiBind = Enum.KeyCode.Q,
        unbindAll = false,
        keyBinds = {
            Aimbot = nil,
            DeadCheck = nil,
            TeamCheck = nil,
            Smoothness = nil,
            FovCircle = nil,
            Fly = nil,
            NoClip = nil,
            InfiniteJump = nil,
            Speed = nil,
            SaveLastPosition = nil,
            PlayerList = nil
        }
    }

    local function simpleEncode(tbl)
        local str = "{"
        for k, v in pairs(tbl) do
            if type(v) == "table" then
                str = str .. k .. "=" .. simpleEncode(v) .. ","
            else
                str = str .. k .. "=" .. tostring(v) .. ","
            end
        end
        return str .. "}"
    end

    local function simpleDecode(str)
        return settings
    end

    local useHttpService = pcall(function() return HttpService:JSONEncode({}) end)

    local function loadSettings()
        if not pcall(function() return readfile(configFile) end) then
            print("No config file found, using default settings.")
            return
        end
        local fileContent = readfile(configFile)
        if useHttpService then
            local success, data = pcall(function() return HttpService:JSONDecode(fileContent) end)
            if success and data then
                for key, value in pairs(data) do
                    settings[key] = value
                end
                print("Settings loaded successfully via HttpService.")
            else
                warn("Failed to decode JSON: " .. tostring(data))
            end
        else
            settings = simpleDecode(fileContent)
            print("Settings loaded using fallback method (HttpService unavailable).")
        end
    end

    local function saveSettings()
        local encoded
        if useHttpService then
            local success, result = pcall(function() return HttpService:JSONEncode(settings) end)
            if not success then
                warn("Failed to encode settings to JSON: " .. tostring(result))
                return
            end
            encoded = result
        else
            encoded = simpleEncode(settings)
        end
        local writeSuccess = pcall(function() writefile(configFile, encoded) end)
        if not writeSuccess then
            warn("Failed to write to " .. configFile .. ". Check permissions or executor compatibility.")
        else
            print("Settings saved successfully.")
        end
    end

    loadSettings()

    local function getCharacter()
        return LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    end

    -- Main GUI Setup
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "NettlewareAlphaGUI"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.IgnoreGuiInset = true

    local successCoreGui, errCoreGui = pcall(function()
        ScreenGui.Parent = game:GetService("CoreGui")
    end)
    if not successCoreGui then
        warn("Failed to parent to CoreGui: " .. tostring(errCoreGui))
        ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
        print("Falling back to PlayerGui for GUI parenting.")
    end

    local MainFrame = Instance.new("Frame")
    MainFrame.Size = UDim2.new(0, 600, 0, 600)
    MainFrame.Position = UDim2.new(0.5, -300, 0.5, -300)
    MainFrame.BackgroundColor3 = Color3.fromRGB(10, 10, 30)
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui
    print("MainFrame created and parented to ScreenGui.")

    -- Draggable Functionality
    local dragging, dragInput, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    MainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    MainFrame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)

    -- GUI Toggle with Visibility
    local guiVisible = true
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == settings.guiBind then
            guiVisible = not guiVisible
            MainFrame.Visible = guiVisible
            print("GUI toggled to " .. (guiVisible and "visible" or "hidden") .. ". Press '" .. settings.guiBind.Name .. "' to toggle.")
        end
    end)

    -- Background with Circuit Pattern
    local CircuitBackground = Instance.new("ImageLabel")
    CircuitBackground.Size = UDim2.new(1, 0, 1, 0)
    CircuitBackground.BackgroundTransparency = 1
    CircuitBackground.Image = "rbxassetid://10758317539"
    CircuitBackground.ImageColor3 = Color3.fromRGB(0, 100, 255)
    CircuitBackground.ImageTransparency = 0.7
    CircuitBackground.Parent = MainFrame

    -- Pulsing Neon Effect
    local NeonPulse = Instance.new("UIStroke")
    NeonPulse.Thickness = 2
    NeonPulse.Color = Color3.fromRGB(0, 200, 255)
    NeonPulse.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    NeonPulse.Parent = MainFrame
    spawn(function()
        while true do
            for i = 0.7, 1, 0.01 do
                CircuitBackground.ImageTransparency = i
                wait(0.01)
            end
            for i = 1, 0.7, -0.01 do
                CircuitBackground.ImageTransparency = i
                wait(0.01)
            end
        end
    end)

    -- Title
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Size = UDim2.new(0, 400, 0, 50)
    TitleLabel.Position = UDim2.new(0.5, -200, 0, 20)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = "Nettleware Alpha"
    TitleLabel.TextColor3 = Color3.fromRGB(0, 200, 255)
    TitleLabel.Font = Enum.Font.SourceSansBold
    TitleLabel.TextSize = 24
    TitleLabel.TextStrokeTransparency = 0
    TitleLabel.TextStrokeColor3 = Color3.fromRGB(0, 100, 255)
    TitleLabel.Parent = MainFrame

    -- Discord Links at Bottom Corners
    local DiscordLeft = Instance.new("TextLabel")
    DiscordLeft.Size = UDim2.new(0, 150, 0, 20)
    DiscordLeft.Position = UDim2.new(0, 10, 1, -30)
    DiscordLeft.BackgroundTransparency = 1
    DiscordLeft.Text = "discord.gg/YxaqVDMVC5"
    DiscordLeft.TextColor3 = Color3.fromRGB(0, 200, 255)
    DiscordLeft.Font = Enum.Font.SourceSans
    DiscordLeft.TextSize = 14
    DiscordLeft.Parent = MainFrame

    local DiscordRight = Instance.new("TextLabel")
    DiscordRight.Size = UDim2.new(0, 150, 0, 20)
    DiscordRight.Position = UDim2.new(1, -160, 1, -30)
    DiscordRight.BackgroundTransparency = 1
    DiscordRight.Text = "discord.gg/YxaqVDMVC5"
    DiscordRight.TextColor3 = Color3.fromRGB(0, 200, 255)
    DiscordRight.Font = Enum.Font.SourceSans
    DiscordRight.TextSize = 14
    DiscordRight.Parent = MainFrame

    -- Tab Buttons
    local tabs = {"Aimbot", "Visuals", "Exploits", "Settings"}
    local currentTab = nil
    local tabContents = {}

    local tabWidth = 100
    local tabSpacing = 20
    local totalTabsWidth = (#tabs * tabWidth) + ((#tabs - 1) * tabSpacing)
    local startX = (600 - totalTabsWidth) / 2

    for i, tabName in ipairs(tabs) do
        local xPos = startX + ((i - 1) * (tabWidth + tabSpacing))

        local TabButton = Instance.new("TextButton")
        TabButton.Size = UDim2.new(0, tabWidth, 0, 40)
        TabButton.Position = UDim2.new(0, xPos, 0, 80)
        TabButton.Text = tabName
        TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        TabButton.BackgroundColor3 = Color3.fromRGB(0, 70, 140)
        TabButton.BackgroundTransparency = 0
        TabButton.TextTransparency = 0
        TabButton.Font = Enum.Font.SourceSansBold
        TabButton.TextSize = 16
        TabButton.BorderSizePixel = 0
        TabButton.Parent = MainFrame

        local Content = Instance.new("ScrollingFrame")
        Content.Size = UDim2.new(0, 300, 0, 400)
        Content.Position = UDim2.new(0.5, -150, 0, 130)
        Content.BackgroundColor3 = Color3.fromRGB(0, 40, 80)
        Content.BackgroundTransparency = 0
        Content.BorderSizePixel = 0
        Content.Visible = false
        Content.ScrollBarThickness = 5
        Content.Parent = MainFrame
        tabContents[tabName] = Content

        TabButton.MouseButton1Click:Connect(function()
            if currentTab ~= tabName then
                local previousTab = currentTab
                currentTab = tabName
                for name, content in pairs(tabContents) do
                    if content.Visible then
                        local slideOut = TweenService:Create(content, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Position = UDim2.new(0.5, -150, 1, 0)})
                        slideOut:Play()
                        wait(0.3)
                        content.Visible = false
                    end
                end
                local newContent = tabContents[tabName]
                newContent.Position = UDim2.new(0.5, -150, 1, 0)
                newContent.Visible = true
                local slideIn = TweenService:Create(newContent, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Position = UDim2.new(0.5, -150, 0, 130)})
                slideIn:Play()
                print("Switched to " .. tabName .. " tab.")
            end
        end)
    end

    -- Aimbot Tab Content
    local aimbotEnabled = settings.aimbotEnabled
    local deadCheck = settings.deadCheck
    local teamCheck = settings.teamCheck
    local aimbotSmoothnessEnabled = settings.aimbotSmoothnessEnabled
    local aimbotSmoothness = settings.aimbotSmoothness
    local aimbotFovEnabled = settings.aimbotFovEnabled
    local aimbotFovSize = settings.aimbotFovSize
    local aimbotBone = settings.aimbotBone
    local targetPlayer = nil

    local baseY = 10
    local categoryLabelAimbot = Instance.new("TextLabel")
    categoryLabelAimbot.Size = UDim2.new(0, 280, 0, 30)
    categoryLabelAimbot.Position = UDim2.new(0, 10, 0, baseY)
    categoryLabelAimbot.Text = "— Aimbot —"
    categoryLabelAimbot.TextColor3 = Color3.fromRGB(0, 200, 255)
    categoryLabelAimbot.BackgroundTransparency = 1
    categoryLabelAimbot.Font = Enum.Font.SourceSansBold
    categoryLabelAimbot.TextSize = 18
    categoryLabelAimbot.Parent = tabContents["Aimbot"]
    print("Aimbot category label created at Y: " .. baseY)

    local yOffset = baseY + 40
    local AimbotToggle = Instance.new("TextButton")
    AimbotToggle.Size = UDim2.new(0, 240, 0, 30)
    AimbotToggle.Position = UDim2.new(0, 10, 0, yOffset)
    AimbotToggle.Text = "☐ Aimbot: " .. (aimbotEnabled and "ON" or "OFF")
    AimbotToggle.BackgroundTransparency = 1
    AimbotToggle.TextColor3 = aimbotEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    AimbotToggle.Font = Enum.Font.SourceSans
    AimbotToggle.TextSize = 16
    AimbotToggle.Parent = tabContents["Aimbot"]
    print("Aimbot toggle created at Y: " .. yOffset)

    local AimbotBindSquare = Instance.new("TextButton")
    AimbotBindSquare.Size = UDim2.new(0, 30, 0, 30)
    AimbotBindSquare.Position = UDim2.new(0, 260, 0, yOffset)
    AimbotBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    AimbotBindSquare.Text = settings.keyBinds.Aimbot and settings.keyBinds.Aimbot.Name or "Bind"
    AimbotBindSquare.BackgroundTransparency = 0
    AimbotBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    AimbotBindSquare.Font = Enum.Font.SourceSans
    AimbotBindSquare.TextSize = 12
    AimbotBindSquare.Parent = tabContents["Aimbot"]

    local AimbotUnbindButton = Instance.new("TextButton")
    AimbotUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    AimbotUnbindButton.Position = UDim2.new(0, 300, 0, yOffset)
    AimbotUnbindButton.Text = "Unbind"
    AimbotUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    AimbotUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    AimbotUnbindButton.Font = Enum.Font.SourceSans
    AimbotUnbindButton.TextSize = 12
    AimbotUnbindButton.Parent = tabContents["Aimbot"]

    yOffset = yOffset + 40
    local DeadCheckToggle = Instance.new("TextButton")
    DeadCheckToggle.Size = UDim2.new(0, 240, 0, 30)
    DeadCheckToggle.Position = UDim2.new(0, 10, 0, yOffset)
    DeadCheckToggle.Text = "☐ Dead Check: " .. (deadCheck and "ON" or "OFF")
    DeadCheckToggle.BackgroundTransparency = 1
    DeadCheckToggle.TextColor3 = deadCheck and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    DeadCheckToggle.Font = Enum.Font.SourceSans
    DeadCheckToggle.TextSize = 16
    DeadCheckToggle.Parent = tabContents["Aimbot"]
    print("DeadCheck toggle created at Y: " .. yOffset)

    local DeadCheckBindSquare = Instance.new("TextButton")
    DeadCheckBindSquare.Size = UDim2.new(0, 30, 0, 30)
    DeadCheckBindSquare.Position = UDim2.new(0, 260, 0, yOffset)
    DeadCheckBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    DeadCheckBindSquare.Text = settings.keyBinds.DeadCheck and settings.keyBinds.DeadCheck.Name or "Bind"
    DeadCheckBindSquare.BackgroundTransparency = 0
    DeadCheckBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    DeadCheckBindSquare.Font = Enum.Font.SourceSans
    DeadCheckBindSquare.TextSize = 12
    DeadCheckBindSquare.Parent = tabContents["Aimbot"]

    local DeadCheckUnbindButton = Instance.new("TextButton")
    DeadCheckUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    DeadCheckUnbindButton.Position = UDim2.new(0, 300, 0, yOffset)
    DeadCheckUnbindButton.Text = "Unbind"
    DeadCheckUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    DeadCheckUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    DeadCheckUnbindButton.Font = Enum.Font.SourceSans
    DeadCheckUnbindButton.TextSize = 12
    DeadCheckUnbindButton.Parent = tabContents["Aimbot"]

    yOffset = yOffset + 40
    local TeamCheckToggle = Instance.new("TextButton")
    TeamCheckToggle.Size = UDim2.new(0, 240, 0, 30)
    TeamCheckToggle.Position = UDim2.new(0, 10, 0, yOffset)
    TeamCheckToggle.Text = "☐ Team Check: " .. (teamCheck and "ON" or "OFF")
    TeamCheckToggle.BackgroundTransparency = 1
    TeamCheckToggle.TextColor3 = teamCheck and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    TeamCheckToggle.Font = Enum.Font.SourceSans
    TeamCheckToggle.TextSize = 16
    TeamCheckToggle.Parent = tabContents["Aimbot"]
    print("TeamCheck toggle created at Y: " .. yOffset)

    local TeamCheckBindSquare = Instance.new("TextButton")
    TeamCheckBindSquare.Size = UDim2.new(0, 30, 0, 30)
    TeamCheckBindSquare.Position = UDim2.new(0, 260, 0, yOffset)
    TeamCheckBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    TeamCheckBindSquare.Text = settings.keyBinds.TeamCheck and settings.keyBinds.TeamCheck.Name or "Bind"
    TeamCheckBindSquare.BackgroundTransparency = 0
    TeamCheckBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    TeamCheckBindSquare.Font = Enum.Font.SourceSans
    TeamCheckBindSquare.TextSize = 12
    TeamCheckBindSquare.Parent = tabContents["Aimbot"]

    local TeamCheckUnbindButton = Instance.new("TextButton")
    TeamCheckUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    TeamCheckUnbindButton.Position = UDim2.new(0, 300, 0, yOffset)
    TeamCheckUnbindButton.Text = "Unbind"
    TeamCheckUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    TeamCheckUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    TeamCheckUnbindButton.Font = Enum.Font.SourceSans
    TeamCheckUnbindButton.TextSize = 12
    TeamCheckUnbindButton.Parent = tabContents["Aimbot"]

    yOffset = yOffset + 40
    local SmoothnessToggle = Instance.new("TextButton")
    SmoothnessToggle.Size = UDim2.new(0, 240, 0, 30)
    SmoothnessToggle.Position = UDim2.new(0, 10, 0, yOffset)
    SmoothnessToggle.Text = "☐ Smoothness: " .. (aimbotSmoothnessEnabled and "ON" or "OFF")
    SmoothnessToggle.BackgroundTransparency = 1
    SmoothnessToggle.TextColor3 = aimbotSmoothnessEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    SmoothnessToggle.Font = Enum.Font.SourceSans
    SmoothnessToggle.TextSize = 16
    SmoothnessToggle.Parent = tabContents["Aimbot"]
    print("Smoothness toggle created at Y: " .. yOffset)

    local SmoothnessBindSquare = Instance.new("TextButton")
    SmoothnessBindSquare.Size = UDim2.new(0, 30, 0, 30)
    SmoothnessBindSquare.Position = UDim2.new(0, 260, 0, yOffset)
    SmoothnessBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    SmoothnessBindSquare.Text = settings.keyBinds.Smoothness and settings.keyBinds.Smoothness.Name or "Bind"
    SmoothnessBindSquare.BackgroundTransparency = 0
    SmoothnessBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    SmoothnessBindSquare.Font = Enum.Font.SourceSans
    SmoothnessBindSquare.TextSize = 12
    SmoothnessBindSquare.Parent = tabContents["Aimbot"]

    local SmoothnessUnbindButton = Instance.new("TextButton")
    SmoothnessUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    SmoothnessUnbindButton.Position = UDim2.new(0, 300, 0, yOffset)
    SmoothnessUnbindButton.Text = "Unbind"
    SmoothnessUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    SmoothnessUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    SmoothnessUnbindButton.Font = Enum.Font.SourceSans
    SmoothnessUnbindButton.TextSize = 12
    SmoothnessUnbindButton.Parent = tabContents["Aimbot"]

    yOffset = yOffset + 40
    local SmoothnessLabel = Instance.new("TextLabel")
    SmoothnessLabel.Size = UDim2.new(0, 280, 0, 30)
    SmoothnessLabel.Position = UDim2.new(0, 10, 0, yOffset)
    SmoothnessLabel.Text = "Smoothness: " .. aimbotSmoothness
    SmoothnessLabel.BackgroundTransparency = 1
    SmoothnessLabel.TextColor3 = Color3.fromRGB(0, 200, 255)
    SmoothnessLabel.Font = Enum.Font.SourceSans
    SmoothnessLabel.TextSize = 16
    SmoothnessLabel.Parent = tabContents["Aimbot"]
    print("Smoothness label created at Y: " .. yOffset)

    yOffset = yOffset + 40
    local SmoothnessSlider = Instance.new("TextButton")
    SmoothnessSlider.Size = UDim2.new(0, 280, 0, 10)
    SmoothnessSlider.Position = UDim2.new(0, 10, 0, yOffset)
    SmoothnessSlider.Text = ""
    SmoothnessSlider.BackgroundColor3 = Color3.fromRGB(0, 70, 140)
    SmoothnessSlider.BackgroundTransparency = 0
    SmoothnessSlider.Parent = tabContents["Aimbot"]
    print("Smoothness slider created at Y: " .. yOffset)

    local SmoothnessKnob = Instance.new("Frame")
    SmoothnessKnob.Size = UDim2.new(0, 20, 1, 0)
    SmoothnessKnob.Position = UDim2.new((aimbotSmoothness - 0.1) / 0.9, 0, 0, 0)
    SmoothnessKnob.BackgroundColor3 = Color3.fromRGB(0, 200, 255)
    SmoothnessKnob.BackgroundTransparency = 0
    SmoothnessKnob.BorderSizePixel = 0
    SmoothnessKnob.Parent = SmoothnessSlider

    yOffset = yOffset + 40
    local FovCircleToggle = Instance.new("TextButton")
    FovCircleToggle.Size = UDim2.new(0, 240, 0, 30)
    FovCircleToggle.Position = UDim2.new(0, 10, 0, yOffset)
    FovCircleToggle.Text = "☐ FOV Circle: " .. (aimbotFovEnabled and "ON" or "OFF")
    FovCircleToggle.BackgroundTransparency = 1
    FovCircleToggle.TextColor3 = aimbotFovEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    FovCircleToggle.Font = Enum.Font.SourceSans
    FovCircleToggle.TextSize = 16
    FovCircleToggle.Parent = tabContents["Aimbot"]
    print("FovCircle toggle created at Y: " .. yOffset)

    local FovCircleBindSquare = Instance.new("TextButton")
    FovCircleBindSquare.Size = UDim2.new(0, 30, 0, 30)
    FovCircleBindSquare.Position = UDim2.new(0, 260, 0, yOffset)
    FovCircleBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    FovCircleBindSquare.Text = settings.keyBinds.FovCircle and settings.keyBinds.FovCircle.Name or "Bind"
    FovCircleBindSquare.BackgroundTransparency = 0
    FovCircleBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    FovCircleBindSquare.Font = Enum.Font.SourceSans
    FovCircleBindSquare.TextSize = 12
    FovCircleBindSquare.Parent = tabContents["Aimbot"]

    local FovCircleUnbindButton = Instance.new("TextButton")
    FovCircleUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    FovCircleUnbindButton.Position = UDim2.new(0, 300, 0, yOffset)
    FovCircleUnbindButton.Text = "Unbind"
    FovCircleUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    FovCircleUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    FovCircleUnbindButton.Font = Enum.Font.SourceSans
    FovCircleUnbindButton.TextSize = 12
    FovCircleUnbindButton.Parent = tabContents["Aimbot"]

    yOffset = yOffset + 40
    local FovCircleLabel = Instance.new("TextLabel")
    FovCircleLabel.Size = UDim2.new(0, 280, 0, 30)
    FovCircleLabel.Position = UDim2.new(0, 10, 0, yOffset)
    FovCircleLabel.Text = "FOV Size: " .. aimbotFovSize
    FovCircleLabel.BackgroundTransparency = 1
    FovCircleLabel.TextColor3 = Color3.fromRGB(0, 200, 255)
    FovCircleLabel.Font = Enum.Font.SourceSans
    FovCircleLabel.TextSize = 16
    FovCircleLabel.Parent = tabContents["Aimbot"]
    print("FovCircle label created at Y: " .. yOffset)

    yOffset = yOffset + 40
    local FovCircleSlider = Instance.new("TextButton")
    FovCircleSlider.Size = UDim2.new(0, 280, 0, 10)
    FovCircleSlider.Position = UDim2.new(0, 10, 0, yOffset)
    FovCircleSlider.Text = ""
    FovCircleSlider.BackgroundColor3 = Color3.fromRGB(0, 70, 140)
    FovCircleSlider.BackgroundTransparency = 0
    FovCircleSlider.Parent = tabContents["Aimbot"]
    print("FovCircle slider created at Y: " .. yOffset)

    local FovCircleKnob = Instance.new("Frame")
    FovCircleKnob.Size = UDim2.new(0, 20, 1, 0)
    FovCircleKnob.Position = UDim2.new((aimbotFovSize - 1) / 639, 0, 0, 0)
    FovCircleKnob.BackgroundColor3 = Color3.fromRGB(0, 200, 255)
    FovCircleKnob.BackgroundTransparency = 0
    FovCircleKnob.BorderSizePixel = 0
    FovCircleKnob.Parent = FovCircleSlider

    yOffset = yOffset + 40
    local AimbotBoneLabel = Instance.new("TextLabel")
    AimbotBoneLabel.Size = UDim2.new(0, 280, 0, 30)
    AimbotBoneLabel.Position = UDim2.new(0, 10, 0, yOffset)
    AimbotBoneLabel.Text = "Aim Bone: " .. aimbotBone
    AimbotBoneLabel.BackgroundTransparency = 1
    AimbotBoneLabel.TextColor3 = Color3.fromRGB(0, 200, 255)
    AimbotBoneLabel.Font = Enum.Font.SourceSans
    AimbotBoneLabel.TextSize = 16
    AimbotBoneLabel.Parent = tabContents["Aimbot"]
    print("AimbotBone label created at Y: " .. yOffset)

    yOffset = yOffset + 40
    local AimbotBoneDropdown = Instance.new("TextButton")
    AimbotBoneDropdown.Size = UDim2.new(0, 280, 0, 30)
    AimbotBoneDropdown.Position = UDim2.new(0, 10, 0, yOffset)
    AimbotBoneDropdown.Text = "▼ " .. aimbotBone
    AimbotBoneDropdown.BackgroundColor3 = Color3.fromRGB(0, 70, 140)
    AimbotBoneDropdown.BackgroundTransparency = 0
    AimbotBoneDropdown.TextColor3 = Color3.fromRGB(0, 200, 255)
    AimbotBoneDropdown.Font = Enum.Font.SourceSans
    AimbotBoneDropdown.TextSize = 16
    AimbotBoneDropdown.BorderSizePixel = 0
    AimbotBoneDropdown.Parent = tabContents["Aimbot"]
    print("AimbotBone dropdown created at Y: " .. yOffset)

    local boneDropdownOpen = false
    local boneDropdownOptions = {"Head", "Body", "Feet"}
    local boneDropdownFrame = Instance.new("Frame")
    boneDropdownFrame.Size = UDim2.new(0, 280, 0, #boneDropdownOptions * 30)
    boneDropdownFrame.Position = UDim2.new(0, 10, 0, yOffset + 30)
    boneDropdownFrame.BackgroundColor3 = Color3.fromRGB(0, 40, 80)
    boneDropdownFrame.BackgroundTransparency = 0
    boneDropdownFrame.Visible = false
    boneDropdownFrame.Parent = tabContents["Aimbot"]
    print("Bone dropdown frame created at Y: " .. (yOffset + 30))

    for i, option in ipairs(boneDropdownOptions) do
        local optionButton = Instance.new("TextButton")
        optionButton.Size = UDim2.new(1, -10, 0, 30)
        optionButton.Position = UDim2.new(0, 5, 0, (i - 1) * 30)
        optionButton.Text = option
        optionButton.BackgroundTransparency = 1
        optionButton.TextColor3 = Color3.fromRGB(0, 200, 255)
        optionButton.Font = Enum.Font.SourceSans
        optionButton.TextSize = 16
        optionButton.Parent = boneDropdownFrame

        optionButton.MouseButton1Click:Connect(function()
            aimbotBone = option
            AimbotBoneLabel.Text = "Aim Bone: " .. aimbotBone
            AimbotBoneDropdown.Text = "▼ " .. aimbotBone
            settings.aimbotBone = aimbotBone
            saveSettings()
            boneDropdownFrame.Visible = false
            boneDropdownOpen = false
        end)
    end

    AimbotBoneDropdown.MouseButton1Click:Connect(function()
        boneDropdownOpen = not boneDropdownOpen
        boneDropdownFrame.Visible = boneDropdownOpen
    end)

    -- Aimbot FOV Circle Drawing
    local fovCircle = Drawing.new("Circle")
    fovCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    fovCircle.Radius = aimbotFovSize
    fovCircle.Color = Color3.fromRGB(255, 0, 0)
    fovCircle.Thickness = 2
    fovCircle.Filled = false
    fovCircle.Visible = aimbotFovEnabled

    -- Aimbot Logic with Bone Selection
    local function isPlayerInFov(player)
        if not aimbotFovEnabled then
            return true
        end
        if not player.Character or not player.Character:FindFirstChild("Head") then
            return false
        end
        local headPos = player.Character.Head.Position
        local screenPos, onScreen = Camera:WorldToViewportPoint(headPos)
        if not onScreen then
            return false
        end
        local distanceFromCenter = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)).Magnitude
        return distanceFromCenter <= aimbotFovSize
    end

    local function getNearestPlayer()
        local nearestDistance = math.huge
        local nearestPlayer = nil
        local character = getCharacter()
        local rootPart = character:WaitForChild("HumanoidRootPart")
        local localTeam = LocalPlayer.Team

        for _, otherPlayer in pairs(PlayersService:GetPlayers()) do
            if otherPlayer ~= LocalPlayer and otherPlayer.Character and otherPlayer.Character:FindFirstChild("Head") then
                local humanoid = otherPlayer.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    local isDead = deadCheck and humanoid.Health <= 0
                    local isSameTeam = teamCheck and localTeam and otherPlayer.Team and (otherPlayer.Team == localTeam)
                    if not isDead and not isSameTeam and isPlayerInFov(otherPlayer) then
                        local distance = (rootPart.Position - otherPlayer.Character.Head.Position).Magnitude
                        if distance < nearestDistance then
                            nearestDistance = distance
                            nearestPlayer = otherPlayer
                        end
                    end
                end
            end
        end
        return nearestPlayer
    end

    local function getAimPart(player)
        if not player.Character then return nil end
        if aimbotBone == "Head" then
            return player.Character:FindFirstChild("Head")
        elseif aimbotBone == "Body" then
            return player.Character:FindFirstChild("UpperTorso") or player.Character:FindFirstChild("Torso") or player.Character:FindFirstChild("HumanoidRootPart")
        elseif aimbotBone == "Feet" then
            local leftFoot = player.Character:FindFirstChild("LeftFoot")
            local rightFoot = player.Character:FindFirstChild("RightFoot")
            return leftFoot or rightFoot or player.Character:FindFirstChild("HumanoidRootPart")
        end
        return player.Character:FindFirstChild("Head")
    end

    AimbotToggle.MouseButton1Click:Connect(function()
        aimbotEnabled = not aimbotEnabled
        AimbotToggle.Text = "☐ Aimbot: " .. (aimbotEnabled and "ON" or "OFF")
        AimbotToggle.TextColor3 = aimbotEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.aimbotEnabled = aimbotEnabled
        saveSettings()
    end)

    DeadCheckToggle.MouseButton1Click:Connect(function()
        deadCheck = not deadCheck
        DeadCheckToggle.Text = "☐ Dead Check: " .. (deadCheck and "ON" or "OFF")
        DeadCheckToggle.TextColor3 = deadCheck and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.deadCheck = deadCheck
        saveSettings()
    end)

    TeamCheckToggle.MouseButton1Click:Connect(function()
        teamCheck = not teamCheck
        TeamCheckToggle.Text = "☐ Team Check: " .. (teamCheck and "ON" or "OFF")
        TeamCheckToggle.TextColor3 = teamCheck and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.teamCheck = teamCheck
        saveSettings()
    end)

    SmoothnessToggle.MouseButton1Click:Connect(function()
        aimbotSmoothnessEnabled = not aimbotSmoothnessEnabled
        SmoothnessToggle.Text = "☐ Smoothness: " .. (aimbotSmoothnessEnabled and "ON" or "OFF")
        SmoothnessToggle.TextColor3 = aimbotSmoothnessEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.aimbotSmoothnessEnabled = aimbotSmoothnessEnabled
        saveSettings()
    end)

    FovCircleToggle.MouseButton1Click:Connect(function()
        aimbotFovEnabled = not aimbotFovEnabled
        FovCircleToggle.Text = "☐ FOV Circle: " .. (aimbotFovEnabled and "ON" or "OFF")
        FovCircleToggle.TextColor3 = aimbotFovEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        fovCircle.Visible = aimbotFovEnabled
        settings.aimbotFovEnabled = aimbotFovEnabled
        saveSettings()
    end)

    local draggingSmoothnessSlider = false
    local draggingFovCircleSlider = false

    SmoothnessSlider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingSmoothnessSlider = true
        end
    end)

    SmoothnessSlider.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingSmoothnessSlider = false
        end
    end)

    FovCircleSlider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingFovCircleSlider = true
        end
    end)

    FovCircleSlider.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingFovCircleSlider = false
        end
    end)

    RunService.RenderStepped:Connect(function()
        local mouseX = UserInputService:GetMouseLocation().X

        if draggingSmoothnessSlider then
            local smoothnessSliderPos = SmoothnessSlider.AbsolutePosition.X
            local smoothnessSliderWidth = SmoothnessSlider.AbsoluteSize.X
            local smoothnessNewPos = math.clamp((mouseX - smoothnessSliderPos) / smoothnessSliderWidth, 0, 1)
            SmoothnessKnob.Position = UDim2.new(smoothnessNewPos, 0, 0, 0)
            aimbotSmoothness = 0.1 + (smoothnessNewPos * 0.9)
            aimbotSmoothness = math.round(aimbotSmoothness * 10) / 10
            SmoothnessLabel.Text = "Smoothness: " .. aimbotSmoothness
            settings.aimbotSmoothness = aimbotSmoothness
            saveSettings()
        end

        if draggingFovCircleSlider then
            local fovCircleSliderPos = FovCircleSlider.AbsolutePosition.X
            local fovCircleSliderWidth = FovCircleSlider.AbsoluteSize.X
            local fovCircleNewPos = math.clamp((mouseX - fovCircleSliderPos) / fovCircleSliderWidth, 0, 1)
            FovCircleKnob.Position = UDim2.new(fovCircleNewPos, 0, 0, 0)
            aimbotFovSize = math.floor(1 + (fovCircleNewPos * 639))
            FovCircleLabel.Text = "FOV Size: " .. aimbotFovSize
            fovCircle.Radius = aimbotFovSize
            settings.aimbotFovSize = aimbotFovSize
            saveSettings()
        end

        fovCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

        if aimbotEnabled and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
            targetPlayer = getNearestPlayer()
            if targetPlayer and targetPlayer.Character then
                local aimPart = getAimPart(targetPlayer)
                if aimPart then
                    local humanoid = targetPlayer.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid and (not deadCheck or humanoid.Health > 0) and isPlayerInFov(targetPlayer) then
                        local targetPos = aimPart.Position
                        if targetPos.Magnitude < 10000 then
                            local targetCFrame = CFrame.new(Camera.CFrame.Position, targetPos)
                            if aimbotSmoothnessEnabled then
                                local alpha = math.clamp(1 - aimbotSmoothness, 0.01, 1) * RunService.RenderStepped:Wait() * 60
                                Camera.CFrame = Camera.CFrame:Lerp(targetCFrame, alpha)
                            else
                                Camera.CFrame = targetCFrame
                            end
                        end
                    end
                end
            end
        end
    end)

    -- Key Binding Logic
    local bindingFeature = nil
    local function startBinding(bindSquare)
        bindingFeature = bindSquare
        bindSquare.Text = "Press Key"
        bindSquare.TextColor3 = Color3.fromRGB(255, 255, 0)
    end

    local function unbind(featureBindSquare, feature)
        settings.keyBinds[feature] = nil
        featureBindSquare.Text = "Bind"
        featureBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
        saveSettings()
    end

    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if bindingFeature and not gameProcessed then
            if input.UserInputType == Enum.UserInputType.Keyboard then
                local key = input.KeyCode
                local feature = nil
                if bindingFeature == AimbotBindSquare then feature = "Aimbot"
                elseif bindingFeature == DeadCheckBindSquare then feature = "DeadCheck"
                elseif bindingFeature == TeamCheckBindSquare then feature = "TeamCheck"
                elseif bindingFeature == SmoothnessBindSquare then feature = "Smoothness"
                elseif bindingFeature == FovCircleBindSquare then feature = "FovCircle"
                end
                if feature then
                    settings.keyBinds[feature] = key
                    bindingFeature.Text = key.Name
                    bindingFeature.TextColor3 = Color3.fromRGB(0, 200, 255)
                    saveSettings()
                end
                bindingFeature = nil
            end
        elseif not gameProcessed then
            for feature, key in pairs(settings.keyBinds) do
                if key and input.KeyCode == key then
                    if feature == "Aimbot" then
                        aimbotEnabled = not aimbotEnabled
                        AimbotToggle.Text = "☐ Aimbot: " .. (aimbotEnabled and "ON" or "OFF")
                        AimbotToggle.TextColor3 = aimbotEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                        settings.aimbotEnabled = aimbotEnabled
                    elseif feature == "DeadCheck" then
                        deadCheck = not deadCheck
                        DeadCheckToggle.Text = "☐ Dead Check: " .. (deadCheck and "ON" or "OFF")
                        DeadCheckToggle.TextColor3 = deadCheck and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                        settings.deadCheck = deadCheck
                    elseif feature == "TeamCheck" then
                        teamCheck = not teamCheck
                        TeamCheckToggle.Text = "☐ Team Check: " .. (teamCheck and "ON" or "OFF")
                        TeamCheckToggle.TextColor3 = teamCheck and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                        settings.teamCheck = teamCheck
                    elseif feature == "Smoothness" then
                        aimbotSmoothnessEnabled = not aimbotSmoothnessEnabled
                        SmoothnessToggle.Text = "☐ Smoothness: " .. (aimbotSmoothnessEnabled and "ON" or "OFF")
                        SmoothnessToggle.TextColor3 = aimbotSmoothnessEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                        settings.aimbotSmoothnessEnabled = aimbotSmoothnessEnabled
                    elseif feature == "FovCircle" then
                        aimbotFovEnabled = not aimbotFovEnabled
                        FovCircleToggle.Text = "☐ FOV Circle: " .. (aimbotFovEnabled and "ON" or "OFF")
                        FovCircleToggle.TextColor3 = aimbotFovEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                        fovCircle.Visible = aimbotFovEnabled
                        settings.aimbotFovEnabled = aimbotFovEnabled
                    end
                    saveSettings()
                end
            end
        end
    end)

    AimbotBindSquare.MouseButton1Click:Connect(function() startBinding(AimbotBindSquare) end)
    AimbotUnbindButton.MouseButton1Click:Connect(function() unbind(AimbotBindSquare, "Aimbot") end)
    DeadCheckBindSquare.MouseButton1Click:Connect(function() startBinding(DeadCheckBindSquare) end)
    DeadCheckUnbindButton.MouseButton1Click:Connect(function() unbind(DeadCheckBindSquare, "DeadCheck") end)
    TeamCheckBindSquare.MouseButton1Click:Connect(function() startBinding(TeamCheckBindSquare) end)
    TeamCheckUnbindButton.MouseButton1Click:Connect(function() unbind(TeamCheckBindSquare, "TeamCheck") end)
    SmoothnessBindSquare.MouseButton1Click:Connect(function() startBinding(SmoothnessBindSquare) end)
    SmoothnessUnbindButton.MouseButton1Click:Connect(function() unbind(SmoothnessBindSquare, "Smoothness") end)
    FovCircleBindSquare.MouseButton1Click:Connect(function() startBinding(FovCircleBindSquare) end)
    FovCircleUnbindButton.MouseButton1Click:Connect(function() unbind(FovCircleBindSquare, "FovCircle") end)

    -- Visuals Tab Content
    local espToggles = settings.espToggles
    local fullbrightEnabled = settings.fullbrightEnabled
    local espPlayers = {}
    local lastPositions = {}

    local function DrawESP(plr)
        local drawings = {
            Box = Drawing.new("Quad"),
            Name = Drawing.new("Text"),
            Speed = Drawing.new("Text"),
            HealthText = Drawing.new("Text"),
            HealthBar = Drawing.new("Square"),
            HealthBarOutline = Drawing.new("Square"),
            Tracer = Drawing.new("Line"),
            Skeleton = {},
            Box3D = {}
        }
        
        drawings.Box.Color = Color3.fromRGB(0, 200, 255)
        drawings.Box.Thickness = 1
        drawings.Box.Transparency = 1
        drawings.Box.Visible = false

        drawings.Name.Size = 18
        drawings.Name.Color = Color3.fromRGB(0, 200, 255)
        drawings.Name.Outline = true
        drawings.Name.Visible = false

        drawings.Speed.Size = 16
        drawings.Speed.Color = Color3.fromRGB(0, 200, 255)
        drawings.Speed.Outline = true
        drawings.Speed.Visible = false

        drawings.HealthText.Size = 16
        drawings.HealthText.Color = Color3.fromRGB(0, 200, 255)
        drawings.HealthText.Outline = true
        drawings.HealthText.Visible = false

        drawings.HealthBar.Thickness = 0
        drawings.HealthBar.Size = Vector2.new(100, 15) -- Fatter and bigger
        drawings.HealthBar.Visible = false

        drawings.HealthBarOutline.Thickness = 1
        drawings.HealthBarOutline.Size = Vector2.new(100, 15) -- Fatter and bigger
        drawings.HealthBarOutline.Color = Color3.fromRGB(0, 0, 0)
        drawings.HealthBarOutline.Filled = false
        drawings.HealthBarOutline.Visible = false

        drawings.Tracer.Color = Color3.fromRGB(0, 200, 255)
        drawings.Tracer.Thickness = 1
        drawings.Tracer.Visible = false

        local bones = {
            {"Head", "UpperTorso"}, {"UpperTorso", "LowerTorso"},
            {"LowerTorso", "LeftUpperLeg"}, {"LeftUpperLeg", "LeftLowerLeg"}, {"LeftLowerLeg", "LeftFoot"},
            {"LowerTorso", "RightUpperLeg"}, {"RightUpperLeg", "RightLowerLeg"}, {"RightLowerLeg", "RightFoot"},
            {"UpperTorso", "LeftUpperArm"}, {"LeftUpperArm", "LeftLowerArm"}, {"LeftLowerArm", "LeftHand"},
            {"UpperTorso", "RightUpperArm"}, {"RightUpperArm", "RightLowerArm"}, {"RightUpperArm", "RightHand"}
        }
        for _, pair in ipairs(bones) do
            local line = Drawing.new("Line")
            line.Color = Color3.fromRGB(0, 200, 255)
            line.Thickness = 2
            line.Visible = false
            drawings.Skeleton[pair[1] .. pair[2]] = line
        end

        local box3DIndices = {
            {1, 2}, {2, 3}, {3, 4}, {4, 1},
            {5, 6}, {6, 7}, {7, 8}, {8, 5},
            {1, 5}, {2, 6}, {3, 7}, {4, 8}
        }
        for i, edge in ipairs(box3DIndices) do
            local line = Drawing.new("Line")
            line.Color = Color3.fromRGB(0, 200, 255)
            line.Thickness = 1
            line.Visible = false
            drawings.Box3D[i] = line
        end

        local function Update()
            local connection
            local character = getCharacter()
            local rootPart = character:WaitForChild("HumanoidRootPart")
            connection = RunService.RenderStepped:Connect(function()
                if plr.Character and plr.Character.PrimaryPart and plr.Character:FindFirstChildOfClass("Humanoid") and plr.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
                    local head = plr.Character:FindFirstChild("Head") or plr.Character.PrimaryPart
                    local headPos, headVis = Camera:WorldToViewportPoint(head.Position + Vector3.new(0, 2.5, 0))
                    if headVis then
                        local TopLeft = Camera:WorldToViewportPoint((plr.Character.PrimaryPart.CFrame * CFrame.new(-2, 3, 0)).p)
                        local TopRight = Camera:WorldToViewportPoint((plr.Character.PrimaryPart.CFrame * CFrame.new(2, 3, 0)).p)
                        local BottomLeft = Camera:WorldToViewportPoint((plr.Character.PrimaryPart.CFrame * CFrame.new(-2, -3, 0)).p)
                        local BottomRight = Camera:WorldToViewportPoint((plr.Character.PrimaryPart.CFrame * CFrame.new(2, -3, 0)).p)

                        if espToggles.Box then
                            drawings.Box.PointA = Vector2.new(TopRight.X, TopRight.Y)
                            drawings.Box.PointB = Vector2.new(TopLeft.X, TopLeft.Y)
                            drawings.Box.PointC = Vector2.new(BottomLeft.X, BottomLeft.Y)
                            drawings.Box.PointD = Vector2.new(BottomRight.X, BottomRight.Y)
                            drawings.Box.Visible = true
                        else
                            drawings.Box.Visible = false
                        end

                        if espToggles.Name and headVis then
                            local nameWidth = drawings.Name.TextBounds.X
                            drawings.Name.Position = Vector2.new(headPos.X - (nameWidth / 2), headPos.Y - 30)
                            drawings.Name.Text = plr.Name
                            drawings.Name.Visible = true
                        else
                            drawings.Name.Visible = false
                        end

                        if espToggles.Speed and headVis then
                            local currentPos = plr.Character.HumanoidRootPart.Position
                            if not lastPositions[plr] then lastPositions[plr] = currentPos end
                            local lastPos = lastPositions[plr]
                            local delta = (currentPos - lastPos).Magnitude
                            local speed = delta / RunService.RenderStepped:Wait()
                            drawings.Speed.Position = Vector2.new(headPos.X, headPos.Y + 10)
                            drawings.Speed.Text = string.format("Speed: %.1f", speed)
                            lastPositions[plr] = currentPos
                            drawings.Speed.Visible = true
                        else
                            drawings.Speed.Visible = false
                        end

                        if espToggles.HealthBar and headVis then
                            local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
                            if humanoid then
                                local healthPercent = humanoid.Health / humanoid.MaxHealth
                                local distance = (Camera.CFrame.Position - head.Position).Magnitude
                                local baseWidth = 100 -- Fatter and bigger
                                local baseHeight = 15 -- Fatter and bigger
                                local scaleFactor = math.clamp(10 / distance, 0.1, 1)
                                local barWidth = baseWidth * scaleFactor
                                local barHeight = baseHeight * scaleFactor
                                local barX = headPos.X - (barWidth / 2)
                                local barY = headPos.Y

                                drawings.HealthText.Text = math.floor(healthPercent * 100) .. "%"
                                local textWidth = drawings.HealthText.TextBounds.X
                                drawings.HealthText.Position = Vector2.new(barX + (barWidth / 2) - (textWidth / 2), barY - 20 * scaleFactor)
                                drawings.HealthText.Visible = true

                                drawings.HealthBar.Position = Vector2.new(barX, barY)
                                drawings.HealthBar.Size = Vector2.new(barWidth * healthPercent, barHeight)
                                drawings.HealthBar.Color = Color3.fromRGB(255 * (1 - healthPercent), 255 * healthPercent, 0)
                                drawings.HealthBar.Visible = true

                                drawings.HealthBarOutline.Position = Vector2.new(barX, barY)
                                drawings.HealthBarOutline.Size = Vector2.new(barWidth, barHeight)
                                drawings.HealthBarOutline.Visible = true
                            end
                        else
                            drawings.HealthText.Visible = false
                            drawings.HealthBar.Visible = false
                            drawings.HealthBarOutline.Visible = false
                        end

                        if espToggles.Tracer then
                            local chest = plr.Character:FindFirstChild("UpperTorso") or plr.Character:FindFirstChild("Torso")
                            if chest then
                                local chestPos, chestVis = Camera:WorldToViewportPoint(chest.Position)
                                if chestVis then
                                    drawings.Tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                                    drawings.Tracer.To = Vector2.new(chestPos.X, chestPos.Y)
                                    drawings.Tracer.Visible = true
                                else
                                    drawings.Tracer.Visible = false
                                end
                            else
                                drawings.Tracer.Visible = false
                            end
                        else
                            drawings.Tracer.Visible = false
                        end

                        if espToggles.Skeleton then
                            for _, pair in ipairs(bones) do
                                local p1 = plr.Character:FindFirstChild(pair[1])
                                local p2 = plr.Character:FindFirstChild(pair[2])
                                if p1 and p2 then
                                    local screenP1, vis1 = Camera:WorldToViewportPoint(p1.Position)
                                    local screenP2, vis2 = Camera:WorldToViewportPoint(p2.Position)
                                    if vis1 and vis2 then
                                        local boneLine = drawings.Skeleton[pair[1] .. pair[2]]
                                        boneLine.From = Vector2.new(screenP1.X, screenP1.Y)
                                        boneLine.To = Vector2.new(screenP2.X, screenP2.Y)
                                        boneLine.Visible = true
                                    else
                                        drawings.Skeleton[pair[1] .. pair[2]].Visible = false
                                    end
                                end
                            end
                        else
                            for _, line in pairs(drawings.Skeleton) do
                                line.Visible = false
                            end
                        end

                        if espToggles.Box3D then
                            local size = plr.Character:GetExtentsSize() * 1.1
                            local cf = plr.Character.PrimaryPart.CFrame
                            local corners = {
                                cf * CFrame.new(-size.X/2,  size.Y/2, -size.Z/2),
                                cf * CFrame.new( size.X/2,  size.Y/2, -size.Z/2),
                                cf * CFrame.new( size.X/2, -size.Y/2, -size.Z/2),
                                cf * CFrame.new(-size.X/2, -size.Y/2, -size.Z/2),
                                cf * CFrame.new(-size.X/2,  size.Y/2,  size.Z/2),
                                cf * CFrame.new( size.X/2,  size.Y/2,  size.Z/2),
                                cf * CFrame.new( size.X/2, -size.Y/2,  size.Z/2),
                                cf * CFrame.new(-size.X/2, -size.Y/2,  size.Z/2)
                            }
                            local screenCorners = {}
                            local allVisible = true
                            for i, corner in ipairs(corners) do
                                local screenPos, vis = Camera:WorldToViewportPoint(corner.p)
                                screenCorners[i] = Vector2.new(screenPos.X, screenPos.Y)
                                if not vis then allVisible = false end
                            end
                            if allVisible then
                                for i, edge in ipairs(box3DIndices) do
                                    local line = drawings.Box3D[i]
                                    line.From = screenCorners[edge[1]]
                                    line.To = screenCorners[edge[2]]
                                    line.Visible = true
                                end
                            else
                                for _, line in ipairs(drawings.Box3D) do
                                    line.Visible = false
                                end
                            end
                        else
                            for _, line in ipairs(drawings.Box3D) do
                                line.Visible = false
                            end
                        end
                    else
                        for _, drawing in pairs(drawings) do
                            if type(drawing) == "table" then
                                for _, line in pairs(drawing) do
                                    line.Visible = false
                                end
                            else
                                drawing.Visible = false
                            end
                        end
                    end
                else
                    for _, drawing in pairs(drawings) do
                        if type(drawing) == "table" then
                            for _, line in pairs(drawing) do
                                line.Visible = false
                            end
                        else
                            drawing.Visible = false
                        end
                    end
                    if not PlayersService:FindFirstChild(plr.Name) then
                        connection:Disconnect()
                    end
                end
            end)
        end
        coroutine.wrap(Update)()
        espPlayers[plr] = drawings
    end

    for _, player in pairs(PlayersService:GetPlayers()) do
        if player ~= LocalPlayer then
            local success, err = pcall(function()
                DrawESP(player)
            end)
            if not success then
                warn("Failed to apply ESP to player " .. player.Name .. ": " .. err)
            end
        end
    end

    PlayersService.PlayerAdded:Connect(function(player)
        wait(1)
        if player ~= LocalPlayer then
            local success, err = pcall(function()
                DrawESP(player)
            end)
            if not success then
                warn("Failed to apply ESP to player " .. player.Name .. ": " .. err)
            end
        end
    end)

    local baseYVisuals = 10
    local categoryLabelVisuals = Instance.new("TextLabel")
    categoryLabelVisuals.Size = UDim2.new(0, 280, 0, 30)
    categoryLabelVisuals.Position = UDim2.new(0, 10, 0, baseYVisuals)
    categoryLabelVisuals.Text = "— Visuals —"
    categoryLabelVisuals.TextColor3 = Color3.fromRGB(0, 200, 255)
    categoryLabelVisuals.BackgroundTransparency = 1
    categoryLabelVisuals.Font = Enum.Font.SourceSansBold
    categoryLabelVisuals.TextSize = 18
    categoryLabelVisuals.Parent = tabContents["Visuals"]
    print("Visuals category label created at Y: " .. baseYVisuals)

    local yOffsetVisuals = baseYVisuals + 40
    for feature, enabled in pairs(espToggles) do
        local Toggle = Instance.new("TextButton")
        Toggle.Size = UDim2.new(0, 240, 0, 30)
        Toggle.Position = UDim2.new(0, 10, 0, yOffsetVisuals)
        Toggle.Text = "☐ " .. feature .. ": " .. (enabled and "ON" or "OFF")
        Toggle.BackgroundTransparency = 1
        Toggle.TextColor3 = enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        Toggle.Font = Enum.Font.SourceSans
        Toggle.TextSize = 16
        Toggle.Parent = tabContents["Visuals"]
        print(feature .. " toggle created at Y: " .. yOffsetVisuals)

        Toggle.MouseButton1Click:Connect(function()
            espToggles[feature] = not espToggles[feature]
            Toggle.Text = "☐ " .. feature .. ": " .. (espToggles[feature] and "ON" or "OFF")
            Toggle.TextColor3 = espToggles[feature] and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
            settings.espToggles[feature] = espToggles[feature]
            saveSettings()
        end)
        yOffsetVisuals = yOffsetVisuals + 40
    end

    yOffsetVisuals = yOffsetVisuals + 10
    local FullbrightToggle = Instance.new("TextButton")
    FullbrightToggle.Size = UDim2.new(0, 240, 0, 30)
    FullbrightToggle.Position = UDim2.new(0, 10, 0, yOffsetVisuals)
    FullbrightToggle.Text = "☐ Fullbright: " .. (fullbrightEnabled and "ON" or "OFF")
    FullbrightToggle.BackgroundTransparency = 1
    FullbrightToggle.TextColor3 = fullbrightEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    FullbrightToggle.Font = Enum.Font.SourceSans
    FullbrightToggle.TextSize = 16
    FullbrightToggle.Parent = tabContents["Visuals"]
    print("Fullbright toggle created at Y: " .. yOffsetVisuals)

    FullbrightToggle.MouseButton1Click:Connect(function()
        fullbrightEnabled = not fullbrightEnabled
        FullbrightToggle.Text = "☐ Fullbright: " .. (fullbrightEnabled and "ON" or "OFF")
        FullbrightToggle.TextColor3 = fullbrightEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        if fullbrightEnabled then
            Lighting.Brightness = 2
            Lighting.Ambient = Color3.fromRGB(255, 255, 255)
            Lighting.FogEnd = 100000
        else
            Lighting.Brightness = 1
            Lighting.Ambient = Color3.fromRGB(0, 0, 0)
            Lighting.FogEnd = 100000 -- Reset to default or game-specific value
        end
        settings.fullbrightEnabled = fullbrightEnabled
        saveSettings()
    end)

    -- Exploits Tab Content
    local flyEnabled = settings.flyEnabled
    local flySpeed = settings.flySpeed
    local noClipEnabled = settings.noClipEnabled
    local infiniteJumpEnabled = settings.infiniteJumpEnabled
    local speedEnabled = settings.speedEnabled
    local speedMultiplier = settings.speedMultiplier
    local saveLastPositionEnabled = settings.saveLastPositionEnabled

    local baseYExploits = 10
    local categoryLabelExploits = Instance.new("TextLabel")
    categoryLabelExploits.Size = UDim2.new(0, 280, 0, 30)
    categoryLabelExploits.Position = UDim2.new(0, 10, 0, baseYExploits)
    categoryLabelExploits.Text = "— Exploits —"
    categoryLabelExploits.TextColor3 = Color3.fromRGB(0, 200, 255)
    categoryLabelExploits.BackgroundTransparency = 1
    categoryLabelExploits.Font = Enum.Font.SourceSansBold
    categoryLabelExploits.TextSize = 18
    categoryLabelExploits.Parent = tabContents["Exploits"]
    print("Exploits category label created at Y: " .. baseYExploits)

    local yOffsetExploits = baseYExploits + 40
    local FlyToggle = Instance.new("TextButton")
    FlyToggle.Size = UDim2.new(0, 240, 0, 30)
    FlyToggle.Position = UDim2.new(0, 10, 0, yOffsetExploits)
    FlyToggle.Text = "☐ Fly: " .. (flyEnabled and "ON" or "OFF")
    FlyToggle.BackgroundTransparency = 1
    FlyToggle.TextColor3 = flyEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    FlyToggle.Font = Enum.Font.SourceSans
    FlyToggle.TextSize = 16
    FlyToggle.Parent = tabContents["Exploits"]
    print("Fly toggle created at Y: " .. yOffsetExploits)

    local FlyBindSquare = Instance.new("TextButton")
    FlyBindSquare.Size = UDim2.new(0, 30, 0, 30)
    FlyBindSquare.Position = UDim2.new(0, 260, 0, yOffsetExploits)
    FlyBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    FlyBindSquare.Text = settings.keyBinds.Fly and settings.keyBinds.Fly.Name or "Bind"
    FlyBindSquare.BackgroundTransparency = 0
    FlyBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    FlyBindSquare.Font = Enum.Font.SourceSans
    FlyBindSquare.TextSize = 12
    FlyBindSquare.Parent = tabContents["Exploits"]

    local FlyUnbindButton = Instance.new("TextButton")
    FlyUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    FlyUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetExploits)
    FlyUnbindButton.Text = "Unbind"
    FlyUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    FlyUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    FlyUnbindButton.Font = Enum.Font.SourceSans
    FlyUnbindButton.TextSize = 12
    FlyUnbindButton.Parent = tabContents["Exploits"]

    yOffsetExploits = yOffsetExploits + 40
    local FlySpeedLabel = Instance.new("TextLabel")
    FlySpeedLabel.Size = UDim2.new(0, 280, 0, 30)
    FlySpeedLabel.Position = UDim2.new(0, 10, 0, yOffsetExploits)
    FlySpeedLabel.Text = "Fly Speed: " .. flySpeed
    FlySpeedLabel.BackgroundTransparency = 1
    FlySpeedLabel.TextColor3 = Color3.fromRGB(0, 200, 255)
    FlySpeedLabel.Font = Enum.Font.SourceSans
    FlySpeedLabel.TextSize = 16
    FlySpeedLabel.Parent = tabContents["Exploits"]
    print("FlySpeed label created at Y: " .. yOffsetExploits)

    yOffsetExploits = yOffsetExploits + 40
    local FlySpeedSlider = Instance.new("TextButton")
    FlySpeedSlider.Size = UDim2.new(0, 280, 0, 10)
    FlySpeedSlider.Position = UDim2.new(0, 10, 0, yOffsetExploits)
    FlySpeedSlider.Text = ""
    FlySpeedSlider.BackgroundColor3 = Color3.fromRGB(0, 70, 140)
    FlySpeedSlider.BackgroundTransparency = 0
    FlySpeedSlider.Parent = tabContents["Exploits"]
    print("FlySpeed slider created at Y: " .. yOffsetExploits)

    local FlySpeedKnob = Instance.new("Frame")
    FlySpeedKnob.Size = UDim2.new(0, 20, 1, 0)
    FlySpeedKnob.Position = UDim2.new((flySpeed - 1) / 299, 0, 0, 0)
    FlySpeedKnob.BackgroundColor3 = Color3.fromRGB(0, 200, 255)
    FlySpeedKnob.BackgroundTransparency = 0
    FlySpeedKnob.BorderSizePixel = 0
    FlySpeedKnob.Parent = FlySpeedSlider

    yOffsetExploits = yOffsetExploits + 40
    local NoClipToggle = Instance.new("TextButton")
    NoClipToggle.Size = UDim2.new(0, 240, 0, 30)
    NoClipToggle.Position = UDim2.new(0, 10, 0, yOffsetExploits)
        NoClipToggle.Text = "☐ NoClip: " .. (noClipEnabled and "ON" or "OFF")
    NoClipToggle.BackgroundTransparency = 1
    NoClipToggle.TextColor3 = noClipEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    NoClipToggle.Font = Enum.Font.SourceSans
    NoClipToggle.TextSize = 16
    NoClipToggle.Parent = tabContents["Exploits"]
    print("NoClip toggle created at Y: " .. yOffsetExploits)

    local NoClipBindSquare = Instance.new("TextButton")
    NoClipBindSquare.Size = UDim2.new(0, 30, 0, 30)
    NoClipBindSquare.Position = UDim2.new(0, 260, 0, yOffsetExploits)
    NoClipBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    NoClipBindSquare.Text = settings.keyBinds.NoClip and settings.keyBinds.NoClip.Name or "Bind"
    NoClipBindSquare.BackgroundTransparency = 0
    NoClipBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    NoClipBindSquare.Font = Enum.Font.SourceSans
    NoClipBindSquare.TextSize = 12
    NoClipBindSquare.Parent = tabContents["Exploits"]

    local NoClipUnbindButton = Instance.new("TextButton")
    NoClipUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    NoClipUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetExploits)
    NoClipUnbindButton.Text = "Unbind"
    NoClipUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    NoClipUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    NoClipUnbindButton.Font = Enum.Font.SourceSans
    NoClipUnbindButton.TextSize = 12
    NoClipUnbindButton.Parent = tabContents["Exploits"]

    yOffsetExploits = yOffsetExploits + 40
    local InfiniteJumpToggle = Instance.new("TextButton")
    InfiniteJumpToggle.Size = UDim2.new(0, 240, 0, 30)
    InfiniteJumpToggle.Position = UDim2.new(0, 10, 0, yOffsetExploits)
    InfiniteJumpToggle.Text = "☐ Infinite Jump: " .. (infiniteJumpEnabled and "ON" or "OFF")
    InfiniteJumpToggle.BackgroundTransparency = 1
    InfiniteJumpToggle.TextColor3 = infiniteJumpEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    InfiniteJumpToggle.Font = Enum.Font.SourceSans
    InfiniteJumpToggle.TextSize = 16
    InfiniteJumpToggle.Parent = tabContents["Exploits"]
    print("InfiniteJump toggle created at Y: " .. yOffsetExploits)

    local InfiniteJumpBindSquare = Instance.new("TextButton")
    InfiniteJumpBindSquare.Size = UDim2.new(0, 30, 0, 30)
    InfiniteJumpBindSquare.Position = UDim2.new(0, 260, 0, yOffsetExploits)
    InfiniteJumpBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    InfiniteJumpBindSquare.Text = settings.keyBinds.InfiniteJump and settings.keyBinds.InfiniteJump.Name or "Bind"
    InfiniteJumpBindSquare.BackgroundTransparency = 0
    InfiniteJumpBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    InfiniteJumpBindSquare.Font = Enum.Font.SourceSans
    InfiniteJumpBindSquare.TextSize = 12
    InfiniteJumpBindSquare.Parent = tabContents["Exploits"]

    local InfiniteJumpUnbindButton = Instance.new("TextButton")
    InfiniteJumpUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    InfiniteJumpUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetExploits)
    InfiniteJumpUnbindButton.Text = "Unbind"
    InfiniteJumpUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    InfiniteJumpUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    InfiniteJumpUnbindButton.Font = Enum.Font.SourceSans
    InfiniteJumpUnbindButton.TextSize = 12
    InfiniteJumpUnbindButton.Parent = tabContents["Exploits"]

    yOffsetExploits = yOffsetExploits + 40
    local SpeedToggle = Instance.new("TextButton")
    SpeedToggle.Size = UDim2.new(0, 240, 0, 30)
    SpeedToggle.Position = UDim2.new(0, 10, 0, yOffsetExploits)
    SpeedToggle.Text = "☐ Speed: " .. (speedEnabled and "ON" or "OFF")
    SpeedToggle.BackgroundTransparency = 1
    SpeedToggle.TextColor3 = speedEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    SpeedToggle.Font = Enum.Font.SourceSans
    SpeedToggle.TextSize = 16
    SpeedToggle.Parent = tabContents["Exploits"]
    print("Speed toggle created at Y: " .. yOffsetExploits)

    local SpeedBindSquare = Instance.new("TextButton")
    SpeedBindSquare.Size = UDim2.new(0, 30, 0, 30)
    SpeedBindSquare.Position = UDim2.new(0, 260, 0, yOffsetExploits)
    SpeedBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    SpeedBindSquare.Text = settings.keyBinds.Speed and settings.keyBinds.Speed.Name or "Bind"
    SpeedBindSquare.BackgroundTransparency = 0
    SpeedBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    SpeedBindSquare.Font = Enum.Font.SourceSans
    SpeedBindSquare.TextSize = 12
    SpeedBindSquare.Parent = tabContents["Exploits"]

    local SpeedUnbindButton = Instance.new("TextButton")
    SpeedUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    SpeedUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetExploits)
    SpeedUnbindButton.Text = "Unbind"
    SpeedUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    SpeedUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    SpeedUnbindButton.Font = Enum.Font.SourceSans
    SpeedUnbindButton.TextSize = 12
    SpeedUnbindButton.Parent = tabContents["Exploits"]

    yOffsetExploits = yOffsetExploits + 40
    local SpeedLabel = Instance.new("TextLabel")
    SpeedLabel.Size = UDim2.new(0, 280, 0, 30)
    SpeedLabel.Position = UDim2.new(0, 10, 0, yOffsetExploits)
    SpeedLabel.Text = "Speed Multiplier: " .. speedMultiplier
    SpeedLabel.BackgroundTransparency = 1
    SpeedLabel.TextColor3 = Color3.fromRGB(0, 200, 255)
    SpeedLabel.Font = Enum.Font.SourceSans
    SpeedLabel.TextSize = 16
    SpeedLabel.Parent = tabContents["Exploits"]
    print("Speed label created at Y: " .. yOffsetExploits)

    yOffsetExploits = yOffsetExploits + 40
    local SpeedSlider = Instance.new("TextButton")
    SpeedSlider.Size = UDim2.new(0, 280, 0, 10)
    SpeedSlider.Position = UDim2.new(0, 10, 0, yOffsetExploits)
    SpeedSlider.Text = ""
    SpeedSlider.BackgroundColor3 = Color3.fromRGB(0, 70, 140)
    SpeedSlider.BackgroundTransparency = 0
    SpeedSlider.Parent = tabContents["Exploits"]
    print("Speed slider created at Y: " .. yOffsetExploits)

    local SpeedKnob = Instance.new("Frame")
    SpeedKnob.Size = UDim2.new(0, 20, 1, 0)
    SpeedKnob.Position = UDim2.new((speedMultiplier - 1) / 9, 0, 0, 0)
    SpeedKnob.BackgroundColor3 = Color3.fromRGB(0, 200, 255)
    SpeedKnob.BackgroundTransparency = 0
    SpeedKnob.BorderSizePixel = 0
    SpeedKnob.Parent = SpeedSlider

    yOffsetExploits = yOffsetExploits + 40
    local SaveLastPositionToggle = Instance.new("TextButton")
    SaveLastPositionToggle.Size = UDim2.new(0, 240, 0, 30)
    SaveLastPositionToggle.Position = UDim2.new(0, 10, 0, yOffsetExploits)
    SaveLastPositionToggle.Text = "☐ Save Pos: " .. (saveLastPositionEnabled and "ON" or "OFF")
    SaveLastPositionToggle.BackgroundTransparency = 1
    SaveLastPositionToggle.TextColor3 = saveLastPositionEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    SaveLastPositionToggle.Font = Enum.Font.SourceSans
    SaveLastPositionToggle.TextSize = 16
    SaveLastPositionToggle.Parent = tabContents["Exploits"]
    print("SaveLastPosition toggle created at Y: " .. yOffsetExploits)

    local SaveLastPositionBindSquare = Instance.new("TextButton")
    SaveLastPositionBindSquare.Size = UDim2.new(0, 30, 0, 30)
    SaveLastPositionBindSquare.Position = UDim2.new(0, 260, 0, yOffsetExploits)
    SaveLastPositionBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    SaveLastPositionBindSquare.Text = settings.keyBinds.SaveLastPosition and settings.keyBinds.SaveLastPosition.Name or "Bind"
    SaveLastPositionBindSquare.BackgroundTransparency = 0
    SaveLastPositionBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    SaveLastPositionBindSquare.Font = Enum.Font.SourceSans
    SaveLastPositionBindSquare.TextSize = 12
    SaveLastPositionBindSquare.Parent = tabContents["Exploits"]

    local SaveLastPositionUnbindButton = Instance.new("TextButton")
    SaveLastPositionUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    SaveLastPositionUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetExploits)
    SaveLastPositionUnbindButton.Text = "Unbind"
    SaveLastPositionUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    SaveLastPositionUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    SaveLastPositionUnbindButton.Font = Enum.Font.SourceSans
    SaveLastPositionUnbindButton.TextSize = 12
    SaveLastPositionUnbindButton.Parent = tabContents["Exploits"]

    -- Fly Logic with Admin-Style Movement
    local flyConnection = nil
    local function setupFly(character)
        if flyConnection then flyConnection:Disconnect() end
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.Parent = humanoidRootPart

        flyConnection = RunService.RenderStepped:Connect(function()
            if not flyEnabled or not character or not character:FindFirstChild("HumanoidRootPart") then
                bodyVelocity:Destroy()
                if flyConnection then flyConnection:Disconnect() end
                return
            end

            local moveDirection = Vector3.new(0, 0, 0)
            local cameraCF = Camera.CFrame
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                local forward = (UserInputService:IsKeyDown(Enum.KeyCode.W) and 1 or 0) - (UserInputService:IsKeyDown(Enum.KeyCode.S) and 1 or 0)
                local right = (UserInputService:IsKeyDown(Enum.KeyCode.D) and 1 or 0) - (UserInputService:IsKeyDown(Enum.KeyCode.A) and 1 or 0)
                local up = (UserInputService:IsKeyDown(Enum.KeyCode.Space) and 1 or 0) - (UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) and 1 or 0)

                local lookVector = cameraCF.LookVector
                local rightVector = cameraCF.RightVector
                moveDirection = (lookVector * forward + rightVector * right + Vector3.new(0, up, 0)) * flySpeed
                humanoidRootPart.Velocity = Vector3.new(moveDirection.X, moveDirection.Y, moveDirection.Z)
                humanoidRootPart.CFrame = CFrame.new(humanoidRootPart.Position, humanoidRootPart.Position + lookVector)
            end
        end)
    end

    local function toggleFly()
        flyEnabled = not flyEnabled
        FlyToggle.Text = "☐ Fly: " .. (flyEnabled and "ON" or "OFF")
        FlyToggle.TextColor3 = flyEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.flyEnabled = flyEnabled
        saveSettings()

        if flyEnabled then
            local character = getCharacter()
            if character then
                setupFly(character)
            end
        else
            if flyConnection then flyConnection:Disconnect() end
            local character = getCharacter()
            if character and character:FindFirstChild("HumanoidRootPart") then
                local humanoidRootPart = character.HumanoidRootPart
                local bodyVelocity = humanoidRootPart:FindFirstChildOfClass("BodyVelocity")
                if bodyVelocity then bodyVelocity:Destroy() end
            end
        end
    end

    FlyToggle.MouseButton1Click:Connect(toggleFly)

    LocalPlayer.CharacterAdded:Connect(function(character)
        if flyEnabled then
            setupFly(character)
        end
    end)

    -- NoClip Logic
    local noClipConnection = nil
    local function toggleNoClip()
        noClipEnabled = not noClipEnabled
        NoClipToggle.Text = "☐ NoClip: " .. (noClipEnabled and "ON" or "OFF")
        NoClipToggle.TextColor3 = noClipEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.noClipEnabled = noClipEnabled
        saveSettings()

        if noClipEnabled then
            if noClipConnection then noClipConnection:Disconnect() end
            noClipConnection = RunService.Stepped:Connect(function()
                if not noClipEnabled then
                    noClipConnection:Disconnect()
                    return
                end
                local character = getCharacter()
                if character then
                    for _, part in pairs(character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else
            if noClipConnection then noClipConnection:Disconnect() end
            local character = getCharacter()
            if character then
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
        end
    end

    NoClipToggle.MouseButton1Click:Connect(toggleNoClip)

    -- Infinite Jump Logic
    local infiniteJumpConnection = nil
    local function toggleInfiniteJump()
        infiniteJumpEnabled = not infiniteJumpEnabled
        InfiniteJumpToggle.Text = "☐ Infinite Jump: " .. (infiniteJumpEnabled and "ON" or "OFF")
        InfiniteJumpToggle.TextColor3 = infiniteJumpEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.infiniteJumpEnabled = infiniteJumpEnabled
        saveSettings()

        if infiniteJumpEnabled then
            if infiniteJumpConnection then infiniteJumpConnection:Disconnect() end
            infiniteJumpConnection = UserInputService.JumpRequest:Connect(function()
                if not infiniteJumpEnabled then
                    if infiniteJumpConnection then infiniteJumpConnection:Disconnect() end
                    return
                end
                local character = getCharacter()
                if character then
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid and humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                end
            end)
        else
            if infiniteJumpConnection then infiniteJumpConnection:Disconnect() end
        end
    end

    InfiniteJumpToggle.MouseButton1Click:Connect(toggleInfiniteJump)

    -- Speed Hack Logic
    local function toggleSpeed()
        speedEnabled = not speedEnabled
        SpeedToggle.Text = "☐ Speed: " .. (speedEnabled and "ON" or "OFF")
        SpeedToggle.TextColor3 = speedEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.speedEnabled = speedEnabled
        saveSettings()

        local character = getCharacter()
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = speedEnabled and (16 * speedMultiplier) or 16
            end
        end
    end

    SpeedToggle.MouseButton1Click:Connect(toggleSpeed)

    LocalPlayer.CharacterAdded:Connect(function(character)
        if speedEnabled then
            local humanoid = character:WaitForChild("Humanoid")
            humanoid.WalkSpeed = 16 * speedMultiplier
        end
    end)

    SaveLastPositionToggle.MouseButton1Click:Connect(function()
        saveLastPositionEnabled = not saveLastPositionEnabled
        SaveLastPositionToggle.Text = "☐ Save Pos: " .. (saveLastPositionEnabled and "ON" or "OFF")
        SaveLastPositionToggle.TextColor3 = saveLastPositionEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.saveLastPositionEnabled = saveLastPositionEnabled
        if saveLastPositionEnabled then
            local character = getCharacter()
            if character and character:FindFirstChild("HumanoidRootPart") then
                local rootPart = character.HumanoidRootPart
                lastPosition = rootPart.CFrame
                print("Last position saved: " .. tostring(lastPosition))
            else
                warn("No character or HumanoidRootPart found to save position.")
            end
        end
        saveSettings()
    end)

    local draggingFlySpeedSlider = false
    local draggingSpeedSlider = false

    FlySpeedSlider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingFlySpeedSlider = true
        end
    end)

    FlySpeedSlider.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingFlySpeedSlider = false
        end
    end)

    SpeedSlider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingSpeedSlider = true
        end
    end)

    SpeedSlider.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingSpeedSlider = false
        end
    end)

    RunService.RenderStepped:Connect(function()
        local mouseX = UserInputService:GetMouseLocation().X

        if draggingFlySpeedSlider then
            local flySpeedSliderPos = FlySpeedSlider.AbsolutePosition.X
            local flySpeedSliderWidth = FlySpeedSlider.AbsoluteSize.X
            local flySpeedNewPos = math.clamp((mouseX - flySpeedSliderPos) / flySpeedSliderWidth, 0, 1)
            FlySpeedKnob.Position = UDim2.new(flySpeedNewPos, 0, 0, 0)
            flySpeed = math.floor(1 + (flySpeedNewPos * 299))
            FlySpeedLabel.Text = "Fly Speed: " .. flySpeed
            settings.flySpeed = flySpeed
            saveSettings()
        end

        if draggingSpeedSlider then
            local speedSliderPos = SpeedSlider.AbsolutePosition.X
            local speedSliderWidth = SpeedSlider.AbsoluteSize.X
            local speedNewPos = math.clamp((mouseX - speedSliderPos) / speedSliderWidth, 0, 1)
            SpeedKnob.Position = UDim2.new(speedNewPos, 0, 0, 0)
            speedMultiplier = math.round((1 + (speedNewPos * 9)) * 10) / 10
            SpeedLabel.Text = "Speed Multiplier: " .. speedMultiplier
            settings.speedMultiplier = speedMultiplier
            local character = getCharacter()
            if character and speedEnabled then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = 16 * speedMultiplier
                end
            end
            saveSettings()
        end
    end)

    FlyBindSquare.MouseButton1Click:Connect(function() startBinding(FlyBindSquare) end)
    FlyUnbindButton.MouseButton1Click:Connect(function() unbind(FlyBindSquare, "Fly") end)
    NoClipBindSquare.MouseButton1Click:Connect(function() startBinding(NoClipBindSquare) end)
    NoClipUnbindButton.MouseButton1Click:Connect(function() unbind(NoClipBindSquare, "NoClip") end)
    InfiniteJumpBindSquare.MouseButton1Click:Connect(function() startBinding(InfiniteJumpBindSquare) end)
    InfiniteJumpUnbindButton.MouseButton1Click:Connect(function() unbind(InfiniteJumpBindSquare, "InfiniteJump") end)
    SpeedBindSquare.MouseButton1Click:Connect(function() startBinding(SpeedBindSquare) end)
    SpeedUnbindButton.MouseButton1Click:Connect(function() unbind(SpeedBindSquare, "Speed") end)
    SaveLastPositionBindSquare.MouseButton1Click:Connect(function() startBinding(SaveLastPositionBindSquare) end)
    SaveLastPositionUnbindButton.MouseButton1Click:Connect(function() unbind(SaveLastPositionBindSquare, "SaveLastPosition") end)

    -- Settings Tab Content
    local playerListEnabled = settings.playerListEnabled

    local baseYSettings = 10
    local CategoryLabelSettings = Instance.new("TextLabel")
    CategoryLabelSettings.Size = UDim2.new(0, 280, 0, 30)
    CategoryLabelSettings.Position = UDim2.new(0, 10, 0, baseYSettings)
    CategoryLabelSettings.Text = "— Settings —"
    CategoryLabelSettings.TextColor3 = Color3.fromRGB(0, 200, 255)
    CategoryLabelSettings.BackgroundTransparency = 1
    CategoryLabelSettings.Font = Enum.Font.SourceSansBold
    CategoryLabelSettings.TextSize = 18
    CategoryLabelSettings.Parent = tabContents["Settings"]
    print("Settings category label created at Y: " .. baseYSettings)

    local yOffsetSettings = baseYSettings + 40
    local PlayerListToggle = Instance.new("TextButton")
    PlayerListToggle.Size = UDim2.new(0, 240, 0, 30)
    PlayerListToggle.Position = UDim2.new(0, 10, 0, yOffsetSettings)
    PlayerListToggle.Text = "☐ Player List: " .. (playerListEnabled and "ON" or "OFF")
    PlayerListToggle.BackgroundTransparency = 1
    PlayerListToggle.TextColor3 = playerListEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    PlayerListToggle.Font = Enum.Font.SourceSans
    PlayerListToggle.TextSize = 16
    PlayerListToggle.Parent = tabContents["Settings"]
    print("PlayerList toggle created at Y: " .. yOffsetSettings)

    local PlayerListBindSquare = Instance.new("TextButton")
    PlayerListBindSquare.Size = UDim2.new(0, 30, 0, 30)
    PlayerListBindSquare.Position = UDim2.new(0, 260, 0, yOffsetSettings)
    PlayerListBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    PlayerListBindSquare.Text = settings.keyBinds.PlayerList and settings.keyBinds.PlayerList.Name or "Bind"
    PlayerListBindSquare.BackgroundTransparency = 0
    PlayerListBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    PlayerListBindSquare.Font = Enum.Font.SourceSans
    PlayerListBindSquare.TextSize = 12
    PlayerListBindSquare.Parent = tabContents["Settings"]

    local PlayerListUnbindButton = Instance.new("TextButton")
    PlayerListUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    PlayerListUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetSettings)
    PlayerListUnbindButton.Text = "Unbind"
    PlayerListUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    PlayerListUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    PlayerListUnbindButton.Font = Enum.Font.SourceSans
    PlayerListUnbindButton.TextSize = 12
    PlayerListUnbindButton.Parent = tabContents["Settings"]

    yOffsetSettings = yOffsetSettings + 40
    local GuiBindToggle = Instance.new("TextButton")
    GuiBindToggle.Size = UDim2.new(0, 240, 0, 30)
    GuiBindToggle.Position = UDim2.new(0, 10, 0, yOffsetSettings)
    GuiBindToggle.Text = "☐ GUI Bind: " .. settings.guiBind.Name
    GuiBindToggle.BackgroundTransparency = 1
    GuiBindToggle.TextColor3 = Color3.fromRGB(0, 200, 255)
    GuiBindToggle.Font = Enum.Font.SourceSans
    GuiBindToggle.TextSize = 16
    GuiBindToggle.Parent = tabContents["Settings"]
    print("GuiBind toggle created at Y: " .. yOffsetSettings)

    local GuiBindSquare = Instance.new("TextButton")
    GuiBindSquare.Size = UDim2.new(0, 30, 0, 30)
    GuiBindSquare.Position = UDim2.new(0, 260, 0, yOffsetSettings)
    GuiBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    GuiBindSquare.Text = settings.guiBind.Name
    GuiBindSquare.BackgroundTransparency = 0
    GuiBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    GuiBindSquare.Font = Enum.Font.SourceSans
    GuiBindSquare.TextSize = 12
    GuiBindSquare.Parent = tabContents["Settings"]

    local GuiBindUnbindButton = Instance.new("TextButton")
    GuiBindUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    GuiBindUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetSettings)
    GuiBindUnbindButton.Text = "Unbind"
    GuiBindUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    GuiBindUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    GuiBindUnbindButton.Font = Enum.Font.SourceSans
    GuiBindUnbindButton.TextSize = 12
    GuiBindUnbindButton.Parent = tabContents["Settings"]

    yOffsetSettings = yOffsetSettings + 40
    local UnbindAllToggle = Instance.new("TextButton")
    UnbindAllToggle.Size = UDim2.new(0, 240, 0, 30)
    UnbindAllToggle.Position = UDim2.new(0, 10, 0, yOffsetSettings)
    UnbindAllToggle.Text = "☐ Unbind All: " .. (settings.unbindAll and "ON" or "OFF")
    UnbindAllToggle.BackgroundTransparency = 1
    UnbindAllToggle.TextColor3 = settings.unbindAll and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    UnbindAllToggle.Font = Enum.Font.SourceSans
    UnbindAllToggle.TextSize = 16
    UnbindAllToggle.Parent = tabContents["Settings"]
    print("UnbindAll toggle created at Y: " .. yOffsetSettings)

    UnbindAllToggle.MouseButton1Click:Connect(function()
        settings.unbindAll = not settings.unbindAll
        UnbindAllToggle.Text = "☐ Unbind All: " .. (settings.unbindAll and "ON" or "OFF")
        UnbindAllToggle.TextColor3 = settings.unbindAll and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        if settings.unbindAll then
            for feature, _ in pairs(settings.keyBinds) do
                settings.keyBinds[feature] = nil
            end
            AimbotBindSquare.Text = "Bind"
            DeadCheckBindSquare.Text = "Bind"
            TeamCheckBindSquare.Text = "Bind"
            SmoothnessBindSquare.Text = "Bind"
            FovCircleBindSquare.Text = "Bind"
            FlyBindSquare.Text = "Bind"
            NoClipBindSquare.Text = "Bind"
            InfiniteJumpBindSquare.Text = "Bind"
            SpeedBindSquare.Text = "Bind"
            SaveLastPositionBindSquare.Text = "Bind"
            PlayerListBindSquare.Text = "Bind"
            GuiBindSquare.Text = "Bind"
            settings.guiBind = Enum.KeyCode.Q -- Reset to default
            saveSettings()
            print("All binds unbound.")
        end
        settings.unbindAll = false -- Reset toggle after action
        UnbindAllToggle.Text = "☐ Unbind All: OFF"
        UnbindAllToggle.TextColor3 = Color3.fromRGB(0, 200, 255)
        saveSettings()
    end)

    -- Player List GUI
    local PlayerListGui = Instance.new("ScreenGui")
    PlayerListGui.Name = "PlayerListGui"
    PlayerListGui.ResetOnSpawn = false
    PlayerListGui.IgnoreGuiInset = true
    local successPlayerListGui, errPlayerListGui = pcall(function()
        PlayerListGui.Parent = game:GetService("CoreGui")
    end)
    if not successPlayerListGui then
        warn("Failed to parent PlayerListGui to CoreGui: " .. tostring(errPlayerListGui))
        PlayerListGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
        print("Falling back to PlayerGui for PlayerListGui parenting.")
    end

    local PlayerListFrame = Instance.new("ScrollingFrame")
    PlayerListFrame.Size = UDim2.new(0, 200, 0, 300)
    PlayerListFrame.Position = UDim2.new(1, -210, 0, 10)
    PlayerListFrame.BackgroundColor3 = Color3.fromRGB(0, 40, 80)
    PlayerListFrame.BackgroundTransparency = 0
    PlayerListFrame.BorderSizePixel = 0
    PlayerListFrame.Visible = playerListEnabled
    PlayerListFrame.ScrollBarThickness = 5
    PlayerListFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    PlayerListFrame.Parent = PlayerListGui

    local PlayerListLayout = Instance.new("UIListLayout")
    PlayerListLayout.Padding = UDim.new(0, 5)
    PlayerListLayout.Parent = PlayerListFrame
    PlayerListLayout.SortOrder = Enum.SortOrder.LayoutOrder

    local function updatePlayerList()
        for _, child in pairs(PlayerListFrame:GetChildren()) do
            if child:IsA("Frame") then
                child:Destroy()
            end
        end

        local layoutOrder = 0
        for _, player in pairs(PlayersService:GetPlayers()) do
            local playerFrame = Instance.new("Frame")
            playerFrame.Size = UDim2.new(1, -10, 0, 60)
            playerFrame.BackgroundTransparency = 1
            playerFrame.LayoutOrder = layoutOrder
            playerFrame.Parent = PlayerListFrame

            local playerIcon = Instance.new("ImageLabel")
            playerIcon.Size = UDim2.new(0, 50, 0, 50)
            playerIcon.Position = UDim2.new(0, 5, 0, 5)
            playerIcon.BackgroundTransparency = 1
            playerIcon.Image = "rbxthumb://type=AvatarHeadShot&id=" .. player.UserId .. "&w=150&h=150"
            playerIcon.Parent = playerFrame

            local playerLabel = Instance.new("TextLabel")
            playerLabel.Size = UDim2.new(0, 130, 0, 20)
            playerLabel.Position = UDim2.new(0, 60, 0, 5)
            playerLabel.BackgroundTransparency = 1
            playerLabel.Text = player.Name .. (player == LocalPlayer and " (You)" or "")
            playerLabel.TextColor3 = player.TeamColor and player.TeamColor.Color or Color3.fromRGB(0, 200, 255)
            playerLabel.Font = Enum.Font.SourceSans
            playerLabel.TextSize = 14
            playerLabel.TextXAlignment = Enum.TextXAlignment.Left
            playerLabel.Parent = playerFrame

            local healthBarFrame = Instance.new("Frame")
            healthBarFrame.Size = UDim2.new(0, 130, 0, 10)
            healthBarFrame.Position = UDim2.new(0, 60, 0, 30)
            healthBarFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            healthBarFrame.Parent = playerFrame

            local healthBar = Instance.new("Frame")
            healthBar.Size = UDim2.new(0, 0, 1, 0)
            healthBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            healthBar.BorderSizePixel = 0
            healthBar.Parent = healthBarFrame

            local healthLabel = Instance.new("TextLabel")
            healthLabel.Size = UDim2.new(0, 130, 0, 20)
            healthLabel.Position = UDim2.new(0, 60, 0, 40)
            healthLabel.BackgroundTransparency = 1
            healthLabel.Text = "Health: N/A"
            healthLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            healthLabel.Font = Enum.Font.SourceSans
            healthLabel.TextSize = 12
            healthLabel.TextXAlignment = Enum.TextXAlignment.Left
            healthLabel.Parent = playerFrame

            local function updateHealth()
                if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                    local healthPercent = humanoid.Health / humanoid.MaxHealth
                    healthBar.Size = UDim2.new(healthPercent, 0, 1, 0)
                    healthBar.BackgroundColor3 = Color3.fromRGB(255 * (1 - healthPercent), 255 * healthPercent, 0)
                    healthLabel.Text = "Health: " .. math.floor(humanoid.Health) .. "/" .. math.floor(humanoid.MaxHealth)
                else
                    healthBar.Size = UDim2.new(0, 0, 1, 0)
                    healthLabel.Text = "Health: N/A"
                end
            end

            updateHealth()
            if player.Character then
                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid:GetPropertyChangedSignal("Health"):Connect(updateHealth)
                end
            end
            player.CharacterAdded:Connect(function(char)
                local humanoid = char:WaitForChild("Humanoid")
                humanoid:GetPropertyChangedSignal("Health"):Connect(updateHealth)
                updateHealth()
            end)

            layoutOrder = layoutOrder + 1
        end

        PlayerListFrame.CanvasSize = UDim2.new(0, 0, 0, layoutOrder * 65)
        print("Player list updated with " .. layoutOrder .. " players.")
    end

    PlayerListToggle.MouseButton1Click:Connect(function()
        playerListEnabled = not playerListEnabled
        PlayerListToggle.Text = "☐ Player List: " .. (playerListEnabled and "ON" or "OFF")
        PlayerListToggle.TextColor3 = playerListEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        PlayerListFrame.Visible = playerListEnabled
        settings.playerListEnabled = playerListEnabled
        saveSettings()
        if playerListEnabled then
            local slideIn = TweenService:Create(PlayerListFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Position = UDim2.new(1, -210, 0, 10)})
            slideIn:Play()
            updatePlayerList()
        else
            local slideOut = TweenService:Create(PlayerListFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Position = UDim2.new(1, 0, 0, 10)})
            slideOut:Play()
            wait(0.3)
            PlayerListFrame.Visible = false
        end
    end)

    updatePlayerList()
    PlayersService.PlayerAdded:Connect(updatePlayerList)
    PlayersService.PlayerRemoving:Connect(updatePlayerList)

    PlayerListBindSquare.MouseButton1Click:Connect(function() startBinding(PlayerListBindSquare) end)
    PlayerListUnbindButton.MouseButton1Click:Connect(function() unbind(PlayerListBindSquare, "PlayerList") end)

    GuiBindSquare.MouseButton1Click:Connect(function() startBinding(GuiBindSquare) end)
    GuiBindUnbindButton.MouseButton1Click:Connect(function()
        unbind(GuiBindSquare, "GuiBind")
        settings.guiBind = Enum.KeyCode.Q
        GuiBindSquare.Text = "Q"
        saveSettings()
    end)

    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if bindingFeature and not gameProcessed then
            if input.UserInputType == Enum.UserInputType.Keyboard then
                local key = input.KeyCode
                local feature = nil
                if bindingFeature == FlyBindSquare then feature = "Fly"
                elseif bindingFeature == NoClipBindSquare then feature = "NoClip"
                elseif bindingFeature == InfiniteJumpBindSquare then feature = "InfiniteJump"
                elseif bindingFeature == SpeedBindSquare then feature = "Speed"
                elseif bindingFeature == SaveLastPositionBindSquare then feature = "SaveLastPosition"
                elseif bindingFeature == PlayerListBindSquare then feature = "PlayerList"
                elseif bindingFeature == GuiBindSquare then feature = "GuiBind"
                end
                if feature then
                    settings.keyBinds[feature] = key
                    bindingFeature.Text = key.Name
                    bindingFeature.TextColor3 = Color3.fromRGB(0, 200, 255)
                    if feature == "GuiBind" then
                        settings.guiBind = key
                    end
                    saveSettings()
                end
                bindingFeature = nil
            end
        elseif not gameProcessed then
            for feature, key in pairs(settings.keyBinds) do
                if key and input.KeyCode == key then
                    if feature == "Fly" then
                        toggleFly()
                    elseif feature == "NoClip" then
                        toggleNoClip()
                    elseif feature == "InfiniteJump" then
                        toggleInfiniteJump()
                    elseif feature == "Speed" then
                        toggleSpeed()
                    elseif feature == "SaveLastPosition" then
                        saveLastPositionEnabled = not saveLastPositionEnabled
                        SaveLastPositionToggle.Text = "☐ Save Pos: " .. (saveLastPositionEnabled and "ON" or "OFF")
                        SaveLastPositionToggle.TextColor3 = saveLastPositionEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                        settings.saveLastPositionEnabled = saveLastPositionEnabled
                        if saveLastPositionEnabled then
                            local character = getCharacter()
                            if character and character:FindFirstChild("HumanoidRootPart") then
                                local rootPart = character.HumanoidRootPart
                                lastPosition = rootPart.CFrame
                                print("Last position saved: " .. tostring(lastPosition))
                            else
                                warn("No character or HumanoidRootPart found to save position.")
                            end
                        end
                        saveSettings()
                    elseif feature == "PlayerList" then
                        playerListEnabled = not playerListEnabled
                        PlayerListToggle.Text = "☐ Player List: " .. (playerListEnabled and "ON" or "OFF")
                        PlayerListToggle.TextColor3 = playerListEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                        PlayerListFrame.Visible = playerListEnabled
                        settings.playerListEnabled = playerListEnabled
                        saveSettings()
                        if playerListEnabled then
                            local slideIn = TweenService:Create(PlayerListFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Position = UDim2.new(1, -210, 0, 10)})
                            slideIn:Play()
                            updatePlayerList()
                        else
                            local slideOut = TweenService:Create(PlayerListFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Position = UDim2.new(1, 0, 0, 10)})
                            slideOut:Play()
                            wait(0.3)
                            PlayerListFrame.Visible = false
                        end
                    end
                end
            end
        end
    end)

    -- Initial tab activation
    tabContents["Aimbot"].Visible = true
    currentTab = "Aimbot"
    local initialSlideIn = TweenService:Create(tabContents["Aimbot"], TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Position = UDim2.new(0.5, -150, 0, 130)})
    initialSlideIn:Play()
    print("Initial tab set to Aimbot, GUI ready.")
end)

if not success then
    warn("Script execution failed: " .. tostring(err))
else
    print("Nettleware Alpha script loaded successfully!")
end
