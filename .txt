local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Camera = workspace.CurrentCamera
local PlayersService = game:GetService("Players")
local HttpService = game:GetService("HttpService")

-- Safely get LocalPlayer with a wait loop
local LocalPlayer
while not PlayersService.LocalPlayer do
    wait(0.1)
end
LocalPlayer = PlayersService.LocalPlayer

-- Function to get character safely
local function getCharacter()
    return LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
end

-- Config System
local configFolder = "NettlwareConfigs"
if not isfolder(configFolder) then
    makefolder(configFolder)
end
local defaultConfig = {
    aimbotEnabled = false,
    aimlockEnabled = false,
    aimbotV2Enabled = false,
    deadCheck = false,
    teamCheck = false,
    espToggles = {
        Box = false,
        Name = false,
        Speed = false,
        HealthBar = false,
        Tracer = true,
        Skeleton = false,
        Box3D = false
    },
    flyEnabled = false,
    flySpeed = 75,
    infiniteJumpEnabled = false,
    noClipEnabled = false,
    speedEnabled = false,
    speedMultiplier = 1,
    tpAuraEnabled = false,
    saveLastPositionEnabled = false,
    playerListEnabled = false,
    saveConfigEnabled = false
}
local config = defaultConfig

local function saveConfig(filename)
    if config.saveConfigEnabled then -- Automatic save when enabled
        local jsonConfig = HttpService:JSONEncode(config)
        pcall(function()
            writefile(configFolder .. "/" .. filename .. ".json", jsonConfig)
        end)
    end
end

local function manualSaveConfig(filename)
    local jsonConfig = HttpService:JSONEncode(config)
    pcall(function()
        writefile(configFolder .. "/" .. filename .. ".json", jsonConfig)
        print("Configuration saved to " .. configFolder .. "/" .. filename .. ".json")
    end)
end

local function loadConfig(filename)
    local success, data = pcall(function()
        return readfile(configFolder .. "/" .. filename .. ".json")
    end)
    if success and data then
        local decoded = HttpService:JSONDecode(data)
        config = decoded
        for k, v in pairs(defaultConfig) do
            if config[k] == nil then
                config[k] = v
            elseif type(v) == "table" then
                for subK, subV in pairs(v) do
                    if config[k][subK] == nil then
                        config[k][subK] = subV
                    end
                end
            end
        end
        return true
    else
        print("No config file found for " .. filename .. " or error loading, using default settings.")
        return false
    end
end

-- GUI Setup with Dragging and Title
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "NettlwareGUI"
ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ResetOnSpawn = false
ScreenGui.IgnoreGuiInset = true

local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 400, 0, 430) -- Increased height for title bar
MainFrame.Position = UDim2.new(0.5, -200, 0.5, -165)
MainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
MainFrame.BackgroundTransparency = 0
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ScreenGui
MainFrame.Visible = false -- Initially hidden

local TitleBar = Instance.new("TextLabel")
TitleBar.Size = UDim2.new(1, 0, 0, 30)
TitleBar.Position = UDim2.new(0, 0, 0, 0)
TitleBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
TitleBar.Text = "Nettlware alpha discord.gg/Y4mu9Fe97X"
TitleBar.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleBar.Font = Enum.Font.SourceSansBold
TitleBar.TextSize = 18
TitleBar.TextTransparency = 0
TitleBar.BorderSizePixel = 0
TitleBar.Parent = MainFrame

local TabFrame = Instance.new("Frame")
TabFrame.Size = UDim2.new(1, 0, 0, 30)
TabFrame.Position = UDim2.new(0, 0, 0, 30) -- Adjusted for title bar
TabFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
TabFrame.BackgroundTransparency = 0
TabFrame.BorderSizePixel = 0
TabFrame.Parent = MainFrame

local ContentFrame = Instance.new("Frame")
ContentFrame.Size = UDim2.new(1, 0, 1, -60) -- Adjusted for title bar
ContentFrame.Position = UDim2.new(0, 0, 0, 60)
ContentFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ContentFrame.BackgroundTransparency = 0
ContentFrame.BorderSizePixel = 0
ContentFrame.Parent = MainFrame

-- Dragging Functionality
local dragging = false
local dragInput, dragStart, startPos

MainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
    end
end)

MainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
        dragInput = input
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

RunService.RenderStepped:Connect(function()
    if dragging and dragInput then
        local delta = dragInput.Position - dragStart
        MainFrame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end)

-- GUI Toggle with Q Key
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.Q then
        MainFrame.Visible = not MainFrame.Visible
    end
end)

local tabs = {"Aimbot", "Visuals", "Exploits", "Settings"}
local currentTab = nil
local tabContents = {}

for i, tabName in ipairs(tabs) do
    local TabButton = Instance.new("TextButton")
    TabButton.Size = UDim2.new(0, 100, 1, 0)
    TabButton.Position = UDim2.new(0, (i-1) * 100, 0, 0)
    TabButton.Text = tabName
    TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    TabButton.BackgroundTransparency = 0
    TabButton.TextTransparency = 0
    TabButton.BorderSizePixel = 0
    TabButton.Font = Enum.Font.SourceSans
    TabButton.TextSize = 18
    TabButton.Parent = TabFrame

    local Content = Instance.new("Frame")
    Content.Size = UDim2.new(1, 0, 1, 0)
    Content.BackgroundTransparency = 1
    Content.Visible = false
    Content.Parent = ContentFrame
    tabContents[tabName] = Content

    TabButton.MouseButton1Click:Connect(function()
        if currentTab ~= tabName then
            currentTab = tabName
            for _, content in pairs(tabContents) do
                content.Visible = false
            end
            tabContents[tabName].Visible = true
            for _, button in pairs(TabFrame:GetChildren()) do
                if button:IsA("TextButton") then
                    button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                end
            end
            TabButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        end
    end)
end

-- Aimbot Tab (unchanged)
local aimbotEnabled = config.aimbotEnabled
local aimlockEnabled = config.aimlockEnabled
local aimbotV2Enabled = config.aimbotV2Enabled
local deadCheck = config.deadCheck
local teamCheck = config.teamCheck
local targetPlayer = nil
local aimlockGyro = nil

local AimbotToggle = Instance.new("TextButton")
AimbotToggle.Size = UDim2.new(0, 100, 0, 30)
AimbotToggle.Position = UDim2.new(0, 10, 0, 10)
AimbotToggle.Text = "Aimbot: " .. (aimbotEnabled and "ON" or "OFF")
AimbotToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
AimbotToggle.BackgroundTransparency = 0
AimbotToggle.TextTransparency = 0
AimbotToggle.TextColor3 = aimbotEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
AimbotToggle.Font = Enum.Font.SourceSans
AimbotToggle.TextSize = 16
AimbotToggle.Parent = tabContents["Aimbot"]

local AimlockToggle = Instance.new("TextButton")
AimlockToggle.Size = UDim2.new(0, 100, 0, 30)
AimlockToggle.Position = UDim2.new(0, 10, 0, 50)
AimlockToggle.Text = "Aimlock: " .. (aimlockEnabled and "ON" or "OFF")
AimlockToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
AimlockToggle.BackgroundTransparency = 0
AimlockToggle.TextTransparency = 0
AimlockToggle.TextColor3 = aimlockEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
AimlockToggle.Font = Enum.Font.SourceSans
AimlockToggle.TextSize = 16
AimlockToggle.Parent = tabContents["Aimbot"]

local AimbotV2Toggle = Instance.new("TextButton")
AimbotV2Toggle.Size = UDim2.new(0, 100, 0, 30)
AimbotV2Toggle.Position = UDim2.new(0, 10, 0, 90)
AimbotV2Toggle.Text = "AimbotV2: " .. (aimbotV2Enabled and "ON" or "OFF")
AimbotV2Toggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
AimbotV2Toggle.BackgroundTransparency = 0
AimbotV2Toggle.TextTransparency = 0
AimbotV2Toggle.TextColor3 = aimbotV2Enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
AimbotV2Toggle.Font = Enum.Font.SourceSans
AimbotV2Toggle.TextSize = 16
AimbotV2Toggle.Parent = tabContents["Aimbot"]

local DeadCheckToggle = Instance.new("TextButton")
DeadCheckToggle.Size = UDim2.new(0, 100, 0, 30)
DeadCheckToggle.Position = UDim2.new(0, 10, 0, 130)
DeadCheckToggle.Text = "Dead Check: " .. (deadCheck and "ON" or "OFF")
DeadCheckToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
DeadCheckToggle.BackgroundTransparency = 0
DeadCheckToggle.TextTransparency = 0
DeadCheckToggle.TextColor3 = deadCheck and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
DeadCheckToggle.Font = Enum.Font.SourceSans
DeadCheckToggle.TextSize = 16
DeadCheckToggle.Parent = tabContents["Aimbot"]

local TeamCheckToggle = Instance.new("TextButton")
TeamCheckToggle.Size = UDim2.new(0, 100, 0, 30)
TeamCheckToggle.Position = UDim2.new(0, 10, 0, 170)
TeamCheckToggle.Text = "Team Check: " .. (teamCheck and "ON" or "OFF")
TeamCheckToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
TeamCheckToggle.BackgroundTransparency = 0
TeamCheckToggle.TextTransparency = 0
TeamCheckToggle.TextColor3 = teamCheck and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
TeamCheckToggle.Font = Enum.Font.SourceSans
TeamCheckToggle.TextSize = 16
TeamCheckToggle.Parent = tabContents["Aimbot"]

-- Aimbot Logic (unchanged)
local function getNearestPlayer()
    local nearestDistance = math.huge
    local nearestPlayer = nil
    local character = getCharacter()
    local rootPart = character:WaitForChild("HumanoidRootPart")
    local localTeam = LocalPlayer.Team

    for _, otherPlayer in pairs(PlayersService:GetPlayers()) do
        if otherPlayer ~= LocalPlayer and otherPlayer.Character and otherPlayer.Character:FindFirstChild("Head") then
            local humanoid = otherPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                local isDead = deadCheck and humanoid.Health <= 0
                local isSameTeam = teamCheck and localTeam and otherPlayer.Team and (otherPlayer.Team == localTeam)
                if not isDead and not isSameTeam then
                    local distance = (rootPart.Position - otherPlayer.Character.Head.Position).Magnitude
                    if distance < nearestDistance then
                        nearestDistance = distance
                        nearestPlayer = otherPlayer
                    end
                end
            end
        end
    end
    return nearestPlayer
end

AimbotToggle.MouseButton1Click:Connect(function()
    aimbotEnabled = not aimbotEnabled
    AimbotToggle.Text = "Aimbot: " .. (aimbotEnabled and "ON" or "OFF")
    AimbotToggle.TextColor3 = aimbotEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    config.aimbotEnabled = aimbotEnabled
    saveConfig("default")
    if not aimbotEnabled then
        RunService:UnbindFromRenderStep("AimbotSnap")
        targetPlayer = nil
    end
end)

AimlockToggle.MouseButton1Click:Connect(function()
    aimlockEnabled = not aimlockEnabled
    AimlockToggle.Text = "Aimlock: " .. (aimlockEnabled and "ON" or "OFF")
    AimlockToggle.TextColor3 = aimlockEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    config.aimlockEnabled = aimlockEnabled
    saveConfig("default")
    if not aimlockEnabled then
        RunService:UnbindFromRenderStep("AimlockPersist")
        if aimlockGyro then
            aimlockGyro:Destroy()
            aimlockGyro = nil
        end
        targetPlayer = nil
        local character = getCharacter()
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid.AutoRotate = true
        end
    end
end)

AimbotV2Toggle.MouseButton1Click:Connect(function()
    aimbotV2Enabled = not aimbotV2Enabled
    AimbotV2Toggle.Text = "AimbotV2: " .. (aimbotV2Enabled and "ON" or "OFF")
    AimbotV2Toggle.TextColor3 = aimbotV2Enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    config.aimbotV2Enabled = aimbotV2Enabled
    saveConfig("default")
    if not aimbotV2Enabled then
        RunService:UnbindFromRenderStep("AimbotV2Move")
        targetPlayer = nil
    end
end)

DeadCheckToggle.MouseButton1Click:Connect(function()
    deadCheck = not deadCheck
    DeadCheckToggle.Text = "Dead Check: " .. (deadCheck and "ON" or "OFF")
    DeadCheckToggle.TextColor3 = deadCheck and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    config.deadCheck = deadCheck
    saveConfig("default")
end)

TeamCheckToggle.MouseButton1Click:Connect(function()
    teamCheck = not teamCheck
    TeamCheckToggle.Text = "Team Check: " .. (teamCheck and "ON" or "OFF")
    TeamCheckToggle.TextColor3 = teamCheck and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    config.teamCheck = teamCheck
    saveConfig("default")
end)

UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        targetPlayer = getNearestPlayer()
        
        if aimbotEnabled and targetPlayer then
            RunService:BindToRenderStep("AimbotSnap", Enum.RenderPriority.Camera.Value + 1, function()
                if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
                    local humanoid = targetPlayer.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid and (not deadCheck or humanoid.Health > 0) then
                        local targetPos = targetPlayer.Character.Head.Position
                        if targetPos.Magnitude < 10000 then
                            Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPos)
                        end
                    else
                        targetPlayer = nil
                        RunService:UnbindFromRenderStep("AimbotSnap")
                    end
                end
            end)
        end
        
        if aimlockEnabled and targetPlayer then
            local character = getCharacter()
            local rootPart = character:WaitForChild("HumanoidRootPart")
            local humanoid = character:WaitForChild("Humanoid")
            humanoid.AutoRotate = false
            
            if not aimlockGyro then
                aimlockGyro = Instance.new("BodyGyro")
                aimlockGyro.MaxTorque = Vector3.new(0, 400000, 0)
                aimlockGyro.P = 10000
                aimlockGyro.D = 500
                aimlockGyro.Parent = rootPart
            end

            RunService:BindToRenderStep("AimlockPersist", Enum.RenderPriority.Camera.Value + 1, function()
                if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
                    local humanoid = targetPlayer.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid and (not deadCheck or humanoid.Health > 0) then
                        local targetPos = targetPlayer.Character.Head.Position
                        if targetPos.Magnitude < 10000 then
                            Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPos)
                            aimlockGyro.CFrame = CFrame.new(rootPart.Position, Vector3.new(targetPos.X, rootPart.Position.Y, targetPos.Z))
                        end
                    else
                        targetPlayer = nil
                        RunService:UnbindFromRenderStep("AimlockPersist")
                        if aimlockGyro then
                            aimlockGyro:Destroy()
                            aimlockGyro = nil
                        end
                        humanoid.AutoRotate = true
                    end
                end
            end)
        end
        
        if aimbotV2Enabled and targetPlayer then
            RunService:BindToRenderStep("AimbotV2Move", Enum.RenderPriority.Camera.Value + 1, function()
                if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
                    local humanoid = targetPlayer.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid and (not deadCheck or humanoid.Health > 0) then
                        local targetPos = Camera:WorldToViewportPoint(targetPlayer.Character.Head.Position)
                        UserInputService.MouseDeltaSensitivity = 1
                        local currentMousePos = UserInputService:GetMouseLocation()
                        local deltaX = targetPos.X - currentMousePos.X
                        local deltaY = targetPos.Y - currentMousePos.Y
                        UserInputService.MouseMoveRelative(Vector2.new(deltaX, deltaY))
                    else
                        targetPlayer = nil
                        RunService:UnbindFromRenderStep("AimbotV2Move")
                    end
                end
            end)
        end
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        RunService:UnbindFromRenderStep("AimbotSnap")
        RunService:UnbindFromRenderStep("AimlockPersist")
        RunService:UnbindFromRenderStep("AimbotV2Move")
        targetPlayer = nil
        if aimlockGyro then
            aimlockGyro:Destroy()
            aimlockGyro = nil
        end
        local character = getCharacter()
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid.AutoRotate = true
        end
    end
end)

LocalPlayer.CharacterAdded:Connect(function(char)
    if aimbotEnabled and targetPlayer then
        local rootPart = char:WaitForChild("HumanoidRootPart")
        RunService:BindToRenderStep("AimbotSnap", Enum.RenderPriority.Camera.Value + 1, function()
            if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
                local humanoid = targetPlayer.Character:FindFirstChildOfClass("Humanoid")
                if humanoid and (not deadCheck or humanoid.Health > 0) then
                    local targetPos = targetPlayer.Character.Head.Position
                    if targetPos.Magnitude < 10000 then
                        Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPos)
                    end
                end
            end
        end)
    elseif aimlockEnabled and targetPlayer then
        local rootPart = char:WaitForChild("HumanoidRootPart")
        local humanoid = char:WaitForChild("Humanoid")
        humanoid.AutoRotate = false
        if not aimlockGyro then
            aimlockGyro = Instance.new("BodyGyro")
            aimlockGyro.MaxTorque = Vector3.new(0, 400000, 0)
            aimlockGyro.P = 10000
            aimlockGyro.D = 500
            aimlockGyro.Parent = rootPart
        end
        RunService:BindToRenderStep("AimlockPersist", Enum.RenderPriority.Camera.Value + 1, function()
            if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
                local humanoid = targetPlayer.Character:FindFirstChildOfClass("Humanoid")
                if humanoid and (not deadCheck or humanoid.Health > 0) then
                    local targetPos = targetPlayer.Character.Head.Position
                    if targetPos.Magnitude < 10000 then
                        Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPos)
                        aimlockGyro.CFrame = CFrame.new(rootPart.Position, Vector3.new(targetPos.X, rootPart.Position.Y, targetPos.Z))
                    end
                end
            end
        end)
    end
end)

-- Visuals Tab (unchanged except for saveConfig call)
local espToggles = config.espToggles or defaultConfig.espToggles
local espPlayers = {}
local lastPositions = {}

local function DrawESP(plr)
    local drawings = {
        Box = Drawing.new("Quad"),
        Name = Drawing.new("Text"),
        Speed = Drawing.new("Text"),
        HealthText = Drawing.new("Text"),
        HealthBar = Drawing.new("Square"),
        Tracer = Drawing.new("Line"),
        Skeleton = {},
        Box3D = {}
    }
    
    drawings.Box.Color = Color3.fromRGB(255, 255, 255)
    drawings.Box.Thickness = 1
    drawings.Box.Transparency = 1
    drawings.Box.Visible = false

    drawings.Name.Size = 18
    drawings.Name.Color = Color3.fromRGB(255, 255, 255)
    drawings.Name.Outline = true
    drawings.Name.Visible = false

    drawings.Speed.Size = 16
    drawings.Speed.Color = Color3.fromRGB(255, 255, 255)
    drawings.Speed.Outline = true
    drawings.Speed.Visible = false

    drawings.HealthText.Size = 16
    drawings.HealthText.Color = Color3.fromRGB(255, 255, 255)
    drawings.HealthText.Outline = true
    drawings.HealthText.Visible = false

    drawings.HealthBar.Thickness = 0
    drawings.HealthBar.Size = Vector2.new(60, 10)
    drawings.HealthBar.Visible = false

    drawings.Tracer.Color = Color3.fromRGB(0, 255, 0)
    drawings.Tracer.Thickness = 1
    drawings.Tracer.Visible = false

    local bones = {
        {"Head", "UpperTorso"}, {"UpperTorso", "LowerTorso"},
        {"LowerTorso", "LeftUpperLeg"}, {"LeftUpperLeg", "LeftLowerLeg"}, {"LeftLowerLeg", "LeftFoot"},
        {"LowerTorso", "RightUpperLeg"}, {"RightUpperLeg", "RightLowerLeg"}, {"RightLowerLeg", "RightFoot"},
        {"UpperTorso", "LeftUpperArm"}, {"LeftUpperArm", "LeftLowerArm"}, {"LeftLowerArm", "LeftHand"},
        {"UpperTorso", "RightUpperArm"}, {"RightUpperArm", "RightLowerArm"}, {"RightUpperArm", "RightHand"}
    }
    for _, pair in ipairs(bones) do
        local line = Drawing.new("Line")
        line.Color = Color3.fromRGB(255, 165, 0)
        line.Thickness = 2
        line.Visible = false
        drawings.Skeleton[pair[1] .. pair[2]] = line
    end

    local box3DIndices = {
        {1, 2}, {2, 3}, {3, 4}, {4, 1},
        {5, 6}, {6, 7}, {7, 8}, {8, 5},
        {1, 5}, {2, 6}, {3, 7}, {4, 8}
    }
    for i, edge in ipairs(box3DIndices) do
        local line = Drawing.new("Line")
        line.Color = Color3.fromRGB(0, 255, 255)
        line.Thickness = 1
        line.Visible = false
        drawings.Box3D[i] = line
    end

    local function Update()
        local connection
        local character = getCharacter()
        local rootPart = character:WaitForChild("HumanoidRootPart")
        connection = RunService.RenderStepped:Connect(function()
            if plr.Character and plr.Character.PrimaryPart and plr.Character:FindFirstChildOfClass("Humanoid") and plr.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
                local pos, vis = Camera:WorldToViewportPoint(plr.Character.PrimaryPart.Position)
                if vis then
                    local TopLeft = Camera:WorldToViewportPoint((plr.Character.PrimaryPart.CFrame * CFrame.new(-2, 3, 0)).p)
                    local TopRight = Camera:WorldToViewportPoint((plr.Character.PrimaryPart.CFrame * CFrame.new(2, 3, 0)).p)
                    local BottomLeft = Camera:WorldToViewportPoint((plr.Character.PrimaryPart.CFrame * CFrame.new(-2, -3, 0)).p)
                    local BottomRight = Camera:WorldToViewportPoint((plr.Character.PrimaryPart.CFrame * CFrame.new(2, -3, 0)).p)
                    local headPart = plr.Character:FindFirstChild("Head") or plr.Character.PrimaryPart
                    local headPos, headVis
                    if headPart then
                        headPos, headVis = Camera:WorldToViewportPoint((headPart.CFrame * CFrame.new(0, 1.5, 0)).p)
                    else
                        headPos, headVis = Camera:WorldToViewportPoint(plr.Character.PrimaryPart.Position), true
                    end

                    if espToggles.Box then
                        drawings.Box.PointA = Vector2.new(TopRight.X, TopRight.Y)
                        drawings.Box.PointB = Vector2.new(TopLeft.X, TopLeft.Y)
                        drawings.Box.PointC = Vector2.new(BottomLeft.X, BottomLeft.Y)
                        drawings.Box.PointD = Vector2.new(BottomRight.X, BottomRight.Y)
                        drawings.Box.Visible = true
                    else
                        drawings.Box.Visible = false
                    end

                    if espToggles.Name and headVis then
                        local nameWidth = drawings.Name.TextBounds.X
                        drawings.Name.Position = Vector2.new(headPos.X - (nameWidth / 2), headPos.Y - 30)
                        drawings.Name.Text = plr.Name
                        drawings.Name.Visible = true
                    else
                        drawings.Name.Visible = false
                    end

                    if espToggles.Speed and headVis then
                        local currentPos = plr.Character.HumanoidRootPart.Position
                        if not lastPositions[plr] then lastPositions[plr] = currentPos end
                        local lastPos = lastPositions[plr]
                        local delta = (currentPos - lastPos).Magnitude
                        local speed = delta / RunService.RenderStepped:Wait()
                        drawings.Speed.Position = Vector2.new(headPos.X, headPos.Y + 10)
                        drawings.Speed.Text = string.format("Speed: %.1f", speed)
                        lastPositions[plr] = currentPos
                        drawings.Speed.Visible = true
                    else
                        drawings.Speed.Visible = false
                    end

                    if espToggles.HealthBar and headVis then
                        local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            local healthPercent = humanoid.Health / humanoid.MaxHealth
                            local barWidth = 60
                            local barHeight = 10
                            local barX = headPos.X - (barWidth / 2)
                            local barY = headPos.Y + 20

                            local healthText = math.floor(healthPercent * 100) .. "%"
                            local textWidth = drawings.HealthText.TextBounds.X
                            drawings.HealthText.Text = healthText
                            drawings.HealthText.Position = Vector2.new(headPos.X - (textWidth / 2), headPos.Y)
                            drawings.HealthText.Visible = true

                            drawings.HealthBar.Position = Vector2.new(barX, barY)
                            drawings.HealthBar.Size = Vector2.new(barWidth * healthPercent, barHeight)
                            drawings.HealthBar.Color = Color3.fromRGB(255 * (1 - healthPercent), 255 * healthPercent, 0)
                            drawings.HealthBar.Visible = true
                        end
                    else
                        drawings.HealthText.Visible = false
                        drawings.HealthBar.Visible = false
                    end

                    if espToggles.Tracer then
                        local chest = plr.Character:FindFirstChild("UpperTorso") or plr.Character:FindFirstChild("Torso")
                        if chest then
                            local chestPos, chestVis = Camera:WorldToViewportPoint(chest.Position)
                            if chestVis then
                                drawings.Tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                                drawings.Tracer.To = Vector2.new(chestPos.X, chestPos.Y)
                                drawings.Tracer.Visible = true
                            else
                                drawings.Tracer.Visible = false
                            end
                        else
                            drawings.Tracer.Visible = false
                        end
                    else
                        drawings.Tracer.Visible = false
                    end

                    if espToggles.Skeleton then
                        for _, pair in ipairs(bones) do
                            local p1 = plr.Character:FindFirstChild(pair[1])
                            local p2 = plr.Character:FindFirstChild(pair[2])
                            if p1 and p2 then
                                local screenP1, vis1 = Camera:WorldToViewportPoint(p1.Position)
                                local screenP2, vis2 = Camera:WorldToViewportPoint(p2.Position)
                                if vis1 and vis2 then
                                    local boneLine = drawings.Skeleton[pair[1] .. pair[2]]
                                    boneLine.From = Vector2.new(screenP1.X, screenP1.Y)
                                    boneLine.To = Vector2.new(screenP2.X, screenP2.Y)
                                    boneLine.Visible = true
                                else
                                    drawings.Skeleton[pair[1] .. pair[2]].Visible = false
                                end
                            end
                        end
                    else
                        for _, line in pairs(drawings.Skeleton) do
                            line.Visible = false
                        end
                    end

                    if espToggles.Box3D then
                        local size = plr.Character:GetExtentsSize() * 1.1
                        local cf = plr.Character.PrimaryPart.CFrame
                        local corners = {
                            cf * CFrame.new(-size.X/2,  size.Y/2, -size.Z/2),
                            cf * CFrame.new( size.X/2,  size.Y/2, -size.Z/2),
                            cf * CFrame.new( size.X/2, -size.Y/2, -size.Z/2),
                            cf * CFrame.new(-size.X/2, -size.Y/2, -size.Z/2),
                            cf * CFrame.new(-size.X/2,  size.Y/2,  size.Z/2),
                            cf * CFrame.new( size.X/2,  size.Y/2,  size.Z/2),
                            cf * CFrame.new( size.X/2, -size.Y/2,  size.Z/2),
                            cf * CFrame.new(-size.X/2, -size.Y/2,  size.Z/2)
                        }
                        local screenCorners = {}
                        local allVisible = true
                        for i, corner in ipairs(corners) do
                            local screenPos, vis = Camera:WorldToViewportPoint(corner.p)
                            screenCorners[i] = Vector2.new(screenPos.X, screenPos.Y)
                            if not vis then allVisible = false end
                        end
                        if allVisible then
                            for i, edge in ipairs(box3DIndices) do
                                local line = drawings.Box3D[i]
                                line.From = screenCorners[edge[1]]
                                line.To = screenCorners[edge[2]]
                                line.Visible = true
                            end
                        else
                            for _, line in ipairs(drawings.Box3D) do
                                line.Visible = false
                            end
                        end
                    else
                        for _, line in ipairs(drawings.Box3D) do
                            line.Visible = false
                        end
                    end
                else
                    for key, drawing in pairs(drawings) do
                        if type(drawing) == "table" then
                            for _, line in pairs(drawing) do
                                if type(line) == "table" then
                                    for _, subLine in pairs(line) do
                                        subLine.Visible = false
                                    end
                                else
                                    line.Visible = false
                                end
                            end
                        else
                            drawing.Visible = false
                        end
                    end
                end
            else
                for key, drawing in pairs(drawings) do
                    if type(drawing) == "table" then
                        for _, line in pairs(drawing) do
                            if type(line) == "table" then
                                for _, subLine in pairs(line) do
                                    subLine.Visible = false
                                end
                            else
                                line.Visible = false
                            end
                        end
                    else
                        drawing.Visible = false
                    end
                end
                if not PlayersService:FindFirstChild(plr.Name) then
                    connection:Disconnect()
                end
            end
        end)
    end
    coroutine.wrap(Update)()
    espPlayers[plr] = drawings
end

for _, player in pairs(PlayersService:GetPlayers()) do
    if player ~= LocalPlayer then
        local success, err = pcall(function()
            DrawESP(player)
        end)
        if not success then
            warn("Failed to apply ESP to player " .. player.Name .. ": " .. err)
        end
    end
end

PlayersService.PlayerAdded:Connect(function(player)
    wait(1)
    if player ~= LocalPlayer then
        local success, err = pcall(function()
            DrawESP(player)
        end)
        if not success then
            warn("Failed to apply ESP to player " .. player.Name .. ": " .. err)
        end
    end
end)

local yOffset = 10
for feature, enabled in pairs(espToggles) do
    local Toggle = Instance.new("TextButton")
    Toggle.Size = UDim2.new(0, 100, 0, 30)
    Toggle.Position = UDim2.new(0, 10, 0, yOffset)
    Toggle.Text = feature .. ": " .. (enabled and "ON" or "OFF")
    Toggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    Toggle.BackgroundTransparency = 0
    Toggle.TextTransparency = 0
    Toggle.TextColor3 = enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    Toggle.Font = Enum.Font.SourceSans
    Toggle.TextSize = 16
    Toggle.Parent = tabContents["Visuals"]

    Toggle.MouseButton1Click:Connect(function()
        espToggles[feature] = not espToggles[feature]
        Toggle.Text = feature .. ": " .. (espToggles[feature] and "ON" or "OFF")
        Toggle.TextColor3 = espToggles[feature] and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
        config.espToggles[feature] = espToggles[feature]
        saveConfig("default")
    end)
    yOffset = yOffset + 40
end

-- Exploits Tab (unchanged except for saveConfig call)
local flyEnabled = config.flyEnabled
local flySpeed = config.flySpeed
local controlSpeed = 10000
local noClipEnabled = config.noClipEnabled
local infiniteJumpEnabled = config.infiniteJumpEnabled
local speedEnabled = config.speedEnabled
local speedMultiplier = config.speedMultiplier
local tpAuraEnabled = config.tpAuraEnabled
local saveLastPositionEnabled = config.saveLastPositionEnabled
local lastPosition = nil

local FlyToggle = Instance.new("TextButton")
FlyToggle.Size = UDim2.new(0, 100, 0, 30)
FlyToggle.Position = UDim2.new(0, 10, 0, 10)
FlyToggle.Text = "Fly: " .. (flyEnabled and "ON" or "OFF")
FlyToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
FlyToggle.BackgroundTransparency = 0
FlyToggle.TextTransparency = 0
FlyToggle.TextColor3 = flyEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
FlyToggle.Font = Enum.Font.SourceSans
FlyToggle.TextSize = 16
FlyToggle.Parent = tabContents["Exploits"]

local FlySpeedLabel = Instance.new("TextLabel")
FlySpeedLabel.Size = UDim2.new(0, 100, 0, 20)
FlySpeedLabel.Position = UDim2.new(0, 10, 0, 40)
FlySpeedLabel.Text = "Fly Speed: " .. flySpeed
FlySpeedLabel.BackgroundTransparency = 1
FlySpeedLabel.TextTransparency = 0
FlySpeedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
FlySpeedLabel.Font = Enum.Font.SourceSans
FlySpeedLabel.TextSize = 16
FlySpeedLabel.Parent = tabContents["Exploits"]

local FlySpeedSlider = Instance.new("TextButton")
FlySpeedSlider.Size = UDim2.new(0, 200, 0, 20)
FlySpeedSlider.Position = UDim2.new(0, 10, 0, 60)
FlySpeedSlider.Text = ""
FlySpeedSlider.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
FlySpeedSlider.BackgroundTransparency = 0
FlySpeedSlider.Parent = tabContents["Exploits"]

local FlySpeedKnob = Instance.new("Frame")
FlySpeedKnob.Size = UDim2.new(0, 10, 1, 0)
FlySpeedKnob.Position = UDim2.new((flySpeed - 10) / 190, 0, 0, 0)
FlySpeedKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 252)
FlySpeedKnob.BackgroundTransparency = 0
FlySpeedKnob.Parent = FlySpeedSlider

local InfiniteJumpToggle = Instance.new("TextButton")
InfiniteJumpToggle.Size = UDim2.new(0, 100, 0, 30)
InfiniteJumpToggle.Position = UDim2.new(0, 10, 0, 90)
InfiniteJumpToggle.Text = "Inf Jump: " .. (infiniteJumpEnabled and "ON" or "OFF")
InfiniteJumpToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
InfiniteJumpToggle.BackgroundTransparency = 0
InfiniteJumpToggle.TextTransparency = 0
InfiniteJumpToggle.TextColor3 = infiniteJumpEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
InfiniteJumpToggle.Font = Enum.Font.SourceSans
InfiniteJumpToggle.TextSize = 16
InfiniteJumpToggle.Parent = tabContents["Exploits"]

local NoClipToggle = Instance.new("TextButton")
NoClipToggle.Size = UDim2.new(0, 100, 0, 30)
NoClipToggle.Position = UDim2.new(0, 10, 0, 130)
NoClipToggle.Text = "NoClip: " .. (noClipEnabled and "ON" or "OFF")
NoClipToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
NoClipToggle.BackgroundTransparency = 0
NoClipToggle.TextTransparency = 0
NoClipToggle.TextColor3 = noClipEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
NoClipToggle.Font = Enum.Font.SourceSans
NoClipToggle.TextSize = 16
NoClipToggle.Parent = tabContents["Exploits"]

local SpeedToggle = Instance.new("TextButton")
SpeedToggle.Size = UDim2.new(0, 100, 0, 30)
SpeedToggle.Position = UDim2.new(0, 10, 0, 170)
SpeedToggle.Text = "Speed: " .. (speedEnabled and "ON" or "OFF")
SpeedToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
SpeedToggle.BackgroundTransparency = 0
SpeedToggle.TextTransparency = 0
SpeedToggle.TextColor3 = speedEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
SpeedToggle.Font = Enum.Font.SourceSans
SpeedToggle.TextSize = 16
SpeedToggle.Parent = tabContents["Exploits"]

local SpeedLabel = Instance.new("TextLabel")
SpeedLabel.Size = UDim2.new(0, 100, 0, 20)
SpeedLabel.Position = UDim2.new(0, 10, 0, 200)
SpeedLabel.Text = "Speed: " .. speedMultiplier .. "x"
SpeedLabel.BackgroundTransparency = 1
SpeedLabel.TextTransparency = 0
SpeedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
SpeedLabel.Font = Enum.Font.SourceSans
SpeedLabel.TextSize = 16
SpeedLabel.Parent = tabContents["Exploits"]

local SpeedSlider = Instance.new("TextButton")
SpeedSlider.Size = UDim2.new(0, 200, 0, 20)
SpeedSlider.Position = UDim2.new(0, 10, 0, 220)
SpeedSlider.Text = ""
SpeedSlider.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
SpeedSlider.BackgroundTransparency = 0
SpeedSlider.Parent = tabContents["Exploits"]

local SpeedKnob = Instance.new("Frame")
SpeedKnob.Size = UDim2.new(0, 10, 1, 0)
SpeedKnob.Position = UDim2.new((speedMultiplier - 1) / 9, 0, 0, 0)
SpeedKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 252)
SpeedKnob.BackgroundTransparency = 0
SpeedKnob.Parent = SpeedSlider

local TpAuraToggle = Instance.new("TextButton")
TpAuraToggle.Size = UDim2.new(0, 100, 0, 30)
TpAuraToggle.Position = UDim2.new(0, 10, 0, 250)
TpAuraToggle.Text = "TP Aura: " .. (tpAuraEnabled and "ON" or "OFF")
TpAuraToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
TpAuraToggle.BackgroundTransparency = 0
TpAuraToggle.TextTransparency = 0
TpAuraToggle.TextColor3 = tpAuraEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
TpAuraToggle.Font = Enum.Font.SourceSans
TpAuraToggle.TextSize = 16
TpAuraToggle.Parent = tabContents["Exploits"]

local SaveLastPositionToggle = Instance.new("TextButton")
SaveLastPositionToggle.Size = UDim2.new(0, 100, 0, 30)
SaveLastPositionToggle.Position = UDim2.new(0, 10, 0, 290)
SaveLastPositionToggle.Text = "Save Pos: " .. (saveLastPositionEnabled and "ON" or "OFF")
SaveLastPositionToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
SaveLastPositionToggle.BackgroundTransparency = 0
SaveLastPositionToggle.TextTransparency = 0
SaveLastPositionToggle.TextColor3 = saveLastPositionEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
SaveLastPositionToggle.Font = Enum.Font.SourceSans
SaveLastPositionToggle.TextSize = 16
SaveLastPositionToggle.Parent = tabContents["Exploits"]

-- Settings Tab with Custom Save/Load
local PlayerListToggle = Instance.new("TextButton")
PlayerListToggle.Size = UDim2.new(0, 100, 0, 30)
PlayerListToggle.Position = UDim2.new(0, 10, 0, 10)
PlayerListToggle.Text = "Player List: " .. (config.playerListEnabled and "ON" or "OFF")
PlayerListToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
PlayerListToggle.BackgroundTransparency = 0
PlayerListToggle.TextTransparency = 0
PlayerListToggle.TextColor3 = config.playerListEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
PlayerListToggle.Font = Enum.Font.SourceSans
PlayerListToggle.TextSize = 16
PlayerListToggle.Parent = tabContents["Settings"]

local SaveConfigToggle = Instance.new("TextButton")
SaveConfigToggle.Size = UDim2.new(0, 100, 0, 30)
SaveConfigToggle.Position = UDim2.new(0, 10, 0, 50)
SaveConfigToggle.Text = "Save Config: " .. (config.saveConfigEnabled and "ON" or "OFF")
SaveConfigToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
SaveConfigToggle.BackgroundTransparency = 0
SaveConfigToggle.TextTransparency = 0
SaveConfigToggle.TextColor3 = config.saveConfigEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
SaveConfigToggle.Font = Enum.Font.SourceSans
SaveConfigToggle.TextSize = 16
SaveConfigToggle.Parent = tabContents["Settings"]

local ConfigNameBox = Instance.new("TextBox")
ConfigNameBox.Size = UDim2.new(0, 150, 0, 30)
ConfigNameBox.Position = UDim2.new(0, 10, 0, 90)
ConfigNameBox.Text = "default"
ConfigNameBox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
ConfigNameBox.TextColor3 = Color3.fromRGB(255, 255, 255)
ConfigNameBox.Font = Enum.Font.SourceSans
ConfigNameBox.TextSize = 16
ConfigNameBox.Parent = tabContents["Settings"]

local SaveButton = Instance.new("TextButton")
SaveButton.Size = UDim2.new(0, 100, 0, 30)
SaveButton.Position = UDim2.new(0, 170, 0, 90)
SaveButton.Text = "Save"
SaveButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
SaveButton.BackgroundTransparency = 0
SaveButton.TextTransparency = 0
SaveButton.TextColor3 = Color3.fromRGB(255, 255, 255)
SaveButton.Font = Enum.Font.SourceSans
SaveButton.TextSize = 16
SaveButton.Parent = tabContents["Settings"]

local LoadButton = Instance.new("TextButton")
LoadButton.Size = UDim2.new(0, 100, 0, 30)
LoadButton.Position = UDim2.new(0, 10, 0, 130)
LoadButton.Text = "Load"
LoadButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
LoadButton.BackgroundTransparency = 0
LoadButton.TextTransparency = 0
LoadButton.TextColor3 = Color3.fromRGB(255, 255, 255)
LoadButton.Font = Enum.Font.SourceSans
LoadButton.TextSize = 16
LoadButton.Parent = tabContents["Settings"]

local LoadListFrame = Instance.new("ScrollingFrame")
LoadListFrame.Size = UDim2.new(0, 200, 0, 200)
LoadListFrame.Position = UDim2.new(0, 120, 0, 130)
LoadListFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
LoadListFrame.ScrollBarThickness = 5
LoadListFrame.Visible = false
LoadListFrame.Parent = tabContents["Settings"]

local function updateLoadList()
    for _, child in pairs(LoadListFrame:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end
    local files = listfiles(configFolder)
    local yPos = 0
    for _, file in pairs(files) do
        if file:match("%.json$") then
            local configName = file:match("([^/\\]+)%.json$")
            local LoadConfigButton = Instance.new("TextButton")
            LoadConfigButton.Size = UDim2.new(1, -10, 0, 30)
            LoadConfigButton.Position = UDim2.new(0, 5, 0, yPos)
            LoadConfigButton.Text = configName
            LoadConfigButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            LoadConfigButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            LoadConfigButton.Font = Enum.Font.SourceSans
            LoadConfigButton.TextSize = 16
            LoadConfigButton.Parent = LoadListFrame
            LoadConfigButton.MouseButton1Click:Connect(function()
                if loadConfig(configName) then
                    applyLoadedConfig()
                    print("Configuration loaded from " .. configFolder .. "/" .. configName .. ".json")
                end
                LoadListFrame.Visible = false
            end)
            yPos = yPos + 35
        end
    end
    LoadListFrame.CanvasSize = UDim2.new(0, 0, 0, yPos)
end

SaveButton.MouseButton1Click:Connect(function()
    local filename = ConfigNameBox.Text
    if filename ~= "" then
        manualSaveConfig(filename)
        updateLoadList()
    else
        print("Please enter a config name!")
    end
end)

LoadButton.MouseButton1Click:Connect(function()
    LoadListFrame.Visible = not LoadListFrame.Visible
    if LoadListFrame.Visible then
        updateLoadList()
    end
end)

-- Player List GUI (unchanged)
local PlayerListFrame = Instance.new("Frame")
PlayerListFrame.Size = UDim2.new(0, 200, 0, 300)
PlayerListFrame.Position = UDim2.new(1, -210, 0, 10)
PlayerListFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
PlayerListFrame.BackgroundTransparency = 0
PlayerListFrame.BorderSizePixel = 0
PlayerListFrame.Visible = config.playerListEnabled
PlayerListFrame.Parent = ScreenGui

local PlayerListScrolling = Instance.new("ScrollingFrame")
PlayerListScrolling.Size = UDim2.new(1, 0, 1, 0)
PlayerListScrolling.BackgroundTransparency = 1
PlayerListScrolling.ScrollBarThickness = 5
PlayerListScrolling.Parent = PlayerListFrame

local playerEntries = {}

local function updatePlayerList()
    for _, entry in pairs(playerEntries) do
        entry.Frame:Destroy()
    end
    playerEntries = {}

    local yOffset = 0
    for _, player in pairs(PlayersService:GetPlayers()) do
        local entryFrame = Instance.new("Frame")
        entryFrame.Size = UDim2.new(1, -10, 0, 40)
        entryFrame.Position = UDim2.new(0, 5, 0, yOffset)
        entryFrame.BackgroundTransparency = 1
        entryFrame.Parent = PlayerListScrolling

        local thumbnail = Instance.new("ImageLabel")
        thumbnail.Size = UDim2.new(0, 30, 0, 30)
        thumbnail.Position = UDim2.new(0, 5, 0, 5)
        thumbnail.BackgroundTransparency = 1
        local thumbType = Enum.ThumbnailType.HeadShot
        local thumbSize = Enum.ThumbnailSize.Size48x48
        local content, isReady = PlayersService:GetUserThumbnailAsync(player.UserId, thumbType, thumbSize)
        thumbnail.Image = (isReady and content) or "rbxasset://textures/ui/GuiImagePlaceholder.png"
        thumbnail.Parent = entryFrame

        local nameLabel = Instance.new("TextLabel")
        nameLabel.Size = UDim2.new(0, 100, 0, 20)
        nameLabel.Position = UDim2.new(0, 40, 0, 0)
        nameLabel.Text = player.Name
        nameLabel.BackgroundTransparency = 1
        nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        nameLabel.Font = Enum.Font.SourceSans
        nameLabel.TextSize = 16
        nameLabel.TextXAlignment = Enum.TextXAlignment.Left
        nameLabel.Parent = entryFrame

        local healthLabel = Instance.new("TextLabel")
        healthLabel.Size = UDim2.new(0, 100, 0, 20)
        healthLabel.Position = UDim2.new(0, 40, 0, 20)
        healthLabel.Text = "Health: N/A"
        healthLabel.BackgroundTransparency = 1
        healthLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        healthLabel.Font = Enum.Font.SourceSans
        healthLabel.TextSize = 16
        healthLabel.TextXAlignment = Enum.TextXAlignment.Left
        healthLabel.Parent = entryFrame

        if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            healthLabel.Text = "Health: " .. math.floor(humanoid.Health) .. "/" .. humanoid.MaxHealth
        end

        playerEntries[player] = {Frame = entryFrame, HealthLabel = healthLabel}
        yOffset = yOffset + 45
    end
    PlayerListScrolling.CanvasSize = UDim2.new(0, 0, 0, yOffset)
end

PlayerListToggle.MouseButton1Click:Connect(function()
    config.playerListEnabled = not config.playerListEnabled
    PlayerListToggle.Text = "Player List: " .. (config.playerListEnabled and "ON" or "OFF")
    PlayerListToggle.TextColor3 = config.playerListEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    PlayerListFrame.Visible = config.playerListEnabled
    saveConfig("default")
    if config.playerListEnabled then
        updatePlayerList()
    end
end)

SaveConfigToggle.MouseButton1Click:Connect(function()
    config.saveConfigEnabled = not config.saveConfigEnabled
    SaveConfigToggle.Text = "Save Config: " .. (config.saveConfigEnabled and "ON" or "OFF")
    SaveConfigToggle.TextColor3 = config.saveConfigEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    saveConfig("default")
end)

local function applyLoadedConfig()
    aimbotEnabled = config.aimbotEnabled
    aimlockEnabled = config.aimlockEnabled
    aimbotV2Enabled = config.aimbotV2Enabled
    deadCheck = config.deadCheck
    teamCheck = config.teamCheck
    espToggles = config.espToggles or defaultConfig.espToggles
    flyEnabled = config.flyEnabled
    flySpeed = config.flySpeed
    infiniteJumpEnabled = config.infiniteJumpEnabled
    noClipEnabled = config.noClipEnabled
    speedEnabled = config.speedEnabled
    speedMultiplier = config.speedMultiplier
    tpAuraEnabled = config.tpAuraEnabled
    saveLastPositionEnabled = config.saveLastPositionEnabled

    AimbotToggle.Text = "Aimbot: " .. (aimbotEnabled and "ON" or "OFF")
    AimbotToggle.TextColor3 = aimbotEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    AimlockToggle.Text = "Aimlock: " .. (aimlockEnabled and "ON" or "OFF")
    AimlockToggle.TextColor3 = aimlockEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    AimbotV2Toggle.Text = "AimbotV2: " .. (aimbotV2Enabled and "ON" or "OFF")
    AimbotV2Toggle.TextColor3 = aimbotV2Enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    DeadCheckToggle.Text = "Dead Check: " .. (deadCheck and "ON" or "OFF")
    DeadCheckToggle.TextColor3 = deadCheck and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    TeamCheckToggle.Text = "Team Check: " .. (teamCheck and "ON" or "OFF")
    TeamCheckToggle.TextColor3 = teamCheck and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)

    for feature, enabled in pairs(espToggles) do
        for _, child in pairs(tabContents["Visuals"]:GetChildren()) do
            if child:IsA("TextButton") and child.Text:find(feature) then
                child.Text = feature .. ": " .. (enabled and "ON" or "OFF")
                child.TextColor3 = enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
            end
        end
    end

    FlyToggle.Text = "Fly: " .. (flyEnabled and "ON" or "OFF")
    FlyToggle.TextColor3 = flyEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    FlySpeedLabel.Text = "Fly Speed: " .. flySpeed
    FlySpeedKnob.Position = UDim2.new((flySpeed - 10) / 190, 0, 0, 0)
    if flyEnabled then toggleFly() end

    InfiniteJumpToggle.Text = "Inf Jump: " .. (infiniteJumpEnabled and "ON" or "OFF")
    InfiniteJumpToggle.TextColor3 = infiniteJumpEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)

    NoClipToggle.Text = "NoClip: " .. (noClipEnabled and "ON" or "OFF")
    NoClipToggle.TextColor3 = noClipEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    if noClipEnabled then toggleNoClip() end

    SpeedToggle.Text = "Speed: " .. (speedEnabled and "ON" or "OFF")
    SpeedToggle.TextColor3 = speedEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    SpeedLabel.Text = "Speed: " .. speedMultiplier .. "x"
    SpeedKnob.Position = UDim2.new((speedMultiplier - 1) / 9, 0, 0, 0)
    if speedEnabled then toggleSpeed() end

    TpAuraToggle.Text = "TP Aura: " .. (tpAuraEnabled and "ON" or "OFF")
    TpAuraToggle.TextColor3 = tpAuraEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    if tpAuraEnabled then toggleTpAura() end

    SaveLastPositionToggle.Text = "Save Pos: " .. (saveLastPositionEnabled and "ON" or "OFF")
    SaveLastPositionToggle.TextColor3 = saveLastPositionEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)

    PlayerListToggle.Text = "Player List: " .. (config.playerListEnabled and "ON" or "OFF")
    PlayerListToggle.TextColor3 = config.playerListEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    PlayerListFrame.Visible = config.playerListEnabled
    if config.playerListEnabled then updatePlayerList() end

    SaveConfigToggle.Text = "Save Config: " .. (config.saveConfigEnabled and "ON" or "OFF")
    SaveConfigToggle.TextColor3 = config.saveConfigEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
end

PlayersService.PlayerAdded:Connect(function(player)
    if config.playerListEnabled then
        wait(1)
        updatePlayerList()
    end
end)

PlayersService.PlayerRemoving:Connect(function(player)
    if config.playerListEnabled then
        updatePlayerList()
    end
end)

RunService.RenderStepped:Connect(function()
    if config.playerListEnabled then
        for player, entry in pairs(playerEntries) do
            if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                entry.HealthLabel.Text = "Health: " .. math.floor(humanoid.Health) .. "/" .. humanoid.MaxHealth
            else
                entry.HealthLabel.Text = "Health: N/A"
            end
        end
    end
end)

-- Exploits Logic (unchanged except for saveConfig call)
local draggingFlySlider = false
local draggingSpeedSlider = false

FlySpeedSlider.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingFlySlider = true
    end
end)

FlySpeedSlider.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingFlySlider = false
    end
end)

SpeedSlider.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingSpeedSlider = true
    end
end)

SpeedSlider.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingSpeedSlider = false
    end
end)

RunService.RenderStepped:Connect(function()
    local mouseX = UserInputService:GetMouseLocation().X

    if draggingFlySlider then
        local flySliderPos = FlySpeedSlider.AbsolutePosition.X
        local flySliderWidth = FlySpeedSlider.AbsoluteSize.X
        local flyNewPos = math.clamp((mouseX - flySliderPos) / flySliderWidth, 0, 1)
        FlySpeedKnob.Position = UDim2.new(flyNewPos, 0, 0, 0)
        flySpeed = math.floor(10 + (flyNewPos * 190))
        FlySpeedLabel.Text = "Fly Speed: " .. flySpeed
        config.flySpeed = flySpeed
        saveConfig("default")
    end

    if draggingSpeedSlider then
        local speedSliderPos = SpeedSlider.AbsolutePosition.X
        local speedSliderWidth = SpeedSlider.AbsoluteSize.X
        local speedNewPos = math.clamp((mouseX - speedSliderPos) / speedSliderWidth, 0, 1)
        SpeedKnob.Position = UDim2.new(speedNewPos, 0, 0, 0)
        speedMultiplier = math.floor(1 + (speedNewPos * 9))
        SpeedLabel.Text = "Speed: " .. speedMultiplier .. "x"
        config.speedMultiplier = speedMultiplier
        saveConfig("default")
    end
end)

function toggleFly()
    flyEnabled = not flyEnabled
    FlyToggle.Text = "Fly: " .. (flyEnabled and "ON" or "OFF")
    FlyToggle.TextColor3 = flyEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    config.flyEnabled = flyEnabled
    saveConfig("default")
    
    local character = getCharacter()
    local rootPart = character:WaitForChild("HumanoidRootPart")
    local humanoid = character:WaitForChild("Humanoid")
    
    if flyEnabled and saveLastPositionEnabled then
        lastPosition = rootPart.Position
    end
    
    if flyEnabled then
        humanoid:ChangeState(Enum.HumanoidStateType.Physics)
        local bv = Instance.new("BodyVelocity")
        bv.Velocity = Vector3.new(0, 0, 0)
        bv.MaxForce = Vector3.new(controlSpeed, controlSpeed, controlSpeed)
        bv.Parent = rootPart
        
        local bg = Instance.new("BodyGyro")
        bg.MaxTorque = Vector3.new(controlSpeed, controlSpeed, controlSpeed)
        bg.P = 5000
        bg.D = 500
        bg.CFrame = rootPart.CFrame
        bg.Parent = rootPart
        
        spawn(function()
            while flyEnabled do
                local char = getCharacter()
                local root = char:WaitForChild("HumanoidRootPart")
                local hum = char:WaitForChild("Humanoid")
                local cam = workspace.CurrentCamera
                local move = Vector3.new(0, 0, 0)
                
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then move = move + Vector3.new(0, 0, -1) end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then move = move + Vector3.new(0, 0, 1) end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then move = move + Vector3.new(-1, 0, 0) end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then move = move + Vector3.new(1, 0, 0) end
                
                local verticalMove = 0
                if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                    verticalMove = 1
                elseif UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) or UserInputService:IsKeyDown(Enum.KeyCode.RightShift) then
                    verticalMove = -1
                else
                    verticalMove = 0
                end
                move = move + Vector3.new(0, verticalMove, 0)
                
                if move.Magnitude > 0 then
                    move = move.Unit * flySpeed
                    bv.Velocity = cam.CFrame:VectorToWorldSpace(move)
                    bg.CFrame = cam.CFrame
                else
                    bv.Velocity = Vector3.new(0, 0, 0)
                end
                wait()
            end
            if rootPart:FindFirstChild("BodyVelocity") then rootPart.BodyVelocity:Destroy() end
            if rootPart:FindFirstChild("BodyGyro") then rootPart.BodyGyro:Destroy() end
            humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
            if saveLastPositionEnabled and lastPosition then
                rootPart.CFrame = CFrame.new(lastPosition)
                lastPosition = nil
            end
        end)
    else
        if saveLastPositionEnabled and lastPosition then
            rootPart.CFrame = CFrame.new(lastPosition)
            lastPosition = nil
        end
    end
end

FlyToggle.MouseButton1Click:Connect(toggleFly)

LocalPlayer.CharacterAdded:Connect(function(char)
    if flyEnabled then
        wait(0.1)
        toggleFly()
        toggleFly()
    end
end)

function toggleNoClip()
    noClipEnabled = not noClipEnabled
    NoClipToggle.Text = "NoClip: " .. (noClipEnabled and "ON" or "OFF")
    NoClipToggle.TextColor3 = noClipEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    config.noClipEnabled = noClipEnabled
    saveConfig("default")
    
    spawn(function()
        while noClipEnabled do
            local character = getCharacter()
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") and part.CanCollide then
                    part.CanCollide = false
                end
            end
            wait()
        end
        local character = getCharacter()
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
    end)
end

NoClipToggle.MouseButton1Click:Connect(toggleNoClip)

UserInputService.JumpRequest:Connect(function()
    if infiniteJumpEnabled then
        local character = getCharacter()
        local humanoid = character:WaitForChild("Humanoid")
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

InfiniteJumpToggle.MouseButton1Click:Connect(function()
    infiniteJumpEnabled = not infiniteJumpEnabled
    InfiniteJumpToggle.Text = "Inf Jump: " .. (infiniteJumpEnabled and "ON" or "OFF")
    InfiniteJumpToggle.TextColor3 = infiniteJumpEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    config.infiniteJumpEnabled = infiniteJumpEnabled
    saveConfig("default")
end)

function toggleSpeed()
    speedEnabled = not speedEnabled
    SpeedToggle.Text = "Speed: " .. (speedEnabled and "ON" or "OFF")
    SpeedToggle.TextColor3 = speedEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    config.speedEnabled = speedEnabled
    saveConfig("default")
    
    if speedEnabled and saveLastPositionEnabled then
        lastPosition = getCharacter().HumanoidRootPart.Position
    end
    
    if speedEnabled then
        spawn(function()
            while speedEnabled do
                local character = getCharacter()
                local humanoid = character:WaitForChild("Humanoid")
                local rootPart = character:WaitForChild("HumanoidRootPart")
                local moveDirection = humanoid.MoveDirection
                if moveDirection.Magnitude > 0 then
                    rootPart.Velocity = moveDirection * (humanoid.WalkSpeed * speedMultiplier)
                end
                wait()
            end
            if saveLastPositionEnabled and lastPosition then
                local rootPart = getCharacter().HumanoidRootPart
                rootPart.CFrame = CFrame.new(lastPosition)
                lastPosition = nil
            end
        end)
    else
        if saveLastPositionEnabled and lastPosition then
            local rootPart = getCharacter().HumanoidRootPart
            rootPart.CFrame = CFrame.new(lastPosition)
            lastPosition = nil
        end
    end
end

SpeedToggle.MouseButton1Click:Connect(toggleSpeed)

function toggleTpAura()
    tpAuraEnabled = not tpAuraEnabled
    TpAuraToggle.Text = "TP Aura: " .. (tpAuraEnabled and "ON" or "OFF")
    TpAuraToggle.TextColor3 = tpAuraEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    config.tpAuraEnabled = tpAuraEnabled
    saveConfig("default")
    
    if tpAuraEnabled and saveLastPositionEnabled then
        lastPosition = getCharacter().HumanoidRootPart.Position
    end
    
    if tpAuraEnabled then
        spawn(function()
            while tpAuraEnabled do
                local nearestPlayer = getNearestPlayer()
                if nearestPlayer and nearestPlayer.Character and nearestPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local targetRoot = nearestPlayer.Character.HumanoidRootPart
                    local angles = {0, 90, 180, 270}
                    local success = false
                    
                    for _, angle in ipairs(angles) do
                        local rad = math.rad(angle)
                        local offset = Vector3.new(math.cos(rad) * 3, 0, math.sin(rad) * 3)
                        local newPos = targetRoot.Position + offset
                        
                        local ray = Ray.new(newPos + Vector3.new(0, 5, 0), Vector3.new(0, -10, 0)) 
                                                 local raycastResult = workspace:Raycast(ray.Origin, ray.Direction)
                        if not raycastResult then
                            local region = Region3.new(newPos - Vector3.new(1, 1, 1), newPos + Vector3.new(1, 1, 1))
                            local parts = workspace:FindPartsInRegion3(region, getCharacter(), 100)
                            if #parts == 0 then
                                getCharacter().HumanoidRootPart.CFrame = CFrame.new(newPos)
                                success = true
                                break
                            end
                        end
                    end
                    
                    if not success then
                        getCharacter().HumanoidRootPart.CFrame = CFrame.new(targetRoot.Position + Vector3.new(0, 5, 0))
                    end
                end
                wait(0.1)
            end
            if saveLastPositionEnabled and lastPosition then
                local rootPart = getCharacter().HumanoidRootPart
                rootPart.CFrame = CFrame.new(lastPosition)
                lastPosition = nil
            end
        end)
    else
        if saveLastPositionEnabled and lastPosition then
            local rootPart = getCharacter().HumanoidRootPart
            rootPart.CFrame = CFrame.new(lastPosition)
            lastPosition = nil
        end
    end
end

TpAuraToggle.MouseButton1Click:Connect(toggleTpAura)

SaveLastPositionToggle.MouseButton1Click:Connect(function()
    saveLastPositionEnabled = not saveLastPositionEnabled
    SaveLastPositionToggle.Text = "Save Pos: " .. (saveLastPositionEnabled and "ON" or "OFF")
    SaveLastPositionToggle.TextColor3 = saveLastPositionEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    config.saveLastPositionEnabled = saveLastPositionEnabled
    saveConfig("default")
    
    if saveLastPositionEnabled then
        local character = getCharacter()
        if character and character:FindFirstChild("HumanoidRootPart") then
            lastPosition = character.HumanoidRootPart.Position
        end
    else
        lastPosition = nil
    end
end)

LocalPlayer.CharacterAdded:Connect(function(char)
    if noClipEnabled then
        wait(0.1)
        toggleNoClip()
        toggleNoClip()
    end
    if speedEnabled then
        wait(0.1)
        toggleSpeed()
        toggleSpeed()
    end
    if tpAuraEnabled then
        wait(0.1)
        toggleTpAura()
        toggleTpAura()
    end
end)

-- Initial Config Load
loadConfig("default")
applyLoadedConfig()

-- Set initial tab
if tabContents["Aimbot"] then
    currentTab = "Aimbot"
    tabContents["Aimbot"].Visible = true
    for _, button in pairs(TabFrame:GetChildren()) do
        if button:IsA("TextButton") and button.Text == "Aimbot" then
            button.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        end
    end
end

-- Cleanup on script end
ScreenGui.Destroying:Connect(function()
    if flyEnabled and getCharacter():FindFirstChild("HumanoidRootPart") then
        local rootPart = getCharacter().HumanoidRootPart
        if rootPart:FindFirstChild("BodyVelocity") then rootPart.BodyVelocity:Destroy() end
        if rootPart:FindFirstChild("BodyGyro") then rootPart.BodyGyro:Destroy() end
    end
    for _, drawings in pairs(espPlayers) do
        for key, drawing in pairs(drawings) do
            if type(drawing) == "table" then
                for _, line in pairs(drawing) do
                    if line.Remove then line:Remove() end
                end
            elseif drawing.Remove then
                drawing:Remove()
            end
        end
    end
    RunService:UnbindFromRenderStep("AimbotSnap")
    RunService:UnbindFromRenderStep("AimlockPersist")
    RunService:UnbindFromRenderStep("AimbotV2Move")
    if aimlockGyro then
        aimlockGyro:Destroy()
    end
end)

print("Nettlware Alpha Loaded Successfully!")
