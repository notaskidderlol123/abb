-- Services
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Camera = workspace.CurrentCamera
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

-- GUI Setup
local gui = Instance.new("ScreenGui")
gui.Name = "CustomGUI"
gui.ResetOnSpawn = false
gui.Parent = player:WaitForChild("PlayerGui")

local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 400, 0, 300)
mainFrame.Position = UDim2.new(0.5, -200, 0.5, -150)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BorderSizePixel = 0
mainFrame.Active = true
mainFrame.Draggable = true -- Allow dragging
mainFrame.Visible = true
mainFrame.Parent = gui

local titleBar = Instance.new("Frame")
titleBar.Size = UDim2.new(1, 0, 0, 30)
titleBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
titleBar.Parent = mainFrame

local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(1, 0, 1, 0)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = "Custom GUI - Press Q to Toggle"
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.TextSize = 14
titleLabel.Font = Enum.Font.SourceSans
titleLabel.Parent = titleBar

-- GUI Toggle
local guiVisible = true
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.Q then
        guiVisible = not guiVisible
        mainFrame.Visible = guiVisible
    end
end)

-- Fly Implementation
local flying = false
local flySpeed = 50
local flyForce = 10000

local function toggleFly()
    flying = not flying
    if flying then
        humanoid.PlatformStand = true
        local bv = Instance.new("BodyVelocity")
        bv.Velocity = Vector3.new(0, 0, 0)
        bv.MaxForce = Vector3.new(flyForce, flyForce, flyForce)
        bv.Parent = rootPart
        
        local bg = Instance.new("BodyGyro")
        bg.MaxTorque = Vector3.new(flyForce, flyForce, flyForce)
        bg.P = 5000
        bg.D = 500
        bg.CFrame = rootPart.CFrame
        bg.Parent = rootPart

        RunService.RenderStepped:Connect(function()
            if not flying then return end
            local move = Vector3.new(0, 0, 0)
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then move = move + Vector3.new(0, 0, -1) end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then move = move + Vector3.new(0, 0, 1) end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then move = move + Vector3.new(-1, 0, 0) end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then move = move + Vector3.new(1, 0, 0) end
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then move = move + Vector3.new(0, 1, 0) end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then move = move + Vector3.new(0, -1, 0) end

            if move.Magnitude > 0 then
                move = move.Unit * flySpeed
                rootPart.Velocity = Camera.CFrame:VectorToWorldSpace(move)
                bg.CFrame = Camera.CFrame
            else
                rootPart.Velocity = Vector3.new(0, 0, 0)
            end
        end)
    else
        humanoid.PlatformStand = false
        if rootPart:FindFirstChild("BodyVelocity") then rootPart.BodyVelocity:Destroy() end
        if rootPart:FindFirstChild("BodyGyro") then rootPart.BodyGyro:Destroy() end
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end
end

-- Fly Toggle Button
local flyToggle = Instance.new("TextButton")
flyToggle.Size = UDim2.new(0, 200, 0, 30)
flyToggle.Position = UDim2.new(0, 10, 0, 10)
flyToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
flyToggle.Text = "Fly: OFF"
flyToggle.TextColor3 = Color3.fromRGB(255, 0, 0)
flyToggle.TextSize = 14
flyToggle.Parent = mainFrame

flyToggle.MouseButton1Click:Connect(function()
    toggleFly()
    flyToggle.Text = flying and "Fly: ON" or "Fly: OFF"
    flyToggle.TextColor3 = flying and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
end)

-- Fly Speed Slider
local flySpeedSlider = Instance.new("TextButton")
flySpeedSlider.Size = UDim2.new(0, 200, 0, 30)
flySpeedSlider.Position = UDim2.new(0, 10, 0, 50)
flySpeedSlider.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
flySpeedSlider.Text = "Fly Speed: " .. flySpeed
flySpeedSlider.TextColor3 = Color3.fromRGB(255, 255, 255)
flySpeedSlider.TextSize = 14
flySpeedSlider.Parent = mainFrame

flySpeedSlider.MouseButton1Click:Connect(function()
    flySpeed = (flySpeed % 100) + 1
    flySpeedSlider.Text = "Fly Speed: " .. flySpeed
end)

-- No-Clip Implementation
local noClip = false
local function toggleNoClip()
    noClip = not noClip
    RunService.Stepped:Connect(function()
        if noClip then
            for _, part in pairs(character:GetChildren()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end
    end)
end

-- No-Clip Toggle Button
local noClipToggle = Instance.new("TextButton")
noClipToggle.Size = UDim2.new(0, 200, 0, 30)
noClipToggle.Position = UDim2.new(0, 10, 0, 90)
noClipToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
noClipToggle.Text = "No-Clip: OFF"
noClipToggle.TextColor3 = Color3.fromRGB(255, 0, 0)
noClipToggle.TextSize = 14
noClipToggle.Parent = mainFrame

noClipToggle.MouseButton1Click:Connect(function()
    toggleNoClip()
    noClipToggle.Text = noClip and "No-Clip: ON" or "No-Clip: OFF"
    noClipToggle.TextColor3 = noClip and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
end)

print("Optimized GUI loaded with Fly, Speed Slider, and No-Clip Toggle!")
