-- Nettleware Alpha Script
local success, err = pcall(function()
    local RunService = game:GetService("RunService")
    local UserInputService = game:GetService("UserInputService")
    local PlayersService = game:GetService("Players")
    local TweenService = game:GetService("TweenService")
    local Camera = workspace.CurrentCamera
    local LocalPlayer = PlayersService.LocalPlayer
    local settings = {
        flyEnabled = false,
        flySpeed = 75,
        noClipEnabled = false,
        infiniteJumpEnabled = false,
        speedEnabled = false,
        speedMultiplier = 1.0,
        saveLastPositionEnabled = false,
        espToggles = {Box = false, Name = false, Speed = false, HealthBar = false, Tracer = false, Skeleton = false, Box3D = false},
        fullbrightEnabled = false,
        keyBinds = {},
        guiBind = Enum.KeyCode.Q,
        playerListEnabled = false,
        unbindAll = false
    }

    -- Placeholder for saveSettings (implement file I/O if needed)
    local function saveSettings()
        print("Settings saved: " .. table.concat({settings.flyEnabled, settings.flySpeed, settings.noClipEnabled, settings.infiniteJumpEnabled, settings.speedEnabled, settings.speedMultiplier, settings.saveLastPositionEnabled}, ", "))
    end

    local function getCharacter()
        return LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    end

    local lastPosition = nil
    local bindingFeature = nil
    local controlSpeed = 10000 -- For fly logic

    -- GUI Setup
    local NettlewareGui = Instance.new("ScreenGui")
    NettlewareGui.Name = "NettlewareGui"
    NettlewareGui.ResetOnSpawn = false
    NettlewareGui.IgnoreGuiInset = true
    local successGui, errGui = pcall(function()
        NettlewareGui.Parent = game:GetService("CoreGui")
    end)
    if not successGui then
        warn("Failed to parent NettlewareGui to CoreGui: " .. tostring(errGui))
        NettlewareGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
        print("Falling back to PlayerGui for NettlewareGui parenting.")
    end

    local MainFrame = Instance.new("Frame")
    MainFrame.Size = UDim2.new(0, 300, 0, 400)
    MainFrame.Position = UDim2.new(0.5, -150, 0, -200)
    MainFrame.BackgroundColor3 = Color3.fromRGB(0, 40, 80)
    MainFrame.BackgroundTransparency = 0
    MainFrame.BorderSizePixel = 0
    MainFrame.Visible = false
    MainFrame.Parent = NettlewareGui

    local TitleBar = Instance.new("TextLabel")
    TitleBar.Size = UDim2.new(1, 0, 0, 30)
    TitleBar.BackgroundColor3 = Color3.fromRGB(0, 70, 140)
    TitleBar.Text = "Nettleware Alpha"
    TitleBar.TextColor3 = Color3.fromRGB(0, 200, 255)
    TitleBar.Font = Enum.Font.SourceSansBold
    TitleBar.TextSize = 18
    TitleBar.Parent = MainFrame

    local TabFrame = Instance.new("Frame")
    TabFrame.Size = UDim2.new(1, 0, 0, 30)
    TabFrame.Position = UDim2.new(0, 0, 0, 30)
    TabFrame.BackgroundColor3 = Color3.fromRGB(0, 60, 120)
    TabFrame.BorderSizePixel = 0
    TabFrame.Parent = MainFrame

    local TabButtons = {
        Aimbot = Instance.new("TextButton"),
        Visuals = Instance.new("TextButton"),
        Exploits = Instance.new("TextButton"),
        Settings = Instance.new("TextButton")
    }

    local tabContents = {
        Aimbot = Instance.new("Frame"),
        Visuals = Instance.new("Frame"),
        Exploits = Instance.new("Frame"),
        Settings = Instance.new("Frame")
    }

    for name, button in pairs(TabButtons) do
        button.Size = UDim2.new(0, 75, 1, 0)
        button.Position = UDim2.new(0, (75 * (table.find({"Aimbot", "Visuals", "Exploits", "Settings"}, name) - 1)), 0, 0)
        button.BackgroundColor3 = Color3.fromRGB(0, 50, 100)
        button.Text = name
        button.TextColor3 = Color3.fromRGB(0, 200, 255)
        button.Font = Enum.Font.SourceSans
        button.TextSize = 14
        button.Parent = TabFrame
    end

    for name, frame in pairs(tabContents) do
        frame.Size = UDim2.new(0, 300, 0, 340)
        frame.Position = UDim2.new(0.5, -150, 0, 130)
        frame.BackgroundTransparency = 1
        frame.Visible = false
        frame.Parent = MainFrame
    end

    local currentTab = nil

    local function switchTab(tabName)
        if currentTab then
            tabContents[currentTab].Visible = false
            local slideOut = TweenService:Create(tabContents[currentTab], TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Position = UDim2.new(0.5, -150, 0, 130)})
            slideOut:Play()
        end
        currentTab = tabName
        tabContents[tabName].Visible = true
        local slideIn = TweenService:Create(tabContents[tabName], TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Position = UDim2.new(0.5, -150, 0, 130)})
        slideIn:Play()
    end

    TabButtons.Aimbot.MouseButton1Click:Connect(function() switchTab("Aimbot") end)
    TabButtons.Visuals.MouseButton1Click:Connect(function() switchTab("Visuals") end)
    TabButtons.Exploits.MouseButton1Click:Connect(function() switchTab("Exploits") end)
    TabButtons.Settings.MouseButton1Click:Connect(function() switchTab("Settings") end)

    -- Aimbot Tab Content
    local aimbotEnabled = false
    local aimbotBone = "Head"
    local smoothAiming = false
    local smoothness = 0.1
    local fovCircleEnabled = false
    local fovRadius = 100
    local teamCheckEnabled = false
    local deadCheckEnabled = false

    local baseYAimbot = 10
    local CategoryLabelAimbot = Instance.new("TextLabel")
    CategoryLabelAimbot.Size = UDim2.new(0, 280, 0, 30)
    CategoryLabelAimbot.Position = UDim2.new(0, 10, 0, baseYAimbot)
    CategoryLabelAimbot.Text = "— Aimbot —"
    CategoryLabelAimbot.TextColor3 = Color3.fromRGB(0, 200, 255)
    CategoryLabelAimbot.BackgroundTransparency = 1
    CategoryLabelAimbot.Font = Enum.Font.SourceSansBold
    CategoryLabelAimbot.TextSize = 18
    CategoryLabelAimbot.Parent = tabContents["Aimbot"]
    print("Aimbot category label created at Y: " .. baseYAimbot)

    local yOffsetAimbot = baseYAimbot + 40
    local AimbotToggle = Instance.new("TextButton")
    AimbotToggle.Size = UDim2.new(0, 240, 0, 30)
    AimbotToggle.Position = UDim2.new(0, 10, 0, yOffsetAimbot)
    AimbotToggle.Text = "☐ Aimbot: " .. (aimbotEnabled and "ON" or "OFF")
    AimbotToggle.BackgroundTransparency = 1
    AimbotToggle.TextColor3 = aimbotEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    AimbotToggle.Font = Enum.Font.SourceSans
    AimbotToggle.TextSize = 16
    AimbotToggle.Parent = tabContents["Aimbot"]
    print("Aimbot toggle created at Y: " .. yOffsetAimbot)

    local AimbotBindSquare = Instance.new("TextButton")
    AimbotBindSquare.Size = UDim2.new(0, 30, 0, 30)
    AimbotBindSquare.Position = UDim2.new(0, 260, 0, yOffsetAimbot)
    AimbotBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    AimbotBindSquare.Text = settings.keyBinds.Aimbot and settings.keyBinds.Aimbot.Name or "Bind"
    AimbotBindSquare.BackgroundTransparency = 0
    AimbotBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    AimbotBindSquare.Font = Enum.Font.SourceSans
    AimbotBindSquare.TextSize = 12
    AimbotBindSquare.Parent = tabContents["Aimbot"]

    local AimbotUnbindButton = Instance.new("TextButton")
    AimbotUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    AimbotUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetAimbot)
    AimbotUnbindButton.Text = "Unbind"
    AimbotUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    AimbotUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    AimbotUnbindButton.Font = Enum.Font.SourceSans
    AimbotUnbindButton.TextSize = 12
    AimbotUnbindButton.Parent = tabContents["Aimbot"]

    yOffsetAimbot = yOffsetAimbot + 40
    local AimbotBoneLabel = Instance.new("TextLabel")
    AimbotBoneLabel.Size = UDim2.new(0, 280, 0, 30)
    AimbotBoneLabel.Position = UDim2.new(0, 10, 0, yOffsetAimbot)
    AimbotBoneLabel.Text = "Bone: " .. aimbotBone
    AimbotBoneLabel.BackgroundTransparency = 1
    AimbotBoneLabel.TextColor3 = Color3.fromRGB(0, 200, 255)
    AimbotBoneLabel.Font = Enum.Font.SourceSans
    AimbotBoneLabel.TextSize = 16
    AimbotBoneLabel.Parent = tabContents["Aimbot"]
    print("AimbotBone label created at Y: " .. yOffsetAimbot)

    local AimbotBoneDropdown = Instance.new("TextButton")
    AimbotBoneDropdown.Size = UDim2.new(0, 100, 0, 20)
    AimbotBoneDropdown.Position = UDim2.new(0, 180, 0, yOffsetAimbot + 5)
    AimbotBoneDropdown.Text = "Change"
    AimbotBoneDropdown.BackgroundColor3 = Color3.fromRGB(0, 70, 140)
    AimbotBoneDropdown.TextColor3 = Color3.fromRGB(0, 200, 255)
    AimbotBoneDropdown.Font = Enum.Font.SourceSans
    AimbotBoneDropdown.TextSize = 14
    AimbotBoneDropdown.Parent = tabContents["Aimbot"]

    yOffsetAimbot = yOffsetAimbot + 40
    local SmoothnessToggle = Instance.new("TextButton")
    SmoothnessToggle.Size = UDim2.new(0, 240, 0, 30)
    SmoothnessToggle.Position = UDim2.new(0, 10, 0, yOffsetAimbot)
    SmoothnessToggle.Text = "☐ Smoothness: " .. (smoothAiming and "ON" or "OFF")
    SmoothnessToggle.BackgroundTransparency = 1
    SmoothnessToggle.TextColor3 = smoothAiming and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    SmoothnessToggle.Font = Enum.Font.SourceSans
    SmoothnessToggle.TextSize = 16
    SmoothnessToggle.Parent = tabContents["Aimbot"]
    print("Smoothness toggle created at Y: " .. yOffsetAimbot)

    local SmoothnessBindSquare = Instance.new("TextButton")
    SmoothnessBindSquare.Size = UDim2.new(0, 30, 0, 30)
    SmoothnessBindSquare.Position = UDim2.new(0, 260, 0, yOffsetAimbot)
    SmoothnessBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    SmoothnessBindSquare.Text = settings.keyBinds.Smoothness and settings.keyBinds.Smoothness.Name or "Bind"
    SmoothnessBindSquare.BackgroundTransparency = 0
    SmoothnessBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    SmoothnessBindSquare.Font = Enum.Font.SourceSans
    SmoothnessBindSquare.TextSize = 12
    SmoothnessBindSquare.Parent = tabContents["Aimbot"]

    local SmoothnessUnbindButton = Instance.new("TextButton")
    SmoothnessUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    SmoothnessUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetAimbot)
    SmoothnessUnbindButton.Text = "Unbind"
    SmoothnessUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    SmoothnessUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    SmoothnessUnbindButton.Font = Enum.Font.SourceSans
    SmoothnessUnbindButton.TextSize = 12
    SmoothnessUnbindButton.Parent = tabContents["Aimbot"]

    yOffsetAimbot = yOffsetAimbot + 40
    local SmoothnessLabel = Instance.new("TextLabel")
    SmoothnessLabel.Size = UDim2.new(0, 280, 0, 30)
    SmoothnessLabel.Position = UDim2.new(0, 10, 0, yOffsetAimbot)
    SmoothnessLabel.Text = "Smoothness: " .. smoothness
    SmoothnessLabel.BackgroundTransparency = 1
    SmoothnessLabel.TextColor3 = Color3.fromRGB(0, 200, 255)
    SmoothnessLabel.Font = Enum.Font.SourceSans
    SmoothnessLabel.TextSize = 16
    SmoothnessLabel.Parent = tabContents["Aimbot"]
    print("Smoothness label created at Y: " .. yOffsetAimbot)

    yOffsetAimbot = yOffsetAimbot + 40
    local SmoothnessSlider = Instance.new("TextButton")
    SmoothnessSlider.Size = UDim2.new(0, 280, 0, 10)
    SmoothnessSlider.Position = UDim2.new(0, 10, 0, yOffsetAimbot)
    SmoothnessSlider.Text = ""
    SmoothnessSlider.BackgroundColor3 = Color3.fromRGB(0, 70, 140)
    SmoothnessSlider.BackgroundTransparency = 0
    SmoothnessSlider.Parent = tabContents["Aimbot"]
    print("Smoothness slider created at Y: " .. yOffsetAimbot)

    local SmoothnessKnob = Instance.new("Frame")
    SmoothnessKnob.Size = UDim2.new(0, 20, 1, 0)
    SmoothnessKnob.Position = UDim2.new(smoothness, 0, 0, 0)
    SmoothnessKnob.BackgroundColor3 = Color3.fromRGB(0, 200, 255)
    SmoothnessKnob.BackgroundTransparency = 0
    SmoothnessKnob.BorderSizePixel = 0
    SmoothnessKnob.Parent = SmoothnessSlider

    yOffsetAimbot = yOffsetAimbot + 40
    local FovCircleToggle = Instance.new("TextButton")
    FovCircleToggle.Size = UDim2.new(0, 240, 0, 30)
    FovCircleToggle.Position = UDim2.new(0, 10, 0, yOffsetAimbot)
    FovCircleToggle.Text = "☐ FOV Circle: " .. (fovCircleEnabled and "ON" or "OFF")
    FovCircleToggle.BackgroundTransparency = 1
    FovCircleToggle.TextColor3 = fovCircleEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    FovCircleToggle.Font = Enum.Font.SourceSans
    FovCircleToggle.TextSize = 16
    FovCircleToggle.Parent = tabContents["Aimbot"]
    print("FovCircle toggle created at Y: " .. yOffsetAimbot)

    local FovCircleBindSquare = Instance.new("TextButton")
    FovCircleBindSquare.Size = UDim2.new(0, 30, 0, 30)
    FovCircleBindSquare.Position = UDim2.new(0, 260, 0, yOffsetAimbot)
    FovCircleBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    FovCircleBindSquare.Text = settings.keyBinds.FovCircle and settings.keyBinds.FovCircle.Name or "Bind"
    FovCircleBindSquare.BackgroundTransparency = 0
    FovCircleBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    FovCircleBindSquare.Font = Enum.Font.SourceSans
    FovCircleBindSquare.TextSize = 12
    FovCircleBindSquare.Parent = tabContents["Aimbot"]

    local FovCircleUnbindButton = Instance.new("TextButton")
    FovCircleUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    FovCircleUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetAimbot)
    FovCircleUnbindButton.Text = "Unbind"
    FovCircleUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    FovCircleUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    FovCircleUnbindButton.Font = Enum.Font.SourceSans
    FovCircleUnbindButton.TextSize = 12
    FovCircleUnbindButton.Parent = tabContents["Aimbot"]

    yOffsetAimbot = yOffsetAimbot + 40
    local FovCircleLabel = Instance.new("TextLabel")
    FovCircleLabel.Size = UDim2.new(0, 280, 0, 30)
    FovCircleLabel.Position = UDim2.new(0, 10, 0, yOffsetAimbot)
    FovCircleLabel.Text = "FOV Radius: " .. fovRadius
    FovCircleLabel.BackgroundTransparency = 1
    FovCircleLabel.TextColor3 = Color3.fromRGB(0, 200, 255)
    FovCircleLabel.Font = Enum.Font.SourceSans
    FovCircleLabel.TextSize = 16
    FovCircleLabel.Parent = tabContents["Aimbot"]
    print("FovCircle label created at Y: " .. yOffsetAimbot)

    yOffsetAimbot = yOffsetAimbot + 40
    local FovCircleSlider = Instance.new("TextButton")
    FovCircleSlider.Size = UDim2.new(0, 280, 0, 10)
    FovCircleSlider.Position = UDim2.new(0, 10, 0, yOffsetAimbot)
    FovCircleSlider.Text = ""
    FovCircleSlider.BackgroundColor3 = Color3.fromRGB(0, 70, 140)
    FovCircleSlider.BackgroundTransparency = 0
    FovCircleSlider.Parent = tabContents["Aimbot"]
    print("FovCircle slider created at Y: " .. yOffsetAimbot)

    local FovCircleKnob = Instance.new("Frame")
    FovCircleKnob.Size = UDim2.new(0, 20, 1, 0)
    FovCircleKnob.Position = UDim2.new((fovRadius - 50) / 150, 0, 0, 0)
    FovCircleKnob.BackgroundColor3 = Color3.fromRGB(0, 200, 255)
    FovCircleKnob.BackgroundTransparency = 0
    FovCircleKnob.BorderSizePixel = 0
    FovCircleKnob.Parent = FovCircleSlider

    yOffsetAimbot = yOffsetAimbot + 40
    local TeamCheckToggle = Instance.new("TextButton")
    TeamCheckToggle.Size = UDim2.new(0, 240, 0, 30)
    TeamCheckToggle.Position = UDim2.new(0, 10, 0, yOffsetAimbot)
    TeamCheckToggle.Text = "☐ Team Check: " .. (teamCheckEnabled and "ON" or "OFF")
    TeamCheckToggle.BackgroundTransparency = 1
    TeamCheckToggle.TextColor3 = teamCheckEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    TeamCheckToggle.Font = Enum.Font.SourceSans
    TeamCheckToggle.TextSize = 16
    TeamCheckToggle.Parent = tabContents["Aimbot"]
    print("TeamCheck toggle created at Y: " .. yOffsetAimbot)

    local TeamCheckBindSquare = Instance.new("TextButton")
    TeamCheckBindSquare.Size = UDim2.new(0, 30, 0, 30)
    TeamCheckBindSquare.Position = UDim2.new(0, 260, 0, yOffsetAimbot)
    TeamCheckBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    TeamCheckBindSquare.Text = settings.keyBinds.TeamCheck and settings.keyBinds.TeamCheck.Name or "Bind"
    TeamCheckBindSquare.BackgroundTransparency = 0
    TeamCheckBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    TeamCheckBindSquare.Font = Enum.Font.SourceSans
    TeamCheckBindSquare.TextSize = 12
    TeamCheckBindSquare.Parent = tabContents["Aimbot"]

    local TeamCheckUnbindButton = Instance.new("TextButton")
    TeamCheckUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    TeamCheckUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetAimbot)
    TeamCheckUnbindButton.Text = "Unbind"
    TeamCheckUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    TeamCheckUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    TeamCheckUnbindButton.Font = Enum.Font.SourceSans
    TeamCheckUnbindButton.TextSize = 12
    TeamCheckUnbindButton.Parent = tabContents["Aimbot"]

    yOffsetAimbot = yOffsetAimbot + 40
    local DeadCheckToggle = Instance.new("TextButton")
    DeadCheckToggle.Size = UDim2.new(0, 240, 0, 30)
    DeadCheckToggle.Position = UDim2.new(0, 10, 0, yOffsetAimbot)
    DeadCheckToggle.Text = "☐ Dead Check: " .. (deadCheckEnabled and "ON" or "OFF")
    DeadCheckToggle.BackgroundTransparency = 1
    DeadCheckToggle.TextColor3 = deadCheckEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    DeadCheckToggle.Font = Enum.Font.SourceSans
    DeadCheckToggle.TextSize = 16
    DeadCheckToggle.Parent = tabContents["Aimbot"]
    print("DeadCheck toggle created at Y: " .. yOffsetAimbot)

    local DeadCheckBindSquare = Instance.new("TextButton")
    DeadCheckBindSquare.Size = UDim2.new(0, 30, 0, 30)
    DeadCheckBindSquare.Position = UDim2.new(0, 260, 0, yOffsetAimbot)
    DeadCheckBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    DeadCheckBindSquare.Text = settings.keyBinds.DeadCheck and settings.keyBinds.DeadCheck.Name or "Bind"
    DeadCheckBindSquare.BackgroundTransparency = 0
    DeadCheckBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    DeadCheckBindSquare.Font = Enum.Font.SourceSans
    DeadCheckBindSquare.TextSize = 12
    DeadCheckBindSquare.Parent = tabContents["Aimbot"]

    local DeadCheckUnbindButton = Instance.new("TextButton")
    DeadCheckUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    DeadCheckUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetAimbot)
    DeadCheckUnbindButton.Text = "Unbind"
    DeadCheckUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    DeadCheckUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    DeadCheckUnbindButton.Font = Enum.Font.SourceSans
    DeadCheckUnbindButton.TextSize = 12
    DeadCheckUnbindButton.Parent = tabContents["Aimbot"]

    -- Visuals Tab Content
    local espToggles = settings.espToggles
    local fullbrightEnabled = settings.fullbrightEnabled
    local espPlayers = {}
    local lastPositions = {}

    local baseYVisuals = 10
    local CategoryLabelVisuals = Instance.new("TextLabel")
    CategoryLabelVisuals.Size = UDim2.new(0, 280, 0, 30)
    CategoryLabelVisuals.Position = UDim2.new(0, 10, 0, baseYVisuals)
    CategoryLabelVisuals.Text = "— Visuals —"
    CategoryLabelVisuals.TextColor3 = Color3.fromRGB(0, 200, 255)
    CategoryLabelVisuals.BackgroundTransparency = 1
    CategoryLabelVisuals.Font = Enum.Font.SourceSansBold
    CategoryLabelVisuals.TextSize = 18
    CategoryLabelVisuals.Parent = tabContents["Visuals"]
    print("Visuals category label created at Y: " .. baseYVisuals)

    local yOffsetVisuals = baseYVisuals + 40
    local BoxToggle = Instance.new("TextButton")
    BoxToggle.Size = UDim2.new(0, 240, 0, 30)
    BoxToggle.Position = UDim2.new(0, 10, 0, yOffsetVisuals)
    BoxToggle.Text = "☐ Box ESP: " .. (espToggles.Box and "ON" or "OFF")
    BoxToggle.BackgroundTransparency = 1
    BoxToggle.TextColor3 = espToggles.Box and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    BoxToggle.Font = Enum.Font.SourceSans
    BoxToggle.TextSize = 16
    BoxToggle.Parent = tabContents["Visuals"]
    print("Box toggle created at Y: " .. yOffsetVisuals)

    local BoxBindSquare = Instance.new("TextButton")
    BoxBindSquare.Size = UDim2.new(0, 30, 0, 30)
    BoxBindSquare.Position = UDim2.new(0, 260, 0, yOffsetVisuals)
    BoxBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    BoxBindSquare.Text = settings.keyBinds.Box and settings.keyBinds.Box.Name or "Bind"
    BoxBindSquare.BackgroundTransparency = 0
    BoxBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    BoxBindSquare.Font = Enum.Font.SourceSans
    BoxBindSquare.TextSize = 12
    BoxBindSquare.Parent = tabContents["Visuals"]

    local BoxUnbindButton = Instance.new("TextButton")
    BoxUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    BoxUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetVisuals)
    BoxUnbindButton.Text = "Unbind"
    BoxUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    BoxUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    BoxUnbindButton.Font = Enum.Font.SourceSans
    BoxUnbindButton.TextSize = 12
    BoxUnbindButton.Parent = tabContents["Visuals"]

    yOffsetVisuals = yOffsetVisuals + 40
    local NameToggle = Instance.new("TextButton")
    NameToggle.Size = UDim2.new(0, 240, 0, 30)
    NameToggle.Position = UDim2.new(0, 10, 0, yOffsetVisuals)
    NameToggle.Text = "☐ Name ESP: " .. (espToggles.Name and "ON" or "OFF")
    NameToggle.BackgroundTransparency = 1
    NameToggle.TextColor3 = espToggles.Name and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    NameToggle.Font = Enum.Font.SourceSans
    NameToggle.TextSize = 16
    NameToggle.Parent = tabContents["Visuals"]
    print("Name toggle created at Y: " .. yOffsetVisuals)

    local NameBindSquare = Instance.new("TextButton")
    NameBindSquare.Size = UDim2.new(0, 30, 0, 30)
    NameBindSquare.Position = UDim2.new(0, 260, 0, yOffsetVisuals)
    NameBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    NameBindSquare.Text = settings.keyBinds.Name and settings.keyBinds.Name.Name or "Bind"
    NameBindSquare.BackgroundTransparency = 0
    NameBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    NameBindSquare.Font = Enum.Font.SourceSans
    NameBindSquare.TextSize = 12
    NameBindSquare.Parent = tabContents["Visuals"]

    local NameUnbindButton = Instance.new("TextButton")
    NameUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    NameUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetVisuals)
    NameUnbindButton.Text = "Unbind"
    NameUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    NameUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    NameUnbindButton.Font = Enum.Font.SourceSans
    NameUnbindButton.TextSize = 12
    NameUnbindButton.Parent = tabContents["Visuals"]

    yOffsetVisuals = yOffsetVisuals + 40
    local SpeedToggleVisual = Instance.new("TextButton")
    SpeedToggleVisual.Size = UDim2.new(0, 240, 0, 30)
    SpeedToggleVisual.Position = UDim2.new(0, 10, 0, yOffsetVisuals)
    SpeedToggleVisual.Text = "☐ Speed ESP: " .. (espToggles.Speed and "ON" or "OFF")
    SpeedToggleVisual.BackgroundTransparency = 1
    SpeedToggleVisual.TextColor3 = espToggles.Speed and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    SpeedToggleVisual.Font = Enum.Font.SourceSans
    SpeedToggleVisual.TextSize = 16
    SpeedToggleVisual.Parent = tabContents["Visuals"]
    print("Speed toggle created at Y: " .. yOffsetVisuals)

    local SpeedBindSquareVisual = Instance.new("TextButton")
    SpeedBindSquareVisual.Size = UDim2.new(0, 30, 0, 30)
    SpeedBindSquareVisual.Position = UDim2.new(0, 260, 0, yOffsetVisuals)
    SpeedBindSquareVisual.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    SpeedBindSquareVisual.Text = settings.keyBinds.SpeedVisual and settings.keyBinds.SpeedVisual.Name or "Bind"
    SpeedBindSquareVisual.BackgroundTransparency = 0
    SpeedBindSquareVisual.TextColor3 = Color3.fromRGB(0, 200, 255)
    SpeedBindSquareVisual.Font = Enum.Font.SourceSans
    SpeedBindSquareVisual.TextSize = 12
    SpeedBindSquareVisual.Parent = tabContents["Visuals"]

    local SpeedUnbindButtonVisual = Instance.new("TextButton")
    SpeedUnbindButtonVisual.Size = UDim2.new(0, 50, 0, 30)
    SpeedUnbindButtonVisual.Position = UDim2.new(0, 300, 0, yOffsetVisuals)
    SpeedUnbindButtonVisual.Text = "Unbind"
    SpeedUnbindButtonVisual.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    SpeedUnbindButtonVisual.TextColor3 = Color3.fromRGB(255, 0, 0)
    SpeedUnbindButtonVisual.Font = Enum.Font.SourceSans
    SpeedUnbindButtonVisual.TextSize = 12
    SpeedUnbindButtonVisual.Parent = tabContents["Visuals"]

    yOffsetVisuals = yOffsetVisuals + 40
    local HealthBarToggle = Instance.new("TextButton")
    HealthBarToggle.Size = UDim2.new(0, 240, 0, 30)
    HealthBarToggle.Position = UDim2.new(0, 10, 0, yOffsetVisuals)
    HealthBarToggle.Text = "☐ HealthBar ESP: " .. (espToggles.HealthBar and "ON" or "OFF")
    HealthBarToggle.BackgroundTransparency = 1
    HealthBarToggle.TextColor3 = espToggles.HealthBar and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    HealthBarToggle.Font = Enum.Font.SourceSans
    HealthBarToggle.TextSize = 16
    HealthBarToggle.Parent = tabContents["Visuals"]
    print("HealthBar toggle created at Y: " .. yOffsetVisuals)

    local HealthBarBindSquare = Instance.new("TextButton")
    HealthBarBindSquare.Size = UDim2.new(0, 30, 0, 30)
    HealthBarBindSquare.Position = UDim2.new(0, 260, 0, yOffsetVisuals)
    HealthBarBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    HealthBarBindSquare.Text = settings.keyBinds.HealthBar and settings.keyBinds.HealthBar.Name or "Bind"
    HealthBarBindSquare.BackgroundTransparency = 0
    HealthBarBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    HealthBarBindSquare.Font = Enum.Font.SourceSans
    HealthBarBindSquare.TextSize = 12
    HealthBarBindSquare.Parent = tabContents["Visuals"]

    local HealthBarUnbindButton = Instance.new("TextButton")
    HealthBarUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    HealthBarUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetVisuals)
    HealthBarUnbindButton.Text = "Unbind"
    HealthBarUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    HealthBarUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    HealthBarUnbindButton.Font = Enum.Font.SourceSans
    HealthBarUnbindButton.TextSize = 12
    HealthBarUnbindButton.Parent = tabContents["Visuals"]

    yOffsetVisuals = yOffsetVisuals + 40
    local TracerToggle = Instance.new("TextButton")
    TracerToggle.Size = UDim2.new(0, 240, 0, 30)
    TracerToggle.Position = UDim2.new(0, 10, 0, yOffsetVisuals)
    TracerToggle.Text = "☐ Tracer ESP: " .. (espToggles.Tracer and "ON" or "OFF")
    TracerToggle.BackgroundTransparency = 1
    TracerToggle.TextColor3 = espToggles.Tracer and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    TracerToggle.Font = Enum.Font.SourceSans
    TracerToggle.TextSize = 16
    TracerToggle.Parent = tabContents["Visuals"]
    print("Tracer toggle created at Y: " .. yOffsetVisuals)

    local TracerBindSquare = Instance.new("TextButton")
    TracerBindSquare.Size = UDim2.new(0, 30, 0, 30)
    TracerBindSquare.Position = UDim2.new(0, 260, 0, yOffsetVisuals)
    TracerBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    TracerBindSquare.Text = settings.keyBinds.Tracer and settings.keyBinds.Tracer.Name or "Bind"
    TracerBindSquare.BackgroundTransparency = 0
    TracerBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    TracerBindSquare.Font = Enum.Font.SourceSans
    TracerBindSquare.TextSize = 12
    TracerBindSquare.Parent = tabContents["Visuals"]

    local TracerUnbindButton = Instance.new("TextButton")
    TracerUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    TracerUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetVisuals)
    TracerUnbindButton.Text = "Unbind"
    TracerUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    TracerUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    TracerUnbindButton.Font = Enum.Font.SourceSans
    TracerUnbindButton.TextSize = 12
    TracerUnbindButton.Parent = tabContents["Visuals"]

    yOffsetVisuals = yOffsetVisuals + 40
    local SkeletonToggle = Instance.new("TextButton")
    SkeletonToggle.Size = UDim2.new(0, 240, 0, 30)
    SkeletonToggle.Position = UDim2.new(0, 10, 0, yOffsetVisuals)
    SkeletonToggle.Text = "☐ Skeleton ESP: " .. (espToggles.Skeleton and "ON" or "OFF")
    SkeletonToggle.BackgroundTransparency = 1
    SkeletonToggle.TextColor3 = espToggles.Skeleton and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    SkeletonToggle.Font = Enum.Font.SourceSans
    SkeletonToggle.TextSize = 16
    SkeletonToggle.Parent = tabContents["Visuals"]
    print("Skeleton toggle created at Y: " .. yOffsetVisuals)

    local SkeletonBindSquare = Instance.new("TextButton")
    SkeletonBindSquare.Size = UDim2.new(0, 30, 0, 30)
    SkeletonBindSquare.Position = UDim2.new(0, 260, 0, yOffsetVisuals)
    SkeletonBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    SkeletonBindSquare.Text = settings.keyBinds.Skeleton and settings.keyBinds.Skeleton.Name or "Bind"
    SkeletonBindSquare.BackgroundTransparency = 0
    SkeletonBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    SkeletonBindSquare.Font = Enum.Font.SourceSans
    SkeletonBindSquare.TextSize = 12
    SkeletonBindSquare.Parent = tabContents["Visuals"]

    local SkeletonUnbindButton = Instance.new("TextButton")
    SkeletonUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    SkeletonUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetVisuals)
    SkeletonUnbindButton.Text = "Unbind"
    SkeletonUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    SkeletonUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    SkeletonUnbindButton.Font = Enum.Font.SourceSans
    SkeletonUnbindButton.TextSize = 12
    SkeletonUnbindButton.Parent = tabContents["Visuals"]

    yOffsetVisuals = yOffsetVisuals + 40
    local Box3DToggle = Instance.new("TextButton")
    Box3DToggle.Size = UDim2.new(0, 240, 0, 30)
    Box3DToggle.Position = UDim2.new(0, 10, 0, yOffsetVisuals)
    Box3DToggle.Text = "☐ 3D Box ESP: " .. (espToggles.Box3D and "ON" or "OFF")
    Box3DToggle.BackgroundTransparency = 1
    Box3DToggle.TextColor3 = espToggles.Box3D and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    Box3DToggle.Font = Enum.Font.SourceSans
    Box3DToggle.TextSize = 16
    Box3DToggle.Parent = tabContents["Visuals"]
    print("Box3D toggle created at Y: " .. yOffsetVisuals)

    local Box3DBindSquare = Instance.new("TextButton")
    Box3DBindSquare.Size = UDim2.new(0, 30, 0, 30)
    Box3DBindSquare.Position = UDim2.new(0, 260, 0, yOffsetVisuals)
    Box3DBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    Box3DBindSquare.Text = settings.keyBinds.Box3D and settings.keyBinds.Box3D.Name or "Bind"
    Box3DBindSquare.BackgroundTransparency = 0
    Box3DBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    Box3DBindSquare.Font = Enum.Font.SourceSans
    Box3DBindSquare.TextSize = 12
    Box3DBindSquare.Parent = tabContents["Visuals"]

    local Box3DUnbindButton = Instance.new("TextButton")
    Box3DUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    Box3DUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetVisuals)
    Box3DUnbindButton.Text = "Unbind"
    Box3DUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    Box3DUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    Box3DUnbindButton.Font = Enum.Font.SourceSans
    Box3DUnbindButton.TextSize = 12
    Box3DUnbindButton.Parent = tabContents["Visuals"]

    yOffsetVisuals = yOffsetVisuals + 40
    local FullbrightToggle = Instance.new("TextButton")
    FullbrightToggle.Size = UDim2.new(0, 240, 0, 30)
    FullbrightToggle.Position = UDim2.new(0, 10, 0, yOffsetVisuals)
    FullbrightToggle.Text = "☐ Fullbright: " .. (fullbrightEnabled and "ON" or "OFF")
    FullbrightToggle.BackgroundTransparency = 1
    FullbrightToggle.TextColor3 = fullbrightEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    FullbrightToggle.Font = Enum.Font.SourceSans
    FullbrightToggle.TextSize = 16
    FullbrightToggle.Parent = tabContents["Visuals"]
    print("Fullbright toggle created at Y: " .. yOffsetVisuals)

    local FullbrightBindSquare = Instance.new("TextButton")
    FullbrightBindSquare.Size = UDim2.new(0, 30, 0, 30)
    FullbrightBindSquare.Position = UDim2.new(0, 260, 0, yOffsetVisuals)
    FullbrightBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    FullbrightBindSquare.Text = settings.keyBinds.Fullbright and settings.keyBinds.Fullbright.Name or "Bind"
    FullbrightBindSquare.BackgroundTransparency = 0
    FullbrightBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    FullbrightBindSquare.Font = Enum.Font.SourceSans
    FullbrightBindSquare.TextSize = 12
    FullbrightBindSquare.Parent = tabContents["Visuals"]

    local FullbrightUnbindButton = Instance.new("TextButton")
    FullbrightUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    FullbrightUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetVisuals)
    FullbrightUnbindButton.Text = "Unbind"
    FullbrightUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    FullbrightUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    FullbrightUnbindButton.Font = Enum.Font.SourceSans
    FullbrightUnbindButton.TextSize = 12
    FullbrightUnbindButton.Parent = tabContents["Visuals"]

    -- Exploits Tab Content
    local flyEnabled = settings.flyEnabled
    local flySpeed = settings.flySpeed
    local noClipEnabled = settings.noClipEnabled
    local infiniteJumpEnabled = settings.infiniteJumpEnabled
    local speedEnabled = settings.speedEnabled
    local speedMultiplier = settings.speedMultiplier
    local saveLastPositionEnabled = settings.saveLastPositionEnabled

    local baseYExploits = 10
    local CategoryLabelExploits = Instance.new("TextLabel")
    CategoryLabelExploits.Size = UDim2.new(0, 280, 0, 30)
    CategoryLabelExploits.Position = UDim2.new(0, 10, 0, baseYExploits)
    CategoryLabelExploits.Text = "— Exploits —"
    CategoryLabelExploits.TextColor3 = Color3.fromRGB(0, 200, 255)
    CategoryLabelExploits.BackgroundTransparency = 1
    CategoryLabelExploits.Font = Enum.Font.SourceSansBold
    CategoryLabelExploits.TextSize = 18
    CategoryLabelExploits.Parent = tabContents["Exploits"]
    print("Exploits category label created at Y: " .. baseYExploits)

    local yOffsetExploits = baseYExploits + 40
    local FlyToggle = Instance.new("TextButton")
    FlyToggle.Size = UDim2.new(0, 240, 0, 30)
    FlyToggle.Position = UDim2.new(0, 10, 0, yOffsetExploits)
    FlyToggle.Text = "☐ Fly: " .. (flyEnabled and "ON" or "OFF")
    FlyToggle.BackgroundTransparency = 1
    FlyToggle.TextColor3 = flyEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    FlyToggle.Font = Enum.Font.SourceSans
    FlyToggle.TextSize = 16
    FlyToggle.Parent = tabContents["Exploits"]
    print("Fly toggle created at Y: " .. yOffsetExploits)

    local FlyBindSquare = Instance.new("TextButton")
    FlyBindSquare.Size = UDim2.new(0, 30, 0, 30)
    FlyBindSquare.Position = UDim2.new(0, 260, 0, yOffsetExploits)
    FlyBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    FlyBindSquare.Text = settings.keyBinds.Fly and settings.keyBinds.Fly.Name or "Bind"
    FlyBindSquare.BackgroundTransparency = 0
    FlyBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    FlyBindSquare.Font = Enum.Font.SourceSans
    FlyBindSquare.TextSize = 12
    FlyBindSquare.Parent = tabContents["Exploits"]

    local FlyUnbindButton = Instance.new("TextButton")
    FlyUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    FlyUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetExploits)
    FlyUnbindButton.Text = "Unbind"
    FlyUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    FlyUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    FlyUnbindButton.Font = Enum.Font.SourceSans
    FlyUnbindButton.TextSize = 12
    FlyUnbindButton.Parent = tabContents["Exploits"]

    yOffsetExploits = yOffsetExploits + 40
    local FlySpeedLabel = Instance.new("TextLabel")
    FlySpeedLabel.Size = UDim2.new(0, 280, 0, 30)
    FlySpeedLabel.Position = UDim2.new(0, 10, 0, yOffsetExploits)
    FlySpeedLabel.Text = "Fly Speed: " .. flySpeed
    FlySpeedLabel.BackgroundTransparency = 1
    FlySpeedLabel.TextColor3 = Color3.fromRGB(0, 200, 255)
    FlySpeedLabel.Font = Enum.Font.SourceSans
    FlySpeedLabel.TextSize = 16
    FlySpeedLabel.Parent = tabContents["Exploits"]
    print("FlySpeed label created at Y: " .. yOffsetExploits)

    yOffsetExploits = yOffsetExploits + 40
    local FlySpeedSlider = Instance.new("TextButton")
    FlySpeedSlider.Size = UDim2.new(0, 280, 0, 10)
    FlySpeedSlider.Position = UDim2.new(0, 10, 0, yOffsetExploits)
    FlySpeedSlider.Text = ""
    FlySpeedSlider.BackgroundColor3 = Color3.fromRGB(0, 70, 140)
    FlySpeedSlider.BackgroundTransparency = 0
    FlySpeedSlider.Parent = tabContents["Exploits"]
    print("FlySpeed slider created at Y: " .. yOffsetExploits)

    local FlySpeedKnob = Instance.new("Frame")
    FlySpeedKnob.Size = UDim2.new(0, 20, 1, 0)
    FlySpeedKnob.Position = UDim2.new((flySpeed - 1) / 299, 0, 0, 0)
    FlySpeedKnob.BackgroundColor3 = Color3.fromRGB(0, 200, 255)
    FlySpeedKnob.BackgroundTransparency = 0
    FlySpeedKnob.BorderSizePixel = 0
    FlySpeedKnob.Parent = FlySpeedSlider

    yOffsetExploits = yOffsetExploits + 40
    local NoClipToggle = Instance.new("TextButton")
    NoClipToggle.Size = UDim2.new(0, 240, 0, 30)
    NoClipToggle.Position = UDim2.new(0, 10, 0, yOffsetExploits)
    NoClipToggle.Text = "☐ NoClip: " .. (noClipEnabled and "ON" or "OFF")
    NoClipToggle.BackgroundTransparency = 1
    NoClipToggle.TextColor3 = noClipEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    NoClipToggle.Font = Enum.Font.SourceSans
    NoClipToggle.TextSize = 16
    NoClipToggle.Parent = tabContents["Exploits"]
    print("NoClip toggle created at Y: " .. yOffsetExploits)

    local NoClipBindSquare = Instance.new("TextButton")
    NoClipBindSquare.Size = UDim2.new(0, 30, 0, 30)
    NoClipBindSquare.Position = UDim2.new(0, 260, 0, yOffsetExploits)
    NoClipBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    NoClipBindSquare.Text = settings.keyBinds.NoClip and settings.keyBinds.NoClip.Name or "Bind"
    NoClipBindSquare.BackgroundTransparency = 0
    NoClipBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    NoClipBindSquare.Font = Enum.Font.SourceSans
    NoClipBindSquare.TextSize = 12
    NoClipBindSquare.Parent = tabContents["Exploits"]

    local NoClipUnbindButton = Instance.new("TextButton")
    NoClipUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    NoClipUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetExploits)
    NoClipUnbindButton.Text = "Unbind"
    NoClipUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    NoClipUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    NoClipUnbindButton.Font = Enum.Font.SourceSans
    NoClipUnbindButton.TextSize = 12
    NoClipUnbindButton.Parent = tabContents["Exploits"]

    yOffsetExploits = yOffsetExploits + 40
    local InfiniteJumpToggle = Instance.new("TextButton")
    InfiniteJumpToggle.Size = UDim2.new(0, 240, 0, 30)
    InfiniteJumpToggle.Position = UDim2.new(0, 10, 0, yOffsetExploits)
    InfiniteJumpToggle.Text = "☐ Infinite Jump: " .. (infiniteJumpEnabled and "ON" or "OFF")
    InfiniteJumpToggle.BackgroundTransparency = 1
    InfiniteJumpToggle.TextColor3 = infiniteJumpEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    InfiniteJumpToggle.Font = Enum.Font.SourceSans
    InfiniteJumpToggle.TextSize = 16
    InfiniteJumpToggle.Parent = tabContents["Exploits"]
    print("InfiniteJump toggle created at Y: " .. yOffsetExploits)

    local InfiniteJumpBindSquare = Instance.new("TextButton")
    InfiniteJumpBindSquare.Size = UDim2.new(0, 30, 0, 30)
    InfiniteJumpBindSquare.Position = UDim2.new(0, 260, 0, yOffsetExploits)
    InfiniteJumpBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    InfiniteJumpBindSquare.Text = settings.keyBinds.InfiniteJump and settings.keyBinds.InfiniteJump.Name or "Bind"
    InfiniteJumpBindSquare.BackgroundTransparency = 0
    InfiniteJumpBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    InfiniteJumpBindSquare.Font = Enum.Font.SourceSans
    InfiniteJumpBindSquare.TextSize = 12
    InfiniteJumpBindSquare.Parent = tabContents["Exploits"]

    local InfiniteJumpUnbindButton = Instance.new("TextButton")
    InfiniteJumpUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    InfiniteJumpUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetExploits)
    InfiniteJumpUnbindButton.Text = "Unbind"
    InfiniteJumpUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    InfiniteJumpUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    InfiniteJumpUnbindButton.Font = Enum.Font.SourceSans
    InfiniteJumpUnbindButton.TextSize = 12
    InfiniteJumpUnbindButton.Parent = tabContents["Exploits"]

    yOffsetExploits = yOffsetExploits + 40
    local SpeedToggle = Instance.new("TextButton")
    SpeedToggle.Size = UDim2.new(0, 240, 0, 30)
    SpeedToggle.Position = UDim2.new(0, 10, 0, yOffsetExploits)
    SpeedToggle.Text = "☐ Speed: " .. (speedEnabled and "ON" or "OFF")
    SpeedToggle.BackgroundTransparency = 1
    SpeedToggle.TextColor3 = speedEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    SpeedToggle.Font = Enum.Font.SourceSans
    SpeedToggle.TextSize = 16
    SpeedToggle.Parent = tabContents["Exploits"]
    print("Speed toggle created at Y: " .. yOffsetExploits)

    local SpeedBindSquare = Instance.new("TextButton")
    SpeedBindSquare.Size = UDim2.new(0, 30, 0, 30)
    SpeedBindSquare.Position = UDim2.new(0, 260, 0, yOffsetExploits)
    SpeedBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    SpeedBindSquare.Text = settings.keyBinds.Speed and settings.keyBinds.Speed.Name or "Bind"
    SpeedBindSquare.BackgroundTransparency = 0
    SpeedBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    SpeedBindSquare.Font = Enum.Font.SourceSans
    SpeedBindSquare.TextSize = 12
    SpeedBindSquare.Parent = tabContents["Exploits"]

    local SpeedUnbindButton = Instance.new("TextButton")
    SpeedUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    SpeedUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetExploits)
    SpeedUnbindButton.Text = "Unbind"
    SpeedUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    SpeedUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    SpeedUnbindButton.Font = Enum.Font.SourceSans
    SpeedUnbindButton.TextSize = 12
    SpeedUnbindButton.Parent = tabContents["Exploits"]

    yOffsetExploits = yOffsetExploits + 40
    local SpeedLabel = Instance.new("TextLabel")
    SpeedLabel.Size = UDim2.new(0, 280, 0, 30)
    SpeedLabel.Position = UDim2.new(0, 10, 0, yOffsetExploits)
    SpeedLabel.Text = "Speed Multiplier: " .. speedMultiplier
    SpeedLabel.BackgroundTransparency = 1
    SpeedLabel.TextColor3 = Color3.fromRGB(0, 200, 255)
    SpeedLabel.Font = Enum.Font.SourceSans
    SpeedLabel.TextSize = 16
    SpeedLabel.Parent = tabContents["Exploits"]
    print("Speed label created at Y: " .. yOffsetExploits)

    yOffsetExploits = yOffsetExploits + 40
    local SpeedSlider = Instance.new("TextButton")
    SpeedSlider.Size = UDim2.new(0, 280, 0, 10)
    SpeedSlider.Position = UDim2.new(0, 10, 0, yOffsetExploits)
    SpeedSlider.Text = ""
    SpeedSlider.BackgroundColor3 = Color3.fromRGB(0, 70, 140)
    SpeedSlider.BackgroundTransparency = 0
    SpeedSlider.Parent = tabContents["Exploits"]
    print("Speed slider created at Y: " .. yOffsetExploits)

    local SpeedKnob = Instance.new("Frame")
    SpeedKnob.Size = UDim2.new(0, 20, 1, 0)
    SpeedKnob.Position = UDim2.new((speedMultiplier - 1) / 9, 0, 0, 0)
    SpeedKnob.BackgroundColor3 = Color3.fromRGB(0, 200, 255)
    SpeedKnob.BackgroundTransparency = 0
    SpeedKnob.BorderSizePixel = 0
    SpeedKnob.Parent = SpeedSlider

    yOffsetExploits = yOffsetExploits + 40
    local SaveLastPositionToggle = Instance.new("TextButton")
    SaveLastPositionToggle.Size = UDim2.new(0, 240, 0, 30)
    SaveLastPositionToggle.Position = UDim2.new(0, 10, 0, yOffsetExploits)
    SaveLastPositionToggle.Text = "☐ Save Pos: " .. (saveLastPositionEnabled and "ON" or "OFF")
    SaveLastPositionToggle.BackgroundTransparency = 1
    SaveLastPositionToggle.TextColor3 = saveLastPositionEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    SaveLastPositionToggle.Font = Enum.Font.SourceSans
    SaveLastPositionToggle.TextSize = 16
    SaveLastPositionToggle.Parent = tabContents["Exploits"]
    print("SaveLastPosition toggle created at Y: " .. yOffsetExploits)

    local SaveLastPositionBindSquare = Instance.new("TextButton")
    SaveLastPositionBindSquare.Size = UDim2.new(0, 30, 0, 30)
    SaveLastPositionBindSquare.Position = UDim2.new(0, 260, 0, yOffsetExploits)
    SaveLastPositionBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    SaveLastPositionBindSquare.Text = settings.keyBinds.SaveLastPosition and settings.keyBinds.SaveLastPosition.Name or "Bind"
    SaveLastPositionBindSquare.BackgroundTransparency = 0
    SaveLastPositionBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    SaveLastPositionBindSquare.Font = Enum.Font.SourceSans
    SaveLastPositionBindSquare.TextSize = 12
    SaveLastPositionBindSquare.Parent = tabContents["Exploits"]

    local SaveLastPositionUnbindButton = Instance.new("TextButton")
    SaveLastPositionUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    SaveLastPositionUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetExploits)
    SaveLastPositionUnbindButton.Text = "Unbind"
    SaveLastPositionUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    SaveLastPositionUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    SaveLastPositionUnbindButton.Font = Enum.Font.SourceSans
    SaveLastPositionUnbindButton.TextSize = 12
    SaveLastPositionUnbindButton.Parent = tabContents["Exploits"]

    -- Fly Logic
    local flyConnection = nil
    local function toggleFly()
        local character = getCharacter()
        if not character or not character:FindFirstChild("HumanoidRootPart") or not character:FindFirstChild("Humanoid") then
            warn("Cannot toggle fly: Invalid character or parts.")
            return
        end

        flyEnabled = not flyEnabled
        FlyToggle.Text = "☐ Fly: " .. (flyEnabled and "ON" or "OFF")
        FlyToggle.TextColor3 = flyEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.flyEnabled = flyEnabled
        saveSettings()

        if flyEnabled then
            local humanoid = character:WaitForChild("Humanoid")
            local rootPart = character:WaitForChild("HumanoidRootPart")
            humanoid.PlatformStand = true
            local bv = Instance.new("BodyVelocity")
            bv.Velocity = Vector3.new(0, 0, 0)
            bv.MaxForce = Vector3.new(controlSpeed, controlSpeed, controlSpeed)
            bv.Parent = rootPart
            
            local bg = Instance.new("BodyGyro")
            bg.MaxTorque = Vector3.new(controlSpeed, controlSpeed, controlSpeed)
            bg.P = 5000
            bg.D = 500
            bg.CFrame = rootPart.CFrame
            bg.Parent = rootPart
            
            flyConnection = RunService.RenderStepped:Connect(function()
                if not flyEnabled or not rootPart or not humanoid then
                    if bv then bv:Destroy() end
                    if bg then bg:Destroy() end
                    if flyConnection then flyConnection:Disconnect() end
                    return
                end

                local cam = workspace.CurrentCamera
                local move = Vector3.new(0, 0, 0)
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then move = move + Vector3.new(0, 0, -1) end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then move = move + Vector3.new(0, 0, 1) end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then move = move + Vector3.new(-1, 0, 0) end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then move = move + Vector3.new(1, 0, 0) end
                if UserInputService:IsKeyDown(Enum.KeyCode.Space) then move = move + Vector3.new(0, 1, 0) end
                if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then move = move + Vector3.new(0, -1, 0) end
                
                if move.Magnitude > 0 then
                    move = move.Unit * flySpeed
                    bv.Velocity = cam.CFrame:VectorToWorldSpace(move)
                    bg.CFrame = cam.CFrame
                else
                    bv.Velocity = Vector3.new(0, 0, 0)
                end
            end)
            print("Admin Fly ON!")
        else
            if flyConnection then flyConnection:Disconnect() end
            local humanoid = character:WaitForChild("Humanoid")
            local rootPart = character:WaitForChild("HumanoidRootPart")
            humanoid.PlatformStand = false
            if rootPart:FindFirstChild("BodyVelocity") then rootPart.BodyVelocity:Destroy() end
            if rootPart:FindFirstChild("BodyGyro") then rootPart.BodyGyro:Destroy() end
            humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
            print("Admin Fly OFF!")
        end
    end

    FlyToggle.MouseButton1Click:Connect(toggleFly)
    LocalPlayer.CharacterAdded:Connect(function(character)
        if flyEnabled then
            wait(0.1) -- Brief delay to ensure parts load
            toggleFly()
        end
    end)

    -- NoClip Logic
    local noClipConnection = nil
    local function toggleNoClip()
        noClipEnabled = not noClipEnabled
        NoClipToggle.Text = "☐ NoClip: " .. (noClipEnabled and "ON" or "OFF")
        NoClipToggle.TextColor3 = noClipEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.noClipEnabled = noClipEnabled
        saveSettings()

        if noClipEnabled then
            if noClipConnection then noClipConnection:Disconnect() end
            noClipConnection = RunService.Stepped:Connect(function()
                if not noClipEnabled then
                    noClipConnection:Disconnect()
                    return
                end
                local character = getCharacter()
                if character then
                    for _, part in pairs(character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else
            if noClipConnection then noClipConnection:Disconnect() end
            local character = getCharacter()
            if character then
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
        end
    end

    NoClipToggle.MouseButton1Click:Connect(toggleNoClip)

    -- Infinite Jump Logic
    local infiniteJumpConnection = nil
    local function toggleInfiniteJump()
        infiniteJumpEnabled = not infiniteJumpEnabled
        InfiniteJumpToggle.Text = "☐ Infinite Jump: " .. (infiniteJumpEnabled and "ON" or "OFF")
        InfiniteJumpToggle.TextColor3 = infiniteJumpEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.infiniteJumpEnabled = infiniteJumpEnabled
        saveSettings()

        if infiniteJumpEnabled then
            if infiniteJumpConnection then infiniteJumpConnection:Disconnect() end
            infiniteJumpConnection = UserInputService.JumpRequest:Connect(function()
                if not infiniteJumpEnabled then
                    if infiniteJumpConnection then infiniteJumpConnection:Disconnect() end
                    return
                end
                local character = getCharacter()
                if character then
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid and humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                end
            end)
        else
            if infiniteJumpConnection then infiniteJumpConnection:Disconnect() end
        end
    end

    InfiniteJumpToggle.MouseButton1Click:Connect(toggleInfiniteJump)

    -- Speed Hack Logic
    local function toggleSpeed()
        speedEnabled = not speedEnabled
        SpeedToggle.Text = "☐ Speed: " .. (speedEnabled and "ON" or "OFF")
        SpeedToggle.TextColor3 = speedEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.speedEnabled = speedEnabled
        saveSettings()

        local character = getCharacter()
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = speedEnabled and (16 * speedMultiplier) or 16
            end
        end
    end

    SpeedToggle.MouseButton1Click:Connect(toggleSpeed)

    LocalPlayer.CharacterAdded:Connect(function(character)
        if speedEnabled then
            local humanoid = character:WaitForChild("Humanoid")
            humanoid.WalkSpeed = 16 * speedMultiplier
        end
    end)

    -- Save Last Position Logic
    SaveLastPositionToggle.MouseButton1Click:Connect(function()
        saveLastPositionEnabled = not saveLastPositionEnabled
        SaveLastPositionToggle.Text = "☐ Save Pos: " .. (saveLastPositionEnabled and "ON" or "OFF")
        SaveLastPositionToggle.TextColor3 = saveLastPositionEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.saveLastPositionEnabled = saveLastPositionEnabled
        if saveLastPositionEnabled then
            local character = getCharacter()
            if character and character:FindFirstChild("HumanoidRootPart") then
                local rootPart = character.HumanoidRootPart
                lastPosition = rootPart.CFrame
                print("Last position saved: " .. tostring(lastPosition))
            else
                warn("No character or HumanoidRootPart found to save position.")
            end
        end
        saveSettings()
    end)

    -- Slider Logic
    local draggingFlySpeedSlider = false
    local draggingSpeedSlider = false

    FlySpeedSlider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingFlySpeedSlider = true
        end
    end)

    FlySpeedSlider.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingFlySpeedSlider = false
        end
    end)

    SpeedSlider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingSpeedSlider = true
        end
    end)

    SpeedSlider.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingSpeedSlider = false
        end
    end)

    RunService.RenderStepped:Connect(function()
        local mouseX = UserInputService:GetMouseLocation().X

        if draggingFlySpeedSlider then
            local flySpeedSliderPos = FlySpeedSlider.AbsolutePosition.X
            local flySpeedSliderWidth = FlySpeedSlider.AbsoluteSize.X
            local flySpeedNewPos = math.clamp((mouseX - flySpeedSliderPos) / flySpeedSliderWidth, 0, 1)
            FlySpeedKnob.Position = UDim2.new(flySpeedNewPos, 0, 0, 0)
            flySpeed = math.floor(1 + (flySpeedNewPos * 299))
            FlySpeedLabel.Text = "Fly Speed: " .. flySpeed
            settings.flySpeed = flySpeed
            saveSettings()
        end

        if draggingSpeedSlider then
            local speedSliderPos = SpeedSlider.AbsolutePosition.X
            local speedSliderWidth = SpeedSlider.AbsoluteSize.X
            local speedNewPos = math.clamp((mouseX - speedSliderPos) / speedSliderWidth, 0, 1)
            SpeedKnob.Position = UDim2.new(speedNewPos, 0, 0, 0)
            speedMultiplier = math.round((1 + (speedNewPos * 9)) * 10) / 10
                        SpeedLabel.Text = "Speed Multiplier: " .. speedMultiplier
            settings.speedMultiplier = speedMultiplier
            local character = getCharacter()
            if character and speedEnabled then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = 16 * speedMultiplier
                end
            end
            saveSettings()
        end
    end)

    -- Unbind Logic for Exploits
    FlyBindSquare.MouseButton1Click:Connect(function() startBinding(FlyBindSquare) end)
    FlyUnbindButton.MouseButton1Click:Connect(function() unbind(FlyBindSquare, "Fly") end)
    NoClipBindSquare.MouseButton1Click:Connect(function() startBinding(NoClipBindSquare) end)
    NoClipUnbindButton.MouseButton1Click:Connect(function() unbind(NoClipBindSquare, "NoClip") end)
    InfiniteJumpBindSquare.MouseButton1Click:Connect(function() startBinding(InfiniteJumpBindSquare) end)
    InfiniteJumpUnbindButton.MouseButton1Click:Connect(function() unbind(InfiniteJumpBindSquare, "InfiniteJump") end)
    SpeedBindSquare.MouseButton1Click:Connect(function() startBinding(SpeedBindSquare) end)
    SpeedUnbindButton.MouseButton1Click:Connect(function() unbind(SpeedBindSquare, "Speed") end)
    SaveLastPositionBindSquare.MouseButton1Click:Connect(function() startBinding(SaveLastPositionBindSquare) end)
    SaveLastPositionUnbindButton.MouseButton1Click:Connect(function() unbind(SaveLastPositionBindSquare, "SaveLastPosition") end)

    -- Settings Tab Content
    local playerListEnabled = settings.playerListEnabled
    local unbindAll = settings.unbindAll

    local baseYSettings = 10
    local CategoryLabelSettings = Instance.new("TextLabel")
    CategoryLabelSettings.Size = UDim2.new(0, 280, 0, 30)
    CategoryLabelSettings.Position = UDim2.new(0, 10, 0, baseYSettings)
    CategoryLabelSettings.Text = "— Settings —"
    CategoryLabelSettings.TextColor3 = Color3.fromRGB(0, 200, 255)
    CategoryLabelSettings.BackgroundTransparency = 1
    CategoryLabelSettings.Font = Enum.Font.SourceSansBold
    CategoryLabelSettings.TextSize = 18
    CategoryLabelSettings.Parent = tabContents["Settings"]
    print("Settings category label created at Y: " .. baseYSettings)

    local yOffsetSettings = baseYSettings + 40
    local GuiBindLabel = Instance.new("TextLabel")
    GuiBindLabel.Size = UDim2.new(0, 280, 0, 30)
    GuiBindLabel.Position = UDim2.new(0, 10, 0, yOffsetSettings)
    GuiBindLabel.Text = "GUI Toggle: " .. (settings.guiBind and settings.guiBind.Name or "Q")
    GuiBindLabel.BackgroundTransparency = 1
    GuiBindLabel.TextColor3 = Color3.fromRGB(0, 200, 255)
    GuiBindLabel.Font = Enum.Font.SourceSans
    GuiBindLabel.TextSize = 16
    GuiBindLabel.Parent = tabContents["Settings"]
    print("GuiBind label created at Y: " .. yOffsetSettings)

    local GuiBindSquare = Instance.new("TextButton")
    GuiBindSquare.Size = UDim2.new(0, 30, 0, 30)
    GuiBindSquare.Position = UDim2.new(0, 260, 0, yOffsetSettings)
    GuiBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    GuiBindSquare.Text = settings.guiBind and settings.guiBind.Name or "Q"
    GuiBindSquare.BackgroundTransparency = 0
    GuiBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    GuiBindSquare.Font = Enum.Font.SourceSans
    GuiBindSquare.TextSize = 12
    GuiBindSquare.Parent = tabContents["Settings"]

    local GuiUnbindButton = Instance.new("TextButton")
    GuiUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    GuiUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetSettings)
    GuiUnbindButton.Text = "Unbind"
    GuiUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    GuiUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    GuiUnbindButton.Font = Enum.Font.SourceSans
    GuiUnbindButton.TextSize = 12
    GuiUnbindButton.Parent = tabContents["Settings"]

    yOffsetSettings = yOffsetSettings + 40
    local PlayerListToggle = Instance.new("TextButton")
    PlayerListToggle.Size = UDim2.new(0, 240, 0, 30)
    PlayerListToggle.Position = UDim2.new(0, 10, 0, yOffsetSettings)
    PlayerListToggle.Text = "☐ Player List: " .. (playerListEnabled and "ON" or "OFF")
    PlayerListToggle.BackgroundTransparency = 1
    PlayerListToggle.TextColor3 = playerListEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    PlayerListToggle.Font = Enum.Font.SourceSans
    PlayerListToggle.TextSize = 16
    PlayerListToggle.Parent = tabContents["Settings"]
    print("PlayerList toggle created at Y: " .. yOffsetSettings)

    local PlayerListBindSquare = Instance.new("TextButton")
    PlayerListBindSquare.Size = UDim2.new(0, 30, 0, 30)
    PlayerListBindSquare.Position = UDim2.new(0, 260, 0, yOffsetSettings)
    PlayerListBindSquare.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    PlayerListBindSquare.Text = settings.keyBinds.PlayerList and settings.keyBinds.PlayerList.Name or "Bind"
    PlayerListBindSquare.BackgroundTransparency = 0
    PlayerListBindSquare.TextColor3 = Color3.fromRGB(0, 200, 255)
    PlayerListBindSquare.Font = Enum.Font.SourceSans
    PlayerListBindSquare.TextSize = 12
    PlayerListBindSquare.Parent = tabContents["Settings"]

    local PlayerListUnbindButton = Instance.new("TextButton")
    PlayerListUnbindButton.Size = UDim2.new(0, 50, 0, 30)
    PlayerListUnbindButton.Position = UDim2.new(0, 300, 0, yOffsetSettings)
    PlayerListUnbindButton.Text = "Unbind"
    PlayerListUnbindButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    PlayerListUnbindButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    PlayerListUnbindButton.Font = Enum.Font.SourceSans
    PlayerListUnbindButton.TextSize = 12
    PlayerListUnbindButton.Parent = tabContents["Settings"]

    yOffsetSettings = yOffsetSettings + 40
    local UnbindAllButton = Instance.new("TextButton")
    UnbindAllButton.Size = UDim2.new(0, 240, 0, 30)
    UnbindAllButton.Position = UDim2.new(0, 10, 0, yOffsetSettings)
    UnbindAllButton.Text = "Unbind All Keys"
    UnbindAllButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    UnbindAllButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    UnbindAllButton.Font = Enum.Font.SourceSans
    UnbindAllButton.TextSize = 16
    UnbindAllButton.Parent = tabContents["Settings"]
    print("UnbindAll button created at Y: " .. yOffsetSettings)

    -- Aimbot Logic
    local fovCircle = Drawing.new("Circle")
    fovCircle.Radius = fovRadius
    fovCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    fovCircle.Color = Color3.fromRGB(0, 200, 255)
    fovCircle.Thickness = 1
    fovCircle.Visible = fovCircleEnabled

    local function getClosestPlayerToCursor()
        local closestPlayer = nil
        local shortestDistance = fovRadius
        local mousePos = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)

        for _, player in pairs(PlayersService:GetPlayers()) do
            if player ~= LocalPlayer then
                if teamCheckEnabled and player.Team == LocalPlayer.Team then
                    continue
                end
                if deadCheckEnabled and player.Character and player.Character:FindFirstChildOfClass("Humanoid") and player.Character:FindFirstChildOfClass("Humanoid").Health <= 0 then
                    continue
                end
                local character = player.Character
                if character and character:FindFirstChild(aimbotBone) and character:FindFirstChildOfClass("Humanoid") and character:FindFirstChildOfClass("Humanoid").Health > 0 then
                    local bonePos, onScreen = Camera:WorldToViewportPoint(character[aimbotBone].Position)
                    if onScreen then
                        local distance = (mousePos - Vector2.new(bonePos.X, bonePos.Y)).Magnitude
                        if distance < shortestDistance then
                            closestPlayer = player
                            shortestDistance = distance
                        end
                    end
                end
            end
        end

        return closestPlayer
    end

    AimbotToggle.MouseButton1Click:Connect(function()
        aimbotEnabled = not aimbotEnabled
        AimbotToggle.Text = "☐ Aimbot: " .. (aimbotEnabled and "ON" or "OFF")
        AimbotToggle.TextColor3 = aimbotEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    end)

    local aimbotConnection
    UserInputService.InputBegan:Connect(function(input)
        if aimbotEnabled and input.UserInputType == Enum.UserInputType.MouseButton2 then
            aimbotConnection = RunService.RenderStepped:Connect(function()
                if not aimbotEnabled then
                    aimbotConnection:Disconnect()
                    return
                end
                local target = getClosestPlayerToCursor()
                if target and target.Character and target.Character:FindFirstChild(aimbotBone) then
                    local bonePos = Camera:WorldToViewportPoint(target.Character[aimbotBone].Position)
                    local currentMousePos = UserInputService:GetMouseLocation()
                    local targetPos = Vector2.new(bonePos.X, bonePos.Y)
                    local delta = (targetPos - currentMousePos) * (smoothAiming and smoothness or 1)
                    mousemoverel(delta.X, delta.Y)
                end
            end)
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton2 and aimbotConnection then
            aimbotConnection:Disconnect()
        end
    end)

    AimbotBoneDropdown.MouseButton1Click:Connect(function()
        aimbotBone = aimbotBone == "Head" and "Torso" or "Head"
        AimbotBoneLabel.Text = "Bone: " .. aimbotBone
    end)

    SmoothnessToggle.MouseButton1Click:Connect(function()
        smoothAiming = not smoothAiming
        SmoothnessToggle.Text = "☐ Smoothness: " .. (smoothAiming and "ON" or "OFF")
        SmoothnessToggle.TextColor3 = smoothAiming and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    end)

    local draggingSmoothnessSlider = false
    SmoothnessSlider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingSmoothnessSlider = true
        end
    end)

    SmoothnessSlider.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingSmoothnessSlider = false
        end
    end)

    RunService.RenderStepped:Connect(function()
        local mouseX = UserInputService:GetMouseLocation().X
        if draggingSmoothnessSlider then
            local smoothnessSliderPos = SmoothnessSlider.AbsolutePosition.X
            local smoothnessSliderWidth = SmoothnessSlider.AbsoluteSize.X
            local smoothnessNewPos = math.clamp((mouseX - smoothnessSliderPos) / smoothnessSliderWidth, 0, 1)
            SmoothnessKnob.Position = UDim2.new(smoothnessNewPos, 0, 0, 0)
            smoothness = math.round(smoothnessNewPos * 100) / 100
            SmoothnessLabel.Text = "Smoothness: " .. smoothness
        end
    end)

    FovCircleToggle.MouseButton1Click:Connect(function()
        fovCircleEnabled = not fovCircleEnabled
        fovCircle.Visible = fovCircleEnabled
        FovCircleToggle.Text = "☐ FOV Circle: " .. (fovCircleEnabled and "ON" or "OFF")
        FovCircleToggle.TextColor3 = fovCircleEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    end)

    local draggingFovCircleSlider = false
    FovCircleSlider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingFovCircleSlider = true
        end
    end)

    FovCircleSlider.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingFovCircleSlider = false
        end
    end)

    RunService.RenderStepped:Connect(function()
        local mouseX = UserInputService:GetMouseLocation().X
        if draggingFovCircleSlider then
            local fovSliderPos = FovCircleSlider.AbsolutePosition.X
            local fovSliderWidth = FovCircleSlider.AbsoluteSize.X
            local fovNewPos = math.clamp((mouseX - fovSliderPos) / fovSliderWidth, 0, 1)
            FovCircleKnob.Position = UDim2.new(fovNewPos, 0, 0, 0)
            fovRadius = math.floor(50 + (fovNewPos * 150))
            FovCircleLabel.Text = "FOV Radius: " .. fovRadius
            fovCircle.Radius = fovRadius
        end
    end)

    TeamCheckToggle.MouseButton1Click:Connect(function()
        teamCheckEnabled = not teamCheckEnabled
        TeamCheckToggle.Text = "☐ Team Check: " .. (teamCheckEnabled and "ON" or "OFF")
        TeamCheckToggle.TextColor3 = teamCheckEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    end)

    DeadCheckToggle.MouseButton1Click:Connect(function()
        deadCheckEnabled = not deadCheckEnabled
        DeadCheckToggle.Text = "☐ Dead Check: " .. (deadCheckEnabled and "ON" or "OFF")
        DeadCheckToggle.TextColor3 = deadCheckEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
    end)

    -- ESP Logic
    local function DrawESP(plr)
        local drawings = {
            Box = Drawing.new("Quad"),
            Name = Drawing.new("Text"),
            Speed = Drawing.new("Text"),
            HealthText = Drawing.new("Text"),
            HealthBar = Drawing.new("Square"),
            HealthBarOutline = Drawing.new("Square"),
            Tracer = Drawing.new("Line"),
            Skeleton = {},
            Box3D = {}
        }
        
        drawings.Box.Color = Color3.fromRGB(0, 200, 255)
        drawings.Box.Thickness = 1
        drawings.Box.Transparency = 1
        drawings.Box.Visible = false

        drawings.Name.Size = 18
        drawings.Name.Color = Color3.fromRGB(0, 200, 255)
        drawings.Name.Outline = true
        drawings.Name.Visible = false

        drawings.Speed.Size = 16
        drawings.Speed.Color = Color3.fromRGB(0, 200, 255)
        drawings.Speed.Outline = true
        drawings.Speed.Visible = false

        drawings.HealthText.Size = 16
        drawings.HealthText.Color = Color3.fromRGB(0, 200, 255)
        drawings.HealthText.Outline = true
        drawings.HealthText.Visible = false

        drawings.HealthBar.Thickness = 0
        drawings.HealthBar.Size = Vector2.new(150, 20) -- Fatter and bigger (150x20)
        drawings.HealthBar.Visible = false

        drawings.HealthBarOutline.Thickness = 1
        drawings.HealthBarOutline.Size = Vector2.new(150, 20) -- Fatter and bigger (150x20)
        drawings.HealthBarOutline.Color = Color3.fromRGB(0, 0, 0)
        drawings.HealthBarOutline.Filled = false
        drawings.HealthBarOutline.Visible = false

        drawings.Tracer.Color = Color3.fromRGB(0, 200, 255)
        drawings.Tracer.Thickness = 1
        drawings.Tracer.Visible = false

        local bones = {
            {"Head", "UpperTorso"}, {"UpperTorso", "LowerTorso"},
            {"LowerTorso", "LeftUpperLeg"}, {"LeftUpperLeg", "LeftLowerLeg"}, {"LeftLowerLeg", "LeftFoot"},
            {"LowerTorso", "RightUpperLeg"}, {"RightUpperLeg", "RightLowerLeg"}, {"RightLowerLeg", "RightFoot"},
            {"UpperTorso", "LeftUpperArm"}, {"LeftUpperArm", "LeftLowerArm"}, {"LeftLowerArm", "LeftHand"},
            {"UpperTorso", "RightUpperArm"}, {"RightUpperArm", "RightLowerArm"}, {"RightUpperArm", "RightHand"}
        }
        for _, pair in ipairs(bones) do
            local line = Drawing.new("Line")
            line.Color = Color3.fromRGB(0, 200, 255)
            line.Thickness = 2
            line.Visible = false
            drawings.Skeleton[pair[1] .. pair[2]] = line
        end

        local box3DIndices = {
            {1, 2}, {2, 3}, {3, 4}, {4, 1},
            {5, 6}, {6, 7}, {7, 8}, {8, 5},
            {1, 5}, {2, 6}, {3, 7}, {4, 8}
        }
        for i, edge in ipairs(box3DIndices) do
            local line = Drawing.new("Line")
            line.Color = Color3.fromRGB(0, 200, 255)
            line.Thickness = 1
            line.Visible = false
            drawings.Box3D[i] = line
        end

        local function Update()
            local connection
            connection = RunService.RenderStepped:Connect(function()
                if plr.Character and plr.Character.PrimaryPart and plr.Character:FindFirstChildOfClass("Humanoid") and plr.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
                    local head = plr.Character:FindFirstChild("Head") or plr.Character.PrimaryPart
                    local headPos, headVis = Camera:WorldToViewportPoint(head.Position + Vector3.new(0, 2.5, 0))
                    if headVis then
                        local TopLeft = Camera:WorldToViewportPoint((plr.Character.PrimaryPart.CFrame * CFrame.new(-2, 3, 0)).p)
                        local TopRight = Camera:WorldToViewportPoint((plr.Character.PrimaryPart.CFrame * CFrame.new(2, 3, 0)).p)
                        local BottomLeft = Camera:WorldToViewportPoint((plr.Character.PrimaryPart.CFrame * CFrame.new(-2, -3, 0)).p)
                        local BottomRight = Camera:WorldToViewportPoint((plr.Character.PrimaryPart.CFrame * CFrame.new(2, -3, 0)).p)

                        if espToggles.Box then
                            drawings.Box.PointA = Vector2.new(TopRight.X, TopRight.Y)
                            drawings.Box.PointB = Vector2.new(TopLeft.X, TopLeft.Y)
                            drawings.Box.PointC = Vector2.new(BottomLeft.X, BottomLeft.Y)
                            drawings.Box.PointD = Vector2.new(BottomRight.X, BottomRight.Y)
                            drawings.Box.Visible = true
                        else
                            drawings.Box.Visible = false
                        end

                        if espToggles.Name and headVis then
                            local nameWidth = drawings.Name.TextBounds.X
                            drawings.Name.Position = Vector2.new(headPos.X - (nameWidth / 2), headPos.Y - 30)
                            drawings.Name.Text = plr.Name
                            drawings.Name.Visible = true
                        else
                            drawings.Name.Visible = false
                        end

                        if espToggles.Speed and headVis then
                            local currentPos = plr.Character.HumanoidRootPart.Position
                            if not lastPositions[plr] then lastPositions[plr] = currentPos end
                            local lastPos = lastPositions[plr]
                            local delta = (currentPos - lastPos).Magnitude
                            local speed = delta / RunService.RenderStepped:Wait()
                            drawings.Speed.Position = Vector2.new(headPos.X, headPos.Y + 10)
                            drawings.Speed.Text = string.format("Speed: %.1f", speed)
                            lastPositions[plr] = currentPos
                            drawings.Speed.Visible = true
                        else
                            drawings.Speed.Visible = false
                        end

                        if espToggles.HealthBar and headVis then
                            local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
                            if humanoid then
                                local healthPercent = humanoid.Health / humanoid.MaxHealth
                                local distance = (Camera.CFrame.Position - head.Position).Magnitude
                                local baseWidth = 150 -- Fatter and bigger
                                local baseHeight = 20 -- Fatter and bigger
                                local scaleFactor = math.clamp(10 / distance, 0.1, 1)
                                local barWidth = baseWidth * scaleFactor
                                local barHeight = baseHeight * scaleFactor
                                local barX = headPos.X - (barWidth / 2)
                                local barY = headPos.Y

                                drawings.HealthText.Text = math.floor(healthPercent * 100) .. "%"
                                local textWidth = drawings.HealthText.TextBounds.X
                                drawings.HealthText.Position = Vector2.new(barX + (barWidth / 2) - (textWidth / 2), barY - 25 * scaleFactor)
                                drawings.HealthText.Visible = true

                                drawings.HealthBar.Position = Vector2.new(barX, barY)
                                drawings.HealthBar.Size = Vector2.new(barWidth * healthPercent, barHeight)
                                drawings.HealthBar.Color = Color3.fromRGB(255 * (1 - healthPercent), 255 * healthPercent, 0)
                                drawings.HealthBar.Visible = true

                                drawings.HealthBarOutline.Position = Vector2.new(barX, barY)
                                drawings.HealthBarOutline.Size = Vector2.new(barWidth, barHeight)
                                drawings.HealthBarOutline.Visible = true
                            end
                        else
                            drawings.HealthText.Visible = false
                            drawings.HealthBar.Visible = false
                            drawings.HealthBarOutline.Visible = false
                        end

                        if espToggles.Tracer then
                            local chest = plr.Character:FindFirstChild("UpperTorso") or plr.Character:FindFirstChild("Torso")
                            if chest then
                                local chestPos, chestVis = Camera:WorldToViewportPoint(chest.Position)
                                if chestVis then
                                    drawings.Tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                                    drawings.Tracer.To = Vector2.new(chestPos.X, chestPos.Y)
                                    drawings.Tracer.Visible = true
                                else
                                    drawings.Tracer.Visible = false
                                end
                            else
                                drawings.Tracer.Visible = false
                            end
                        else
                            drawings.Tracer.Visible = false
                        end

                        if espToggles.Skeleton then
                            for _, pair in ipairs(bones) do
                                local p1 = plr.Character:FindFirstChild(pair[1])
                                local p2 = plr.Character:FindFirstChild(pair[2])
                                if p1 and p2 then
                                    local screenP1, vis1 = Camera:WorldToViewportPoint(p1.Position)
                                    local screenP2, vis2 = Camera:WorldToViewportPoint(p2.Position)
                                    if vis1 and vis2 then
                                        local boneLine = drawings.Skeleton[pair[1] .. pair[2]]
                                        boneLine.From = Vector2.new(screenP1.X, screenP1.Y)
                                        boneLine.To = Vector2.new(screenP2.X, screenP2.Y)
                                        boneLine.Visible = true
                                    else
                                        drawings.Skeleton[pair[1] .. pair[2]].Visible = false
                                    end
                                end
                            end
                        else
                            for _, line in pairs(drawings.Skeleton) do
                                line.Visible = false
                            end
                        end

                        if espToggles.Box3D then
                            local size = plr.Character:GetExtentsSize() * 1.1
                            local cf = plr.Character.PrimaryPart.CFrame
                            local corners = {
                                cf * CFrame.new(-size.X/2,  size.Y/2, -size.Z/2),
                                cf * CFrame.new( size.X/2,  size.Y/2, -size.Z/2),
                                cf * CFrame.new( size.X/2, -size.Y/2, -size.Z/2),
                                cf * CFrame.new(-size.X/2, -size.Y/2, -size.Z/2),
                                cf * CFrame.new(-size.X/2,  size.Y/2,  size.Z/2),
                                cf * CFrame.new( size.X/2,  size.Y/2,  size.Z/2),
                                cf * CFrame.new( size.X/2, -size.Y/2,  size.Z/2),
                                cf * CFrame.new(-size.X/2, -size.Y/2,  size.Z/2)
                            }
                            local screenCorners = {}
                            local allVisible = true
                            for i, corner in ipairs(corners) do
                                local screenPos, vis = Camera:WorldToViewportPoint(corner.p)
                                screenCorners[i] = Vector2.new(screenPos.X, screenPos.Y)
                                if not vis then allVisible = false end
                            end
                            if allVisible then
                                for i, edge in ipairs(box3DIndices) do
                                    local line = drawings.Box3D[i]
                                    line.From = screenCorners[edge[1]]
                                    line.To = screenCorners[edge[2]]
                                    line.Visible = true
                                end
                            else
                                for _, line in ipairs(drawings.Box3D) do
                                    line.Visible = false
                                end
                            end
                        else
                            for _, line in ipairs(drawings.Box3D) do
                                line.Visible = false
                            end
                        end
                    else
                        for _, drawing in pairs(drawings) do
                            if type(drawing) == "table" then
                                for _, line in pairs(drawing) do
                                    line.Visible = false
                                end
                            else
                                drawing.Visible = false
                            end
                        end
                    end
                else
                    for _, drawing in pairs(drawings) do
                        if type(drawing) == "table" then
                            for _, line in pairs(drawing) do
                                line.Visible = false
                            end
                        else
                            drawing.Visible = false
                        end
                    end
                    if not PlayersService:FindFirstChild(plr.Name) then
                        connection:Disconnect()
                    end
                end
            end)
        end
        coroutine.wrap(Update)()
        espPlayers[plr] = drawings
    end

    for _, player in pairs(PlayersService:GetPlayers()) do
        if player ~= LocalPlayer then
            DrawESP(player)
        end
    end

    PlayersService.PlayerAdded:Connect(function(player)
        if player ~= LocalPlayer then
            DrawESP(player)
        end
    end)

    BoxToggle.MouseButton1Click:Connect(function()
        espToggles.Box = not espToggles.Box
        BoxToggle.Text = "☐ Box ESP: " .. (espToggles.Box and "ON" or "OFF")
        BoxToggle.TextColor3 = espToggles.Box and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.espToggles.Box = espToggles.Box
        saveSettings()
    end)

    NameToggle.MouseButton1Click:Connect(function()
        espToggles.Name = not espToggles.Name
        NameToggle.Text = "☐ Name ESP: " .. (espToggles.Name and "ON" or "OFF")
        NameToggle.TextColor3 = espToggles.Name and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.espToggles.Name = espToggles.Name
        saveSettings()
    end)

    SpeedToggleVisual.MouseButton1Click:Connect(function()
        espToggles.Speed = not espToggles.Speed
        SpeedToggleVisual.Text = "☐ Speed ESP: " .. (espToggles.Speed and "ON" or "OFF")
        SpeedToggleVisual.TextColor3 = espToggles.Speed and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.espToggles.Speed = espToggles.Speed
        saveSettings()
    end)

    HealthBarToggle.MouseButton1Click:Connect(function()
        espToggles.HealthBar = not espToggles.HealthBar
        HealthBarToggle.Text = "☐ HealthBar ESP: " .. (espToggles.HealthBar and "ON" or "OFF")
        HealthBarToggle.TextColor3 = espToggles.HealthBar and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.espToggles.HealthBar = espToggles.HealthBar
        saveSettings()
    end)

    TracerToggle.MouseButton1Click:Connect(function()
        espToggles.Tracer = not espToggles.Tracer
        TracerToggle.Text = "☐ Tracer ESP: " .. (espToggles.Tracer and "ON" or "OFF")
        TracerToggle.TextColor3 = espToggles.Tracer and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.espToggles.Tracer = espToggles.Tracer
        saveSettings()
    end)

    SkeletonToggle.MouseButton1Click:Connect(function()
        espToggles.Skeleton = not espToggles.Skeleton
        SkeletonToggle.Text = "☐ Skeleton ESP: " .. (espToggles.Skeleton and "ON" or "OFF")
        SkeletonToggle.TextColor3 = espToggles.Skeleton and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.espToggles.Skeleton = espToggles.Skeleton
        saveSettings()
    end)

    Box3DToggle.MouseButton1Click:Connect(function()
        espToggles.Box3D = not espToggles.Box3D
        Box3DToggle.Text = "☐ 3D Box ESP: " .. (espToggles.Box3D and "ON" or "OFF")
        Box3DToggle.TextColor3 = espToggles.Box3D and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.espToggles.Box3D = espToggles.Box3D
        saveSettings()
    end)

    FullbrightToggle.MouseButton1Click:Connect(function()
        fullbrightEnabled = not fullbrightEnabled
        FullbrightToggle.Text = "☐ Fullbright: " .. (fullbrightEnabled and "ON" or "OFF")
        FullbrightToggle.TextColor3 = fullbrightEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
        settings.fullbrightEnabled = fullbrightEnabled
        saveSettings()

        if fullbrightEnabled then
            game:GetService("Lighting").Brightness = 2
            game:GetService("Lighting").ClockTime = 14
            game:GetService("Lighting").FogEnd = 100000
            game:GetService("Lighting").GlobalShadows = false
        else
            game:GetService("Lighting"):ClearAllChildren()
        end
    end)

    -- Unbind Logic for Aimbot
    AimbotBindSquare.MouseButton1Click:Connect(function() startBinding(AimbotBindSquare) end)
    AimbotUnbindButton.MouseButton1Click:Connect(function() unbind(AimbotBindSquare, "Aimbot") end)
    SmoothnessBindSquare.MouseButton1Click:Connect(function() startBinding(SmoothnessBindSquare) end)
    SmoothnessUnbindButton.MouseButton1Click:Connect(function() unbind(SmoothnessBindSquare, "Smoothness") end)
    FovCircleBindSquare.MouseButton1Click:Connect(function() startBinding(FovCircleBindSquare) end)
    FovCircleUnbindButton.MouseButton1Click:Connect(function() unbind(FovCircleBindSquare, "FovCircle") end)
    TeamCheckBindSquare.MouseButton1Click:Connect(function() startBinding(TeamCheckBindSquare) end)
    TeamCheckUnbindButton.MouseButton1Click:Connect(function() unbind(TeamCheckBindSquare, "TeamCheck") end)
    DeadCheckBindSquare.MouseButton1Click:Connect(function() startBinding(DeadCheckBindSquare) end)
    DeadCheckUnbindButton.MouseButton1Click:Connect(function() unbind(DeadCheckBindSquare, "DeadCheck") end)

    -- Unbind Logic for Visuals
    BoxBindSquare.MouseButton1Click:Connect(function() startBinding(BoxBindSquare) end)
    BoxUnbindButton.MouseButton1Click:Connect(function() unbind(BoxBindSquare, "Box") end)
    NameBindSquare.MouseButton1Click:Connect(function() startBinding(NameBindSquare) end)
    NameUnbindButton.MouseButton1Click:Connect(function() unbind(NameBindSquare, "Name") end)
    SpeedBindSquareVisual.MouseButton1Click:Connect(function() startBinding(SpeedBindSquareVisual) end)
    SpeedUnbindButtonVisual.MouseButton1Click:Connect(function() unbind(SpeedBindSquareVisual, "SpeedVisual") end)
    HealthBarBindSquare.MouseButton1Click:Connect(function() startBinding(HealthBarBindSquare) end)
    HealthBarUnbindButton.MouseButton1Click:Connect(function() unbind(HealthBarBindSquare, "HealthBar") end)
    TracerBindSquare.MouseButton1Click:Connect(function() startBinding(TracerBindSquare) end)
    TracerUnbindButton.MouseButton1Click:Connect(function() unbind(TracerBindSquare, "Tracer") end)
    SkeletonBindSquare.MouseButton1Click:Connect(function() startBinding(SkeletonBindSquare) end)
    SkeletonUnbindButton.MouseButton1Click:Connect(function() unbind(SkeletonBindSquare, "Skeleton") end)
    Box3DBindSquare.MouseButton1Click:Connect(function() startBinding(Box3DBindSquare) end)
    Box3DUnbindButton.MouseButton1Click:Connect(function() unbind(Box3DBindSquare, "Box3D") end)
    FullbrightBindSquare.MouseButton1Click:Connect(function() startBinding(FullbrightBindSquare) end)
    FullbrightUnbindButton.MouseButton1Click:Connect(function() unbind(FullbrightBindSquare, "Fullbright") end)

    -- Unbind Logic for Settings
    GuiBindSquare.MouseButton1Click:Connect(function() startBinding(GuiBindSquare) end)
    GuiUnbindButton.MouseButton1Click:Connect(function() unbind(GuiBindSquare, "GuiBind") end)
    PlayerListBindSquare.MouseButton1Click:Connect(function() startBinding(PlayerListBindSquare) end)
    PlayerListUnbindButton.MouseButton1Click:Connect(function() unbind(PlayerListBindSquare, "PlayerList") end)

    -- Placeholder implementations for startBinding and unbind (if not already defined)
    local function startBinding(button)
        bindingFeature = button
        button.Text = "Press a key..."
        local connection
        connection = UserInputService.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Keyboard then
                local key = input.KeyCode
                button.Text = key.Name
                settings.keyBinds[button.Parent.Name] = key
                saveSettings()
                bindingFeature = nil
                connection:Disconnect()
            end
        end)
    end

    local function unbind(button, feature)
        button.Text = "Bind"
        settings.keyBinds[feature] = nil
        saveSettings()
    end

    -- Keybind Handling
    UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
        if gameProcessedEvent then return end

        if input.KeyCode == settings.guiBind then
            MainFrame.Visible = not MainFrame.Visible
        end

        for feature, key in pairs(settings.keyBinds) do
            if input.KeyCode == key then
                if feature == "Aimbot" then
                    aimbotEnabled = not aimbotEnabled
                    AimbotToggle.Text = "☐ Aimbot: " .. (aimbotEnabled and "ON" or "OFF")
                    AimbotToggle.TextColor3 = aimbotEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                elseif feature == "Smoothness" then
                    smoothAiming = not smoothAiming
                    SmoothnessToggle.Text = "☐ Smoothness: " .. (smoothAiming and "ON" or "OFF")
                    SmoothnessToggle.TextColor3 = smoothAiming and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                elseif feature == "FovCircle" then
                    fovCircleEnabled = not fovCircleEnabled
                    fovCircle.Visible = fovCircleEnabled
                    FovCircleToggle.Text = "☐ FOV Circle: " .. (fovCircleEnabled and "ON" or "OFF")
                    FovCircleToggle.TextColor3 = fovCircleEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                elseif feature == "TeamCheck" then
                    teamCheckEnabled = not teamCheckEnabled
                    TeamCheckToggle.Text = "☐ Team Check: " .. (teamCheckEnabled and "ON" or "OFF")
                    TeamCheckToggle.TextColor3 = teamCheckEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                elseif feature == "DeadCheck" then
                    deadCheckEnabled = not deadCheckEnabled
                    DeadCheckToggle.Text = "☐ Dead Check: " .. (deadCheckEnabled and "ON" or "OFF")
                    DeadCheckToggle.TextColor3 = deadCheckEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                elseif feature == "Box" then
                    espToggles.Box = not espToggles.Box
                    BoxToggle.Text = "☐ Box ESP: " .. (espToggles.Box and "ON" or "OFF")
                    BoxToggle.TextColor3 = espToggles.Box and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                    settings.espToggles.Box = espToggles.Box
                    saveSettings()
                elseif feature == "Name" then
                    espToggles.Name = not espToggles.Name
                    NameToggle.Text = "☐ Name ESP: " .. (espToggles.Name and "ON" or "OFF")
                    NameToggle.TextColor3 = espToggles.Name and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                    settings.espToggles.Name = espToggles.Name
                    saveSettings()
                elseif feature == "SpeedVisual" then
                    espToggles.Speed = not espToggles.Speed
                    SpeedToggleVisual.Text = "☐ Speed ESP: " .. (espToggles.Speed and "ON" or "OFF")
                    SpeedToggleVisual.TextColor3 = espToggles.Speed and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                    settings.espToggles.Speed = espToggles.Speed
                    saveSettings()
                elseif feature == "HealthBar" then
                    espToggles.HealthBar = not espToggles.HealthBar
                    HealthBarToggle.Text = "☐ HealthBar ESP: " .. (espToggles.HealthBar and "ON" or "OFF")
                    HealthBarToggle.TextColor3 = espToggles.HealthBar and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                    settings.espToggles.HealthBar = espToggles.HealthBar
                    saveSettings()
                elseif feature == "Tracer" then
                    espToggles.Tracer = not espToggles.Tracer
                    TracerToggle.Text = "☐ Tracer ESP: " .. (espToggles.Tracer and "ON" or "OFF")
                    TracerToggle.TextColor3 = espToggles.Tracer and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                    settings.espToggles.Tracer = espToggles.Tracer
                    saveSettings()
                elseif feature == "Skeleton" then
                    espToggles.Skeleton = not espToggles.Skeleton
                    SkeletonToggle.Text = "☐ Skeleton ESP: " .. (espToggles.Skeleton and "ON" or "OFF")
                    SkeletonToggle.TextColor3 = espToggles.Skeleton and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                    settings.espToggles.Skeleton = espToggles.Skeleton
                    saveSettings()
                elseif feature == "Box3D" then
                    espToggles.Box3D = not espToggles.Box3D
                    Box3DToggle.Text = "☐ 3D Box ESP: " .. (espToggles.Box3D and "ON" or "OFF")
                    Box3DToggle.TextColor3 = espToggles.Box3D and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                    settings.espToggles.Box3D = espToggles.Box3D
                    saveSettings()
                elseif feature == "Fullbright" then
                    fullbrightEnabled = not fullbrightEnabled
                    FullbrightToggle.Text = "☐ Fullbright: " .. (fullbrightEnabled and "ON" or "OFF")
                    FullbrightToggle.TextColor3 = fullbrightEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                    settings.fullbrightEnabled = fullbrightEnabled
                    if fullbrightEnabled then
                        game:GetService("Lighting").Brightness = 2
                        game:GetService("Lighting").ClockTime = 14
                        game:GetService("Lighting").FogEnd = 100000
                        game:GetService("Lighting").GlobalShadows = false
                    else
                        game:GetService("Lighting"):ClearAllChildren()
                    end
                    saveSettings()
                elseif feature == "Fly" then
                    toggleFly()
                elseif feature == "NoClip" then
                    toggleNoClip()
                elseif feature == "InfiniteJump" then
                    toggleInfiniteJump()
                elseif feature == "Speed" then
                    toggleSpeed()
                elseif feature == "SaveLastPosition" then
                    saveLastPositionEnabled = not saveLastPositionEnabled
                    SaveLastPositionToggle.Text = "☐ Save Pos: " .. (saveLastPositionEnabled and "ON" or "OFF")
                    SaveLastPositionToggle.TextColor3 = saveLastPositionEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                    settings.saveLastPositionEnabled = saveLastPositionEnabled
                    if saveLastPositionEnabled then
                        local character = getCharacter()
                        if character and character:FindFirstChild("HumanoidRootPart") then
                            local rootPart = character.HumanoidRootPart
                            lastPosition = rootPart.CFrame
                            print("Last position saved: " .. tostring(lastPosition))
                        else
                            warn("No character or HumanoidRootPart found to save position.")
                        end
                    end
                    saveSettings()
                elseif feature == "PlayerList" then
                    playerListEnabled = not playerListEnabled
                    PlayerListToggle.Text = "☐ Player List: " .. (playerListEnabled and "ON" or "OFF")
                    PlayerListToggle.TextColor3 = playerListEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(0, 200, 255)
                    settings.playerListEnabled = playerListEnabled
                    saveSettings()
                end
            end
        end
    end)

    UnbindAllButton.MouseButton1Click:Connect(function()
        unbindAll = not unbindAll
        if unbindAll then
            settings.keyBinds = {}
            for _, button in pairs(MainFrame:GetDescendants()) do
                if button:IsA("TextButton") and button.Text == "Bind" then
                    button.Text = "Bind"
                end
            end
            saveSettings()
            print("All keybinds unbound.")
        end
    end)

    -- GUI Toggle
    UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
        if gameProcessedEvent then return end
        if input.KeyCode == settings.guiBind then
            MainFrame.Visible = not MainFrame.Visible
        end
    end)

    -- Initial Tab Switch
    switchTab("Exploits")

    -- Cleanup on Script Exit
    game:BindToClose(function()
        if flyConnection then flyConnection:Disconnect() end
        if noClipConnection then noClipConnection:Disconnect() end
        if infiniteJumpConnection then infiniteJumpConnection:Disconnect() end
        if aimbotConnection then aimbotConnection:Disconnect() end
        for _, drawings in pairs(espPlayers) do
            for _, drawing in pairs(drawings) do
                if type(drawing) == "table" then
                    for _, line in pairs(drawing) do
                        line:Remove()
                    end
                else
                    drawing:Remove()
                end
            end
        end
        fovCircle:Remove()
        saveSettings()
    end)
end)

if not success then
    warn("Script failed to initialize: " .. tostring(err))
end
